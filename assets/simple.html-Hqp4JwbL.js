import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as u,c as r,b as d,f as o,w as a,d as n,e as s,a as c}from"./app-yOESM-4p.js";const k={},v=n("p",null,[n("strong",null,"设计不是一个固定的技术，每个人写出的代码可能都不一样，他都有自己的设计方案和设计理念，设计模式只是提供了一套别人总结好的解决方案，我们写出来的代码可能并不是完全符合设计模式本身，但是只要它的思想和理念和某个设计模式相同，那么你就是对的，所以说我们只要写出优雅的、拓展性强的、可阅读的、测试性强的代码即可。")],-1),m=n("h1",{id:"软件设计原则",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#软件设计原则","aria-hidden":"true"},"#"),s(" 软件设计原则")],-1),b=n("p",null,"当涉及到软件设计和开发原则时，有一些常见的原则和准则可以帮助我们编写高质量、可维护和可扩展的代码。以下是其中一些重要的原则和准则：",-1),y=n("ul",null,[n("li",null,[n("strong",null,"单一职责原则"),s("：一个类应该只有一个引起变化的原因，负责一项职责（Single Responsibility Principle，SRP）。")]),n("li",null,[n("strong",null,"开放封闭原则"),s("：软件实体（类、模块、函数等）应该对扩展开放，对修改关闭（Open-Closed Principle，OCP）。")]),n("li",null,[n("strong",null,"里氏替换原则"),s("：子类型必须能够替换其基类型而不影响程序的正确性（Liskov Substitution Principle，LSP）。")]),n("li",null,[n("strong",null,"接口隔离原则"),s("：客户端不应该强迫依赖于它们不需要的接口（Interface Segregation Principle，ISP）。")]),n("li",null,[n("strong",null,"依赖倒置原则"),s("：高层模块不应该依赖于低层模块，二者都应该依赖于抽象（Dependency Inversion Principle，DIP）。")])],-1),w=n("p",null,"保持代码简单易懂，避免过度设计和复杂化，尽量保持代码的简洁性（Keep It Simple, Stupid）。",-1),g=n("p",null,"避免重复代码，将重复的逻辑抽象成可复用的组件或函数，提高代码的可维护性和可读性（Don't Repeat Yourself）。",-1),h=n("p",null,"一个对象应该尽量减少与其他对象之间的直接交互，应该只与其直接朋友进行通信。这样可以降低对象之间的耦合度，提高代码的可维护性和灵活性（Law of Demeter，LoD）。",-1),S=c(`<figure><img src="http://sevencowcloud.chiou.icu/img/design-pattern/principle.png" alt="软件设计原则-思维导图" tabindex="0" loading="lazy"><figcaption>软件设计原则-思维导图</figcaption></figure><p>这些原则和准则的目标是提高软件系统的质量、可维护性和可扩展性。它们强调了良好的设计实践和规范，使得代码更具可读性、可测试性和可维护性。</p><h2 id="一、单一原则" tabindex="-1"><a class="header-anchor" href="#一、单一原则" aria-hidden="true">#</a> 一、单一原则</h2><h3 id="_1、简介" tabindex="-1"><a class="header-anchor" href="#_1、简介" aria-hidden="true">#</a> 1、简介</h3><p>单一职责原则（Single Responsibility Principle，简称SRP），<strong>它要求一个类或模块应该只负责一个特定的功能</strong>。</p><ul><li>这有助于降低类之间的耦合度，提高代码的可读性和可维护性。</li><li>我们可以把模块看作比类更加抽象的概念，类也可以看作模块。或者把模块看作比类更加粗粒度的代码块，模块中包含多个类，多个类组成一个模块。</li></ul><h3 id="_2、例子" tabindex="-1"><a class="header-anchor" href="#_2、例子" aria-hidden="true">#</a> 2、例子</h3><blockquote><p><strong>案例：</strong></p></blockquote><p>当应用单一责任原则时，我们可以看到代码的模块化和职责分离，每个类或模块专注于一个单一的职责。以下是一个示例，展示了一个简单的订单处理系统，其中有两个类：<code>Order</code> 和 <code>EmailSender</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 使用单一责任原则的代码示例</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> orderId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> customerName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> totalAmount<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token keyword">int</span> orderId<span class="token punctuation">,</span> <span class="token class-name">String</span> customerName<span class="token punctuation">,</span> <span class="token keyword">double</span> totalAmount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>orderId <span class="token operator">=</span> orderId<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>customerName <span class="token operator">=</span> customerName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>totalAmount <span class="token operator">=</span> totalAmount<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理订单的逻辑</span>
        <span class="token comment">// ...</span>

        <span class="token function">sendConfirmationEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sendConfirmationEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">EmailSender</span> emailSender <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmailSender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;Dear &quot;</span> <span class="token operator">+</span> customerName <span class="token operator">+</span> <span class="token string">&quot;, your order with ID &quot;</span> <span class="token operator">+</span> orderId <span class="token operator">+</span> <span class="token string">&quot; has been processed.&quot;</span><span class="token punctuation">;</span>
        emailSender<span class="token punctuation">.</span><span class="token function">sendEmail</span><span class="token punctuation">(</span>customerName<span class="token punctuation">,</span> <span class="token string">&quot;Order Confirmation&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmailSender</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendEmail</span><span class="token punctuation">(</span><span class="token class-name">String</span> recipient<span class="token punctuation">,</span> <span class="token class-name">String</span> subject<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 发送电子邮件的逻辑</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，<code>Order</code> 类负责表示订单，并包含订单的处理逻辑。它的职责是处理订单和发送确认电子邮件。<code>EmailSender</code> 类专门负责发送电子邮件。</p><p>这样设计的好处是，<code>Order</code> 类只关注订单的处理逻辑，不涉及与电子邮件发送相关的代码。这遵循了单一责任原则，使得代码更加模块化、可维护和可测试。</p><p>现在，让我们看一下如果不遵循单一责任原则会发生什么：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 没有使用单一责任原则的代码示例</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> orderId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> customerName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> totalAmount<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token keyword">int</span> orderId<span class="token punctuation">,</span> <span class="token class-name">String</span> customerName<span class="token punctuation">,</span> <span class="token keyword">double</span> totalAmount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>orderId <span class="token operator">=</span> orderId<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>customerName <span class="token operator">=</span> customerName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>totalAmount <span class="token operator">=</span> totalAmount<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理订单的逻辑</span>
        <span class="token comment">// ...</span>
        
        <span class="token function">sendConfirmationEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sendConfirmationEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 发送电子邮件的逻辑</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，<code>Order</code> 类不仅负责订单的处理逻辑，还包含了发送电子邮件的逻辑。这违反了单一责任原则，导致一个类承担了多个职责。</p><p>这种设计的问题在于，如果以后需要更改或替换发送电子邮件的方式，需要修改 <code>Order</code> 类中的代码，这可能导致不必要的变更风险，并增加了代码的复杂性。</p><p>通过对比这两个示例，我们可以清晰地看到应用单一责任原则的代码更加清晰、可维护和可扩展，每个类或模块只关注一个单一的职责，避免了不必要的耦合。</p><blockquote><p><strong>好处解析：</strong></p></blockquote><p>当使用单一责任原则的代码需要进行维护时，其好处主要体现在以下几个方面：</p><ol><li><p><strong>修改订单处理逻辑</strong>：假设我们需要修改订单处理逻辑，例如添加一些额外的验证或处理步骤。在使用单一责任原则的代码中，我们只需关注 <code>Order</code> 类中与订单处理逻辑相关的代码，而不必担心影响到与电子邮件发送相关的代码。这样的职责分离使得修改订单处理逻辑变得更加简单和直观。</p></li><li><p><strong>替换邮件发送方式</strong>：如果我们需要更改或替换邮件发送方式，例如从使用SMTP协议改为使用API调用发送邮件，或者使用不同的邮件服务提供商。在使用单一责任原则的代码中，我们只需关注 <code>EmailSender</code> 类中的邮件发送逻辑，而不必修改 <code>Order</code> 类。这样的职责分离使得替换邮件发送方式变得更加容易和安全。</p></li><li><p><strong>测试的简化</strong>：由于单一责任原则使得代码更加模块化和职责清晰，因此测试变得更加简单。在使用单一责任原则的代码中，我们可以轻松地针对不同的职责编写独立的单元测试，而不必处理与其他职责相关的复杂逻辑。这样的测试可分离性使得测试更加可靠和可维护。</p></li><li><p><strong>降低风险</strong>：当需要对代码进行修改时，使用单一责任原则的代码降低了引入错误的风险。因为每个类或模块只关注一个职责，修改其中一个部分不会影响到其他部分，减少了不必要的依赖和耦合。这使得维护过程更加可控和安全。</p></li></ol><p>总之，使用单一责任原则的代码在维护时具有更高的可维护性、可测试性和可扩展性。代码的职责分离使得维护过程更加简化和安全，降低了风险，并促进了代码的模块化和解耦。这使得开发者能够更加轻松地修改、扩展和测试代码，以满足系统的变化需求。</p><h3 id="_3、总结" tabindex="-1"><a class="header-anchor" href="#_3、总结" aria-hidden="true">#</a> 3、总结</h3><p>一个类只负责完成一个职责或者功能。但是也要结合具体的业务。</p><ul><li>也就是说，<strong>不要设计大而全的类，要设计粒度小、功能单一的类。</strong></li><li>换个角度来讲就是，一个类包含了两个或者两个以上业务不相干的功能，那我们就说它职责不够单一，应该将它拆分成多个功能更加单一、粒度更细的类。</li></ul><h2 id="二、开闭原则" tabindex="-1"><a class="header-anchor" href="#二、开闭原则" aria-hidden="true">#</a> 二、开闭原则</h2><h3 id="_1、简介-1" tabindex="-1"><a class="header-anchor" href="#_1、简介-1" aria-hidden="true">#</a> 1、简介</h3><p>开闭原则（pen Closed Principle，简写为 OCP）。它要求应该<code>对扩展开放、对修改关闭</code>。</p><ul><li>说人话就是，<strong>当我们需要添加一个新的功能时，应该在已有代码基础上扩展代码（新增模块、类、方法等），而非修改已有代码（修改模块、类、方法等）</strong>。</li></ul><h3 id="_2、例子-1" tabindex="-1"><a class="header-anchor" href="#_2、例子-1" aria-hidden="true">#</a> 2、例子</h3><blockquote><p>案例：</p></blockquote><p>如果没有遵循开闭原则，代码可能会如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> totalAmount<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token keyword">double</span> totalAmount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>totalAmount <span class="token operator">=</span> totalAmount<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 计算折扣后的金额</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getDiscountedAmount</span><span class="token punctuation">(</span><span class="token class-name">String</span> discountType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">double</span> discountedAmount <span class="token operator">=</span> totalAmount<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>discountType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;FESTIVAL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            discountedAmount <span class="token operator">=</span> totalAmount <span class="token operator">*</span> <span class="token number">0.9</span><span class="token punctuation">;</span> <span class="token comment">// 节日折扣，9折</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>discountType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;SEASONAL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            discountedAmount <span class="token operator">=</span> totalAmount <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">;</span> <span class="token comment">// 季节折扣，8折</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> discountedAmount<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，订单类 <code>Order</code> 中的 <code>getDiscountedAmount</code> 方法根据不同的折扣类型应用相应的折扣。当需要添加新的折扣类型时，我们不得不修改 <code>getDiscountedAmount</code> 方法的代码，增加新的判断逻辑。</p><p>这种设计违反了开闭原则，具有以下不利影响：</p><ol><li><p><strong>代码的脆弱性</strong>：每次添加新的折扣类型时，我们需要修改现有的代码。这增加了代码的脆弱性，因为任何错误的修改都可能导致现有功能的破坏。</p></li><li><p><strong>可维护性下降</strong>：在没有遵循开闭原则的情况下，代码中的条件逻辑会不断增加，使得代码变得复杂和难以维护。当折扣类型增多时，代码会变得冗长且难以阅读，降低了可维护性。</p></li><li><p><strong>扩展困难</strong>：由于没有使用抽象和多态来定义折扣策略，我们无法轻松地扩展和添加新的折扣类型。每次需要添加新的折扣类型时，都需要修改现有的代码，这增加了开发的复杂性和风险。</p></li><li><p><strong>测试困难</strong>：代码中的条件逻辑使得测试变得困难，因为需要编写多个测试用例来覆盖不同的分支。同时，每次修改现有的条件逻辑时，还需要更新相关的测试代码，增加了测试的工作量。</p></li></ol><p>综上所述，如果不遵循开闭原则，代码将变得脆弱、难以维护和扩展。通过引入抽象和多态的设计方式，可以改善代码的可扩展性、可维护性和测试性，使代码更具弹性和适应性。</p><blockquote><p><strong>遵循开闭原则的案例：</strong></p></blockquote><p>在上述代码中，我们可以使用开闭原则对其进行改进。我们可以引入一个抽象的折扣策略接口，每种折扣类型都实现该接口，然后在订单类中使用策略模式来计算折扣金额。</p><p>以下是使用开闭原则改进后的代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 折扣策略接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DiscountStrategy</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> <span class="token function">applyDiscount</span><span class="token punctuation">(</span><span class="token keyword">double</span> totalAmount<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 节日折扣策略</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FestivalDiscountStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">DiscountStrategy</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">applyDiscount</span><span class="token punctuation">(</span><span class="token keyword">double</span> totalAmount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> totalAmount <span class="token operator">*</span> <span class="token number">0.9</span><span class="token punctuation">;</span> <span class="token comment">// 节日折扣，9折</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 季节折扣策略</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeasonalDiscountStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">DiscountStrategy</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">applyDiscount</span><span class="token punctuation">(</span><span class="token keyword">double</span> totalAmount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> totalAmount <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">;</span> <span class="token comment">// 季节折扣，8折</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 订单类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> totalAmount<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">DiscountStrategy</span> discountStrategy<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token keyword">double</span> totalAmount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>totalAmount <span class="token operator">=</span> totalAmount<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 设置折扣策略</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDiscountStrategy</span><span class="token punctuation">(</span><span class="token class-name">DiscountStrategy</span> discountStrategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>discountStrategy <span class="token operator">=</span> discountStrategy<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 计算折扣后的金额</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getDiscountedAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>discountStrategy <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> discountStrategy<span class="token punctuation">.</span><span class="token function">applyDiscount</span><span class="token punctuation">(</span>totalAmount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> totalAmount<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在改进后的代码中，我们定义了一个折扣策略接口 <code>DiscountStrategy</code>，并创建了两个具体的折扣策略类 <code>FestivalDiscountStrategy</code> 和 <code>SeasonalDiscountStrategy</code>。订单类 <code>Order</code> 中引入了折扣策略，并使用策略模式在 <code>getDiscountedAmount</code> 方法中计算折扣金额。</p><p>通过这种方式，当需要添加新的折扣类型时，我们只需要创建一个新的实现了 <code>DiscountStrategy</code> 接口的具体折扣策略类，而不需要修改订单类的代码。我们可以通过设置不同的折扣策略来应用不同的折扣类型。</p><p>这样的设计遵循了开闭原则，使得代码更加可扩展和可维护。每个折扣类型都是独立的策略类，可以方便地扩展和修改，而不会对订单类产生影响。这提高了代码的灵活性，并符合开闭原则的设计理念。</p><h3 id="_3、总结-1" tabindex="-1"><a class="header-anchor" href="#_3、总结-1" aria-hidden="true">#</a> 3、总结</h3><p>开闭原则是面向对象设计中的重要原则之一：</p><ul><li>它要求<strong>软件实体（类、模块、函数等）应该对扩展开放，对修改关闭</strong>。</li><li>简单来说，就是在设计中要<strong>尽量避免修改已有的代码，而是通过扩展来实现新功能或适应变化的需求。</strong></li></ul><h2 id="三、里氏替换原则" tabindex="-1"><a class="header-anchor" href="#三、里氏替换原则" aria-hidden="true">#</a> 三、里氏替换原则</h2><h3 id="_1、简介-2" tabindex="-1"><a class="header-anchor" href="#_1、简介-2" aria-hidden="true">#</a> 1、简介</h3><p>里氏替换原则（Liskov Substitution Principle，简写为 LSP）：<strong>它强调子类型必须能够替换其基类型而不影响程序的正确性</strong>。</p><ul><li>说人话就是，当我们使用继承关系创建派生类（子类）时，这个派生类应该能够无缝替换其基类（父类）的实例，而程序的行为不会出现意外。</li><li>这意味着派生类在行为上应该保持与基类的一致性，并且不应该破坏基类的约定，包括输入输出的约束、异常的约束，以及前置条件和后置条件 。 <ul><li>如：尽量不要重写父类的方法。</li></ul></li></ul><h3 id="_2、例子-2" tabindex="-1"><a class="header-anchor" href="#_2、例子-2" aria-hidden="true">#</a> 2、例子</h3><blockquote><p>案例：</p></blockquote><p>好的，让我们以动物类的例子来说明里氏替换原则的好处和坏处。</p><p>假设我们有一个基类 <code>Animal</code> 表示动物，它有一个方法 <code>makeSound()</code> 用于发出声音。然后我们派生出两个子类 <code>Dog</code> 和 <code>Cat</code> 分别表示狗和猫，它们都继承自 <code>Animal</code>。</p>`,54),f=n("blockquote",null,[n("p",null,"符合里氏替换原则的例子：")],-1),A=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Animal"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"makeSound"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Animal makes a sound"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Dog"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},"Animal"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"makeSound"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Dog barks"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Cat"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},"Animal"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"makeSound"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Cat meows"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=n("blockquote",null,[n("p",null,"不符合里氏替换原则的例子：")],-1),I=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Animal"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"makeSound"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Animal makes a sound"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Dog"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},"Animal"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"makeSound"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Dog barks"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Cat"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},"Animal"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 错误：猫不应该重写 makeSound 方法"),s(`
    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"makeSound"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"throw"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"UnsupportedOperationException"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Cat cannot make sound like a dog"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token comment"},"// 猫的叫声应该在另一个方法中定义，而不是覆盖基类的方法"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"meow"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Cat meows"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),U=c(`<p>》调用方法时：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">makeAnimalSound</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        animal<span class="token punctuation">.</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Animal</span> animal1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Animal</span> animal2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">makeAnimalSound</span><span class="token punctuation">(</span>animal1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: &quot;Dog barks&quot;</span>
        <span class="token function">makeAnimalSound</span><span class="token punctuation">(</span>animal2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: &quot;Cat meows&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当调用 <code>makeAnimalSound</code> 方法时，如果遵循里氏替换原则，输出结果将符合预期，即分别输出 &quot;Dog barks&quot; 和 &quot;Cat meows&quot;。</p><details class="hint-container details"><summary>符合里氏替换原则的情况下：</summary><blockquote><p>符合里氏替换原则的情况下：</p></blockquote><p>在 <code>makeAnimalSound</code> 方法中，我们将 <code>Animal</code> 类型的参数传递进去，并调用其 <code>makeSound()</code> 方法。由于 <code>Dog</code> 和 <code>Cat</code> 类都是 <code>Animal</code> 类的子类，且它们都重写了 <code>makeSound()</code> 方法，所以在运行时，根据对象的实际类型，会调用相应子类的 <code>makeSound()</code> 方法。</p><p>这样做的好处是，我们可以使用统一的方法 <code>makeAnimalSound</code> 来处理不同类型的动物对象，而不需要针对每个具体的子类编写特定的代码。这增加了代码的灵活性和可扩展性，使得我们可以轻松地添加新的动物子类，而不需要修改现有的方法。</p></details><details class="hint-container details"><summary>不符合里氏替换原则的情况下：</summary><blockquote><p>不符合里氏替换原则的情况下：</p></blockquote><p>在不遵循里氏替换原则的情况下，当调用 <code>makeAnimalSound</code> 方法时，输出结果可能不符合预期。</p><p>在不符合里氏替换原则的示例中，<code>Cat</code> 类重写了 <code>makeSound()</code> 方法，并抛出了一个不支持的操作异常。如果我们将一个 <code>Cat</code> 对象传递给 <code>makeAnimalSound</code> 方法，它将抛出异常而不是输出 &quot;Cat meows&quot;。</p><p>这个问题的根本原因是 <code>Cat</code> 类违反了基类 <code>Animal</code> 的行为约定，即 <code>makeSound()</code> 方法应该输出相应动物的声音。这导致代码在处理 <code>Cat</code> 对象时出现了不一致和不可预测的行为。</p><p>因此，遵循里氏替换原则可以确保代码在处理父类对象时，不依赖于具体子类的实现细节，而是按照基类的行为约定进行操作。这增加了代码的可靠性、可维护性和可扩展性。相反，违反里氏替换原则可能导致代码的不稳定和不可靠，增加了代码的复杂性和维护成本。</p></details><h3 id="_3、总结-2" tabindex="-1"><a class="header-anchor" href="#_3、总结-2" aria-hidden="true">#</a> 3、总结</h3><p>当遵循里氏替换原则时，<strong>子类对象可以完全替换父类对象，并且程序的行为保持一致</strong>。这种设计方式具有以下优势：</p><ol><li><p><strong>可复用性和可扩展性</strong>：代码中的父类可以作为通用的抽象接口或基类使用，而子类可以根据需要进行扩展和定制。这样，我们可以使用基类的对象来处理一系列子类对象，而不需要对每个子类编写特定的代码，提高了代码的复用性和可扩展性。</p></li><li><p><strong>统一的行为约定</strong>：遵循里氏替换原则，子类必须遵循父类的行为约定，确保在任何使用父类对象的地方，都能正确地处理子类对象。这样可以增加代码的可靠性和稳定性，减少意外行为的发生。</p></li><li><p><strong>降低代码的耦合性</strong>：通过将代码依赖于抽象的父类而不是具体的子类，实现了代码的松耦合。这使得系统更容易理解、修改和扩展，减少了代码之间的依赖关系，提高了代码的可维护性和灵活性。</p></li><li><p><strong>符合多态性原则</strong>：里氏替换原则是多态性的基础之一。通过将子类对象视为父类对象，实现了多态的特性，可以在运行时根据对象的实际类型来调用相应的方法，增加了代码的灵活性和可扩展性。</p></li></ol><p>总之，里氏替换原则是面向对象设计中的一个重要原则，它强调<strong>子类对象必须能够替换其父类对象并且保持系统行为的一致性</strong>。遵循该原则可以提高代码的可复用性、可扩展性和可维护性，降低代码的耦合性，并保持多态性的特性。</p><h2 id="四、接口隔离原则" tabindex="-1"><a class="header-anchor" href="#四、接口隔离原则" aria-hidden="true">#</a> 四、接口隔离原则</h2><h3 id="_1、简介-3" tabindex="-1"><a class="header-anchor" href="#_1、简介-3" aria-hidden="true">#</a> 1、简介</h3><p>接口隔离原则（Interface Segregation Principle，简称ISP），<code>它强调客户端不应该强迫依赖于它们不需要的接口,其中的“客户端”，可以理解为接口的调用者或者使用者。</code></p><ul><li>说人话就是，当我们设计接口时，应该将其拆分成更小、更具体的接口，以满足客户端的实际需求，而不是设计一个庞大而臃肿的接口。</li><li>这样做的好处是，可以提高代码的内聚性，使得类或模块只需实现与其业务相关的接口，而不需要依赖于不相关的接口。同时也降低了类之间的耦合性，提高了代码的灵活性、可维护性和可测试性。</li></ul><h3 id="_2、例子-3" tabindex="-1"><a class="header-anchor" href="#_2、例子-3" aria-hidden="true">#</a> 2、例子</h3><p>假设我们正在开发一个机器人程序，机器人具有多种功能，如行走、飞行和工作。我们可以为这些功能创建一个统一的接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Robot</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，这个接口并不符合接口隔离原则，因为它将多个功能聚合在了一个接口中。</p><p>对于那些只需要实现部分功能的客户端来说，这个接口会导致不必要的依赖（如机器人分为：扫地机器人、飞行机器人等）。为了遵循接口隔离原则，我们应该将这个接口拆分成多个更小、更专注的接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Walkable</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Flyable</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Workable</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以根据需要为不同类型的机器人实现不同的接口。例如，对于一个只能行走和工作的机器人，我们只需要实现 Walkable 和 Workable 接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WalkingWorkerRobot</span> <span class="token keyword">implements</span> <span class="token class-name">Walkable</span><span class="token punctuation">,</span> <span class="token class-name">Workable</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 实现行走功能</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 实现工作功能</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过遵循接口隔离原则，我们将功能拆分成更小的接口，避免了不必要的依赖关系。现在，客户端只需要依赖于它们真正需要的接口，使得代码更加清晰、可维护和可扩展。如果我们需要新的功能，只需要针对相应的接口进行扩展即可，而不会影响其他接口的实现。这样，我们可以根据需求和场景来选择实现相应的接口，而不需要强制实现不需要的方法。</p><p>在实际项目中，应用接口隔离原则可以带来以下好处：</p><ul><li>提高代码的内聚性：每个接口只关注特定的功能，使得代码更加专注和可理解。</li><li>降低代码的耦合性：客户端只依赖于所需的接口，不受其他不相关接口的影响。</li><li>提升代码的灵活性：根据需求选择合适的接口实现，使得系统更加灵活和可扩展。</li></ul><h3 id="_3、总结-3" tabindex="-1"><a class="header-anchor" href="#_3、总结-3" aria-hidden="true">#</a> 3、总结</h3><p>接口隔离原则（Interface Segregation Principle，简写为 ISP）强调将大型、笼统的接口拆分成小而精确的接口，以符合客户端的实际需求，避免不必要的依赖和复杂性。</p><blockquote><p>以下是接口隔离原则的总结：</p></blockquote><ul><li>接口应该精确地定义只与特定功能相关的方法，而不是将所有功能都聚合在一个接口中。</li><li>将大型接口拆分成多个小接口，每个接口关注特定的功能领域。</li><li>客户端应该只依赖于它们真正需要的接口，而不是依赖于不相关的方法。</li><li>避免将不需要的方法强加给实现类，防止出现空实现或抛出不支持的操作异常。</li><li>接口隔离原则提高了代码的内聚性，使得每个接口和实现类都专注于特定的任务。</li><li>通过减少接口之间的依赖，接口隔离原则降低了代码的耦合性，提高了系统的灵活性和可维护性。</li><li>合理应用接口隔离原则可以简化系统的设计和维护工作，提升团队的开发效率和协作效果。</li></ul><p>总之，接口隔离原则通过细化接口的设计，使得代码更加模块化、可扩展和易于理解。它促进了单一职责原则的实现，提高了代码质量和可维护性。在实际项目中，我们应该根据需求和场景合理应用接口隔离原则，避免过度依赖和冗余代码，构建更灵活、可扩展的系统。</p><hr><blockquote><p>ISP 和 SRP 的区别：</p></blockquote><ul><li><p>单一职责原则（SRP）要求一个类或模块只负责一项职责或功能。它强调类的内聚性，即一个类应该只有一个引起它变化的原因。SRP的目标是将功能划分清晰，避免一个类承担过多的责任，从而提高代码的可维护性、可测试性和可理解性。</p></li><li><p>接口隔离原则（ISP）则侧重于接口的设计。它提倡将大型、笼统的接口拆分成小而精确的接口，以符合客户端的实际需求。ISP的目标是避免客户端依赖不需要的方法，减少不相关功能的耦合。通过接口的细化和分离，ISP提高了代码的内聚性，促进了代码模块化、可扩展性和可理解性。</p></li></ul><p>简而言之，**SRP关注类或模块的职责和功能的划分，强调类的单一职责。而ISP关注接口的设计，强调接口的精确性和客户端的需求。**它们共同为代码的可维护性、可测试性和可理解性提供了指导原则，但侧重点和应用场景略有不同。在实际设计中，我们可以同时考虑和应用这两个原则来构建高质量的软件系统。</p><h2 id="五、依赖倒置原则" tabindex="-1"><a class="header-anchor" href="#五、依赖倒置原则" aria-hidden="true">#</a> 五、依赖倒置原则</h2><h3 id="_1、简介-4" tabindex="-1"><a class="header-anchor" href="#_1、简介-4" aria-hidden="true">#</a> 1、简介</h3><p>依赖倒置原则（Dependency Inversion Principle，简称DIP）：<strong>它强调高层模块不应该依赖于低层模块的具体实现方式，而是应该依赖于抽象</strong>。</p><ul><li>说人话就是，当我们设计代码时，应该通过抽象来定义模块之间的关系，而不是直接依赖于具体的实现细节。</li><li>这样做的好处是，提高了代码的灵活性和可维护性。高层模块不需要知道低层模块的具体实现，只需依赖于抽象接口。这样，当低层模块的实现发生变化时，高层模块不受影响。</li><li>另外，依赖倒置原则也鼓励通过依赖注入等方式来实现模块之间的解耦，提高了代码的可测试性和可扩展性。</li></ul><h3 id="_2、例子-4" tabindex="-1"><a class="header-anchor" href="#_2、例子-4" aria-hidden="true">#</a> 2、例子</h3>`,38),x=n("blockquote",null,[n("p",null,"举例一：UserController 和 UserService / UserServiceImpl")],-1),q=n("p",null,"假设我们正在开发一个用户管理系统，其中包括用户控制器（UserController）和用户服务（UserService）以及其具体实现（UserServiceImpl）。",-1),O=n("p",null,"按照依赖倒置原则的设计，UserController 不应该直接依赖于 UserServiceImpl，而是应该依赖于抽象的 UserService 接口。",-1),D=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"interface"),s(),n("span",{class:"token class-name"},"UserService"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"addUser"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"User"),s(" user"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"deleteUser"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" userId"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token class-name"},"User"),s(),n("span",{class:"token function"},"getUser"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" userId"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"User"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"getAllUsers"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"UserServiceImpl"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"UserService"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 具体的实现代码"),s(`
    `),n("span",{class:"token comment"},"// ..."),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"UserController"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"UserService"),s(" userService"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// 通过构造函数进行依赖注入"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"UserController"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"UserService"),s(" userService"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("userService "),n("span",{class:"token operator"},"="),s(" userService"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token comment"},"// 控制器方法调用用户服务方法"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"addUser"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"User"),s(" user"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        userService`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addUser"),n("span",{class:"token punctuation"},"("),s("user"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"deleteUser"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" userId"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        userService`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"deleteUser"),n("span",{class:"token punctuation"},"("),s("userId"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"User"),s(),n("span",{class:"token function"},"getUser"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" userId"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" userService"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getUser"),n("span",{class:"token punctuation"},"("),s("userId"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"User"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"getAllUsers"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" userService"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getAllUsers"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("p",null,"通过依赖倒置原则的设计，UserController 依赖于抽象的 UserService 接口，而不是具体的 UserServiceImpl 实现类。这样做的好处是，当我们需要更换或扩展用户服务的具体实现时，只需创建新的实现类并实现 UserService 接口即可，而不需要修改 UserController 的代码。这样实现了高层模块（UserController）不依赖于低层模块（UserServiceImpl）的具体实现，提高了代码的灵活性和可维护性。",-1),C=n("p",null,null,-1),R=n("blockquote",null,[n("p",null,"Tomcat")],-1),P=n("p",null,"Tomcat 是一个常用的 Java Web 服务器，它也遵循了依赖倒置原则。Tomcat 作为高层模块，不直接依赖于具体的 Servlet 实现类，而是通过 Servlet 接口与具体的 Servlet 容器进行交互。",-1),E=n("p",null,"这样的设计允许我们在不改变 Tomcat 的代码的情况下，可以使用不同的 Servlet 容器来运行我们的 Web 应用程序。例如，我们可以在 Tomcat 上部署一个基于 Apache Tomcat 的 Web 应用，也可以在 Jetty 上部署一个基于 Eclipse Jetty 的 Web 应用，因为 Tomcat 和 Jetty 都实现了 Servlet 接口。",-1),N=n("p",null,null,-1),Q=n("blockquote",null,[n("p",null,"Spring 的 IOC 容器")],-1),M=n("p",null,"当我们使用 Spring 的 IOC 容器来实现依赖注入时，依赖倒置原则发挥了重要作用。让我们结合之前的例子来说明。",-1),T=n("p",null,[s("假设我们有一个接口 "),n("code",null,"A"),s(" 和实现类 "),n("code",null,"AImpl"),s("，我们想要将 "),n("code",null,"AImpl"),s(" 注入到容器中并使用接口 "),n("code",null,"A"),s(" 来引用它。首先，我们需要在 Spring 的配置文件中将 "),n("code",null,"AImpl"),s(" 的实例注入到容器中：")],-1),K=n("div",{class:"language-xml line-numbers-mode","data-ext":"xml"},[n("pre",{class:"language-xml"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("bean")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("a"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("com.example.AImpl"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token punctuation"},"/>")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),L=n("p",null,[s("现在，我们可以在需要使用 "),n("code",null,"A"),s(" 接口的地方通过依赖注入来引用 "),n("code",null,"AImpl"),s(" 的实例。例如，在 "),n("code",null,"MyClass"),s(" 类中添加一个依赖注入的属性 "),n("code",null,"a"),s("：")],-1),Y=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyClass"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"A"),s(" a"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"setA"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"A"),s(" a"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("a "),n("span",{class:"token operator"},"="),s(" a"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"doSomething"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        a`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"doSomething"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),W=n("p",null,[s("通过依赖注入，我们可以让 Spring 的 IOC 容器自动将 "),n("code",null,"AImpl"),s(" 的实例注入到 "),n("code",null,"MyClass"),s(" 类中。这样，我们就可以通过调用 "),n("code",null,"a.doSomething()"),s(" 来使用 "),n("code",null,"AImpl"),s(" 的功能。")],-1),F=n("p",null,[s("现在，假设我们还需要另外一个实现类来实现接口 "),n("code",null,"A"),s("。我们创建一个名为 "),n("code",null,"AnotherAImpl"),s(" 的类来实现接口 "),n("code",null,"A"),s("：")],-1),J=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"AnotherAImpl"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"A"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"doSomething"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Doing something in AnotherAImpl"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),V=n("p",null,[s("然后，我们在 Spring 的配置文件中将 "),n("code",null,"AnotherAImpl"),s(" 的实例注入到容器中：")],-1),B=n("div",{class:"language-xml line-numbers-mode","data-ext":"xml"},[n("pre",{class:"language-xml"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("bean")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("anotherA"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("com.example.AnotherAImpl"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token punctuation"},"/>")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),G=n("p",null,[s("现在，你可以在需要使用 "),n("code",null,"A"),s(" 接口的任何地方通过依赖注入来引用 "),n("code",null,"AnotherAImpl"),s(" 的实例。在 "),n("code",null,"MyClass"),s(" 类中添加一个新的依赖注入的属性 "),n("code",null,"anotherA"),s("：")],-1),H=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyClass"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"A"),s(" a"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"A"),s(" anotherA"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"setA"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"A"),s(" a"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("a "),n("span",{class:"token operator"},"="),s(" a"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"setAnotherA"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"A"),s(" anotherA"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("anotherA "),n("span",{class:"token operator"},"="),s(" anotherA"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"doSomething"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        a`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"doSomething"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        anotherA`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"doSomething"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),z=n("p",null,[s("现在，你可以同时使用 "),n("code",null,"AImpl"),s(" 和 "),n("code",null,"AnotherAImpl"),s(" 的实例来执行不同的操作。")],-1),X=n("p",null,"通过依赖倒置原则和 Spring 的 IOC 容器，你可以轻松地切换不同的实现类，只需修改配置文件即可。这种灵活性使你能够根据需求随时替换和扩展实现，而无需修改依赖它们的类的代码。",-1),Z=c(`<p>总结起来，依赖倒置原则与 Spring 的 IOC 容器相辅相成。通过将接口作为抽象的约定，将实现类的选择和创建交给容器管理，我们实现了高层模块和低</p><p>层模块之间的解耦和灵活性。无论是使用 <code>AImpl</code> 还是 <code>AnotherAImpl</code>，<code>MyClass</code> 类只需依赖于接口 <code>A</code>，从而提高了代码的可维护性和可扩展性。</p><h3 id="_3、总结-4" tabindex="-1"><a class="header-anchor" href="#_3、总结-4" aria-hidden="true">#</a> 3、总结</h3><p>依赖倒置原则（DIP）是面向对象设计中的一条重要原则。它的核心思想是<strong>高层模块不应该依赖于低层模块，而应该依赖于抽象接口或抽象类</strong>。这样可以降低模块之间的耦合性，提高代码的灵活性和可维护性。通过依赖注入等方式实现依赖倒置原则可以使代码更易于扩展和修改，同时也能提升代码的可测试性和可复用性。</p><h2 id="六、kiss原则" tabindex="-1"><a class="header-anchor" href="#六、kiss原则" aria-hidden="true">#</a> 六、KISS原则</h2><h3 id="_1、简介-5" tabindex="-1"><a class="header-anchor" href="#_1、简介-5" aria-hidden="true">#</a> 1、简介</h3><p>KISS原则（Keep It Simple, Stupid），它强调<code>保持代码简单易懂的重要性。在编写代码时，应避免过度设计和复杂化，而是以简洁的方式解决问题</code>。KISS原则鼓励我们使用简单直接的方法来实现功能，避免过多的复杂性和不必要的抽象。</p><ul><li>说人话就是，<strong>写代码的时候要保持简单，不要过度设计和增加复杂性，不要花里胡哨</strong>。要选择简洁直接的方法来解决问题，避免不必要的复杂性和抽象。这样做的好处是，代码更易于理解、调试和维护，降低出错的概率，并且提高开发效率。</li></ul><h3 id="_2、例子-5" tabindex="-1"><a class="header-anchor" href="#_2、例子-5" aria-hidden="true">#</a> 2、例子</h3><p>当我们设计一个用户管理系统时，假设有以下需求：</p><ol><li>用户可以注册账号。</li><li>用户可以登录账号。</li><li>用户可以查看自己的个人信息。</li><li>用户可以修改个人信息。</li></ol><p>以下是一个违反KISS原则的示例代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserManagementSystem</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">UserRepository</span> userRepository<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">EmailService</span> emailService<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">UserManagementSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        userRepository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        emailService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmailService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 一些注册逻辑</span>
        userRepository<span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
        emailService<span class="token punctuation">.</span><span class="token function">sendEmail</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token string">&quot;Welcome to our system!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loginUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 一些登录逻辑</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">displayUserInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 一些显示用户信息的逻辑</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUserProfile</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> newEmail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 一些更新用户信息的逻辑</span>
        userRepository<span class="token punctuation">.</span><span class="token function">updateEmail</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> newEmail<span class="token punctuation">)</span><span class="token punctuation">;</span>
        emailService<span class="token punctuation">.</span><span class="token function">sendEmail</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token string">&quot;Your profile has been updated.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，<code>UserManagementSystem</code>类承担了太多的责任，既包含了用户管理逻辑，又包含了与用户相关的邮件服务逻辑。这导致类的职责过重，代码复杂度高，并且增加了对<code>UserRepository</code>和<code>EmailService</code>的直接依赖。</p><p>下面是符合KISS原则的重构后的示例代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserManagementSystem</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">UserRepository</span> userRepository<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">EmailService</span> emailService<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">UserManagementSystem</span><span class="token punctuation">(</span><span class="token class-name">UserRepository</span> userRepository<span class="token punctuation">,</span> <span class="token class-name">EmailService</span> emailService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>userRepository <span class="token operator">=</span> userRepository<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>emailService <span class="token operator">=</span> emailService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        userRepository<span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
        emailService<span class="token punctuation">.</span><span class="token function">sendWelcomeEmail</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 其他方法的实现省略...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在重构后的代码中，我们将与用户相关的逻辑拆分成了两个独立的类：<code>UserRepository</code>负责用户数据的持久化，<code>EmailService</code>负责发送邮件。<code>UserManagementSystem</code>类只关注用户管理的核心逻辑，并通过构造函数依赖注入的方式获取<code>UserRepository</code>和<code>EmailService</code>实例。</p><p>通过拆分职责，每个类的责任更加清晰，代码也更加简洁和可维护。同时，减少了类之间的直接依赖关系，提高了代码的灵活性和可测试性。</p><h3 id="_3、总结-5" tabindex="-1"><a class="header-anchor" href="#_3、总结-5" aria-hidden="true">#</a> 3、总结</h3><p>KISS原则（Keep It Simple, Stupid）是一种设计原则，强调保持代码简单易懂的重要性。以下是对KISS原则的总结：</p><ul><li>KISS原则建议在编写代码时避免过度设计和复杂化，以简洁的方式解决问题。</li><li>简单的代码更易于理解、调试和维护，降低了引入错误和bug的风险。</li><li>通过避免不必要的复杂性，可以提高代码的可读性，使其更容易被团队成员理解和使用。</li><li>简单的代码更容易进行扩展和重构，使系统更具灵活性和可维护性。</li><li>遵循KISS原则可以减少代码的冗余和复杂度，提高开发效率，并降低项目的成本和风险。</li></ul><p>总而言之，<strong>KISS原则是一种鼓励简洁和直观代码的设计原则，它强调避免过度复杂化（代码多不是复杂），以简单的方式解决问题</strong>。通过遵循KISS原则，我们可以提高代码的可读性、可维护性和可扩展性，从而为项目的成功和可持续发展奠定坚实基础。</p><h2 id="七、dry原则" tabindex="-1"><a class="header-anchor" href="#七、dry原则" aria-hidden="true">#</a> 七、DRY原则</h2><h3 id="_1、简介-6" tabindex="-1"><a class="header-anchor" href="#_1、简介-6" aria-hidden="true">#</a> 1、简介</h3><p>DRY原则（Don&#39;t Repeat Yourself），它强调<code>避免重复代码的产生</code>。</p><h3 id="_2、例子-6" tabindex="-1"><a class="header-anchor" href="#_2、例子-6" aria-hidden="true">#</a> 2、例子</h3><p>在 Java 编程中，我们可以通过以下方法遵循 DRY 原则：</p><p><strong>（1）使用方法（functions）</strong>：当你发现自己在多处重复相同的代码时，可以将其抽取为一个方法，并在需要的地方调用该方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DryExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printHello</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printHello</span><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;你好，&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们使用 <code>printHello</code> 方法避免了重复的 <code>System.out.println</code> 语句。</p><p><strong>（2）使用继承和接口</strong>：当多个类具有相似的行为时，可以使用继承和接口来抽象共享的功能，从而减少重复代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;动物在吃东西&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;汪汪&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;喵喵&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们使用抽象类 <code>Animal</code> 和继承来避免在 <code>Dog</code> 和 <code>Cat</code> 类中重复 <code>eat</code> 方法的代码。</p><p><strong>（3）重用代码库和框架</strong>：使用成熟的代码库和框架可以避免从零开始编写一些通用功能。例如，使用 Java 标准库、Apache Commons 或 Google Guava 等库。</p><p>遵循 DRY 原则可以帮助我们编写更高质量的代码，并更容易进行维护和扩展。同时，要注意不要过度优化，以免影响代码的可读性和理解性。</p><h3 id="_3、总结-6" tabindex="-1"><a class="header-anchor" href="#_3、总结-6" aria-hidden="true">#</a> 3、总结</h3><p>DRY原则（Don&#39;t Repeat Yourself）是一种软件设计原则，强调避免重复代码的重要性。它鼓励开发人员在编写代码时避免重复的逻辑、功能或信息。</p><ul><li>首先，它提高了代码的可维护性和可读性。通过将重复的代码抽取到单独的方法、函数或模块中，我们可以避免在多个地方修改相同的代码，降低了出错的风险，并使代码更易于理解和修改。</li><li>其次，DRY原则促进了代码的重用和模块化。通过将通用的逻辑抽象为可复用的组件，我们可以在不同的地方调用它们，避免了重复编写相同的代码。这样可以减少代码量，提高开发效率，并增加系统的灵活性和可扩展性。</li><li>同时，DRY原则还有助于降低代码的耦合性。通过将重复的代码抽象为单一的实现，我们可以减少代码之间的依赖关系，使系统的各个部分更加独立和解耦。这样可以提高代码的可测试性，降低修改一个功能对其他部分造成的影响。</li><li>需要注意的是，DRY原则并不意味着完全消除重复代码。重复的代码只有在处理相同逻辑和功能时才被认为是违反DRY原则的。在评估重复代码时，我们需要考虑业务差异和上下文变化。如果代码的相似之处只是因为业务上的差异或上下文的变化，那么这种重复可能是合理的。</li></ul><h2 id="八、迪米特原则" tabindex="-1"><a class="header-anchor" href="#八、迪米特原则" aria-hidden="true">#</a> 八、迪米特原则</h2><h3 id="_1、简介-7" tabindex="-1"><a class="header-anchor" href="#_1、简介-7" aria-hidden="true">#</a> 1、简介</h3><p>迪米特原则（Law of Demeter，简称LoD），也被称为最少知识原则（Principle of Least Knowledge），<code>它强调对象之间的松耦合和信息隐藏。</code></p><ul><li>说人话就是，<mark>当我们设计软件时，对象之间的交互应该尽量简单，避免直接访问其他对象的内部细节，而是通过调用公共方法来间接进行通信</mark>。</li></ul><p>迪米特原则的核心思想是将对象设计为尽可能少地依赖其他对象，只与自己的直接朋友对象进行交互。这样做的好处是：</p><ol><li><p>减少耦合：对象之间的直接依赖越少，耦合度越低。当一个对象只与少数几个朋友对象进行交互时，修改一个对象的内部结构或实现不会对其他对象产生太大的影响。</p></li><li><p>提高灵活性：由于对象之间的关系简单明确，系统更容易进行扩展和修改。当需要修改系统时，我们只需关注与当前对象直接相关的部分，而不需要了解其他对象的内部细节。</p></li><li><p>提升可维护性：迪米特原则使得系统中的对象独立性更强，易于单独测试和调试。当一个对象的实现发生变化时，不会对其他对象产生连锁影响，减少了代码的藕合度。</p></li></ol><p>遵循迪米特原则可以帮助我们设计出更加松耦合、可维护和可扩展的软件系统。同时，要注意避免过度设计，遵循适度原则，不要违背其他设计原则或增加不必要的复杂性。</p><h3 id="_2、例子-7" tabindex="-1"><a class="header-anchor" href="#_2、例子-7" aria-hidden="true">#</a> 2、例子</h3><p><strong>假设我们有一个订单处理系统，其中包括订单(Order)、用户(User)和库存(Inventory)三个核心概念：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">User</span> user<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Inventory</span> inventory<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">,</span> <span class="token class-name">Inventory</span> inventory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>inventory <span class="token operator">=</span> inventory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> userName <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> availableQuantity <span class="token operator">=</span> inventory<span class="token punctuation">.</span><span class="token function">getAvailableQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 处理订单逻辑</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inventory</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> availableQuantity<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Inventory</span><span class="token punctuation">(</span><span class="token keyword">int</span> availableQuantity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>availableQuantity <span class="token operator">=</span> availableQuantity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAvailableQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> availableQuantity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，Order 类直接依赖于 User 和 Inventory 类，通过调用它们的方法来获取用户信息和库存信息。这种直接依赖关系导致了较高的耦合性，当 User 或 Inventory 类发生变化时，需要修改 Order 类的代码。</p><p>现在，让我们看看遵循迪米特法则的情况下的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">OrderService</span> orderService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token class-name">OrderService</span> orderService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>orderService <span class="token operator">=</span> orderService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> userName <span class="token operator">=</span> orderService<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> availableQuantity <span class="token operator">=</span> orderService<span class="token punctuation">.</span><span class="token function">getAvailableQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 处理订单逻辑</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">getAvailableQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">implements</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">User</span> user<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAvailableQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 调用库存服务获取库存信息</span>
        <span class="token comment">// ...</span>
        <span class="token keyword">return</span> availableQuantity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InventoryService</span> <span class="token keyword">implements</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Inventory</span> inventory<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">InventoryService</span><span class="token punctuation">(</span><span class="token class-name">Inventory</span> inventory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>inventory <span class="token operator">=</span> inventory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 调用用户服务获取用户信息</span>
        <span class="token comment">// ...</span>
        <span class="token keyword">return</span> userName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAvailableQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> inventory<span class="token punctuation">.</span><span class="token function">getAvailableQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inventory</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> availableQuantity<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Inventory</span><span class="token punctuation">(</span><span class="token keyword">int</span> availableQuantity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>availableQuantity <span class="token operator">=</span> availableQuantity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAvailableQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> availableQuantity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们引入了一个中间层接口 OrderService，并有两个实现类 UserService 和 InventoryService。Order 类通过依赖 OrderService 接口来获取用户信息和库存信息，而不直接依赖于具体的 User 和 Inventory 类。这种间接的依赖关系降低了耦合性，当 User 或 Inventory 类发生变化时，只需修改对应的实现类，而不需要修改 Order 类的代码。</p><p>通过遵循迪米特法则，我们实现了类之间的解耦，提高了代码的灵活性和可维护性。中间层的引入使得系统的模块职责更加清晰，提升了代码的可读性和可测试性。</p><h3 id="_3、总结-7" tabindex="-1"><a class="header-anchor" href="#_3、总结-7" aria-hidden="true">#</a> 3、总结</h3><p>迪米特法则在设计和编写代码时，强调对象之间的松耦合，通过减少对象之间的直接依赖关系来提高代码的质量。它带来的优势包括降低耦合性、提高代码的灵活性、可维护性、模块化和封装性，同时也有助于代码的可读性和可测试性：</p><ol><li><p>迪米特法则的核心思想是减少对象之间的直接依赖关系。一个对象应该尽可能少地了解其他对象的细节和内部结构。</p></li><li><p>迪米特法则鼓励使用中间层或接口来实现对象之间的通信，而不是直接依赖具体的对象。这样做可以降低耦合性，提高代码的灵活性和可维护性。</p></li><li><p>迪米特法则能够促进代码的模块化和封装性。对象只需关注与其密切相关的对象，不需要了解其他对象的具体实现细节。这样可以提高代码的可读性和可理解性。</p></li><li><p>遵循迪米特法则可以降低代码的脆弱性。当一个对象发生变化时，只有直接依赖它的对象需要进行相应的修改，而其他无关的对象不会受到影响。</p></li><li><p>迪米特法则有助于提高代码的可测试性。由于对象之间的依赖关系更加简化和清晰，测试对象的行为变得更加容易，可以更好地进行单元测试和模块测试。</p></li></ol><hr><p>GoF（Gang of Four）是指四位著名的计算机科学家：Erich Gamma、Richard Helm、Ralph Johnson和John Vlissides。他们合作编写了一本具有里程碑意义的著作《Design Patterns: Elements of Reusable Object-Oriented Software》（设计模式：可复用的面向对象软件元素）。这本书对软件开发领域产生了深远影响。</p><p>GoF提出了23种设计模式，分为三大类：</p><ol><li><p>创建型模式（Creational Patterns）关注对象的创建过程，包括：</p><ul><li><strong>单例模式（Singleton）</strong></li><li><strong>工厂方法模式（Factory Method）</strong></li><li>抽象工厂模式（Abstract Factory）</li><li><strong>建造者模式（Builder）</strong></li><li>原型模式（Prototype）</li></ul></li><li><p>结构型模式（Structural Patterns）关注类和对象之间的组合，包括：</p><ul><li><strong>适配器模式（Adapter）</strong></li><li>桥接模式（Bridge）</li><li>组合模式（Composite）</li><li><strong>装饰模式（Decorator）</strong></li><li>外观模式（Facade）</li><li>享元模式（Flyweight）</li><li><strong>代理模式（Proxy）</strong></li></ul></li><li><p>行为型模式（Behavioral Patterns）关注对象之间的通信，包括：</p><ul><li><strong>职责链模式（Chain of Responsibility）</strong></li><li>命令模式（Command）</li><li>解释器模式（Interpreter）</li><li>迭代器模式（Iterator）</li><li>中介者模式（Mediator）</li><li>备忘录模式（Memento）</li><li><strong>观察者模式（Observer）</strong></li><li><strong>状态模式（State）</strong></li><li><strong>策略模式（Strategy）</strong></li><li><strong>模板方法模式（Template Method）</strong></li><li>访问者模式（Visitor）</li></ul></li></ol><p>这些设计模式提供了在软件开发中常见问题的解决方案，并促进了可</p>`,61);function $(nn,sn){const p=i("Tabs");return u(),r("div",null,[v,d(" more "),m,b,o(p,{id:"10",data:[{id:"SOLID原则"},{id:"KISS原则"},{id:"DRY原则"},{id:"迪米特法则"}]},{title0:a(({value:e,isActive:t})=>[s("SOLID原则")]),title1:a(({value:e,isActive:t})=>[s("KISS原则")]),title2:a(({value:e,isActive:t})=>[s("DRY原则")]),title3:a(({value:e,isActive:t})=>[s("迪米特法则")]),tab0:a(({value:e,isActive:t})=>[y]),tab1:a(({value:e,isActive:t})=>[w]),tab2:a(({value:e,isActive:t})=>[g]),tab3:a(({value:e,isActive:t})=>[h]),_:1}),S,o(p,{id:"305",data:[{id:"符合里氏替换原则的例子"},{id:"不符合里氏替换原则的例子"}]},{title0:a(({value:e,isActive:t})=>[s("符合里氏替换原则的例子")]),title1:a(({value:e,isActive:t})=>[s("不符合里氏替换原则的例子")]),tab0:a(({value:e,isActive:t})=>[f,A]),tab1:a(({value:e,isActive:t})=>[_,I]),_:1}),U,o(p,{id:"556",data:[{id:"UserController 和 UserService / UserServiceImpl"},{id:"Tomcat"},{id:"IOC"}]},{title0:a(({value:e,isActive:t})=>[s("UserController 和 UserService / UserServiceImpl")]),title1:a(({value:e,isActive:t})=>[s("Tomcat")]),title2:a(({value:e,isActive:t})=>[s("IOC")]),tab0:a(({value:e,isActive:t})=>[x,q,O,D,j,C]),tab1:a(({value:e,isActive:t})=>[R,P,E,N]),tab2:a(({value:e,isActive:t})=>[Q,M,T,K,L,Y,W,F,J,V,B,G,H,z,X]),_:1}),Z])}const tn=l(k,[["render",$],["__file","simple.html.vue"]]);export{tn as default};
