import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,a as t}from"./app-qOaOTfkM.js";const e={},p=t(`<h1 id="fastjson、jackson使用aop切面进行日志打印异常" tabindex="-1"><a class="header-anchor" href="#fastjson、jackson使用aop切面进行日志打印异常" aria-hidden="true">#</a> FastJson、Jackson使用AOP切面进行日志打印异常</h1><h2 id="一、概述" tabindex="-1"><a class="header-anchor" href="#一、概述" aria-hidden="true">#</a> 一、概述</h2><h3 id="_1、问题详情" tabindex="-1"><a class="header-anchor" href="#_1、问题详情" aria-hidden="true">#</a> 1、问题详情</h3><blockquote><p>使用FastJson、Jackson进行日志打印时分别包如下错误：</p></blockquote><p><strong>源码</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//fastjon</span>
log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;\\nRequest Info :{} \\n&quot;</span>， <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>requestInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//jackson</span>
log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;\\nRequest Info :{} \\n&quot;</span>， <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>requestInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>Fastjson错误信息</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>java.lang.IllegalStateException: It is illegal to call this method <span class="token keyword">if</span> the current request is not <span class="token keyword">in</span> asynchronous mode <span class="token punctuation">(</span>i.e. isAsyncStarted<span class="token punctuation">(</span><span class="token punctuation">)</span> returns <span class="token boolean">false</span><span class="token punctuation">)</span>
	at org.apache.catalina.connector.Request.getAsyncContext<span class="token punctuation">(</span>Request.java:1812<span class="token punctuation">)</span>
	at org.apache.catalina.connector.RequestFacade.getAsyncContext<span class="token punctuation">(</span>RequestFacade.java:1068<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Jackson错误信息：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found <span class="token keyword">for</span> class java.util.Collections<span class="token variable">$3</span> and no properties discovered to create BeanSerializer <span class="token punctuation">(</span>to avoid exception， disable SerializationFeature.FAIL_ON_EMPTY_BEANS<span class="token punctuation">)</span> <span class="token punctuation">(</span>through reference chain: icu.chiou.qvideo.aop.AccessLogAspect<span class="token variable">$RequestInfo</span><span class="token punctuation">[</span><span class="token string">&quot;requestParams&quot;</span><span class="token punctuation">]</span>-<span class="token operator">&gt;</span>java.util.HashMap<span class="token punctuation">[</span><span class="token string">&quot;request&quot;</span><span class="token punctuation">]</span>-<span class="token operator">&gt;</span>org.apache.catalina.connector.RequestFacade<span class="token punctuation">[</span><span class="token string">&quot;parameterNames&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="_2、问题原因" tabindex="-1"><a class="header-anchor" href="#_2、问题原因" aria-hidden="true">#</a> 2、问题原因</h3><blockquote><p>猜测：</p></blockquote><p>这些错误的原因可能是由于在日志打印过程中，引入了 Web 请求的相关对象，而这些对象无法直接被序列化为 JSON。</p><blockquote><p>查找：</p></blockquote><ul><li>调用getAsyncContext方法出现了问题，表示当前这个request对象不是异步模式的，所以不能调用<code>getAsyncContext</code>这个方法，这个request的异步模式这是servlet3中的一个新特性，可以使用注解或者配置xml的方式进行开启，一般用于异步请求，这个request的异步模式的使用场景，fastjson序列化出错，出错的原因是fastjson调用了<code>getAsyncContext</code>方法，由于request不是异步模式，所以报错了，那么结果就是fastjson序列化出错了。</li><li>jackson异常信息表明 jackson 无法找到适合序列化 <code>java.util.Collections$3</code> 这个类的方法。这种异常通常出现在对象中包含了无法序列化的属性或者属性类型，导致 Jackson 无法将整个对象序列化为 JSON 字符串。在你的异常信息中，可以看到异常发生在 <code>AccessLogAspect</code> 的 <code>RequestInfo</code> 对象的 <code>requestParams</code> 属性中，其中包含了一个 <code>java.util.HashMap</code> 对象，该对象中的属性为 <code>request</code>，类型为 <code>org.apache.catalina.connector.RequestFacade</code>，进而包含了 <code>parameterNames</code> 属性，类型为 <code>java.util.Collections$3</code>，而 Jackson 无法对这个属性进行序列化。</li></ul><h2 id="二、解决" tabindex="-1"><a class="header-anchor" href="#二、解决" aria-hidden="true">#</a> 二、解决</h2><h3 id="_1、问题定位" tabindex="-1"><a class="header-anchor" href="#_1、问题定位" aria-hidden="true">#</a> 1、问题定位</h3><p>看一下异常信息，按照打印的栈信息来看：</p><ul><li>是<code>RequestFacade</code>对象中的<code>getAsyncContext</code>方法被调用了，但是工程里面并没用用到<code>RequestFacade</code>对象，且其没有重载方法</li><li>查看<code>RequestFacade</code>类的源码过后发现<code>RequestFacade</code>其实是<code>HttpServletRequest</code>的一个具体实现</li><li>那么问题就定位到了，fastjson把<code>HttpServletRequest</code>序列化了，只要把方法上的<code>HttpServletRequest</code> 参数去掉就可以了.</li></ul><figure><img src="https://cloud.greennut.icu/blog/bug/image-20240209170636871.png" alt="问题定位" tabindex="0" loading="lazy"><figcaption>问题定位</figcaption></figure><h3 id="_2、解决办法" tabindex="-1"><a class="header-anchor" href="#_2、解决办法" aria-hidden="true">#</a> 2、解决办法</h3><p>把进行JSON转字符串序列化对象内的request过滤即可：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getRequestParamsByJoinPoint</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//参数名</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramNames <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MethodSignature</span><span class="token punctuation">)</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//参数值</span>
    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramValues <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">buildRequestParam</span><span class="token punctuation">(</span>paramNames<span class="token punctuation">,</span> paramValues<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">buildRequestParam</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramNames<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramValues<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> requestParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> paramNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> value <span class="token operator">=</span> paramValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		
        <span class="token comment">//添加这个</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">ServletRequest</span> <span class="token operator">||</span> value <span class="token keyword">instanceof</span> <span class="token class-name">ServletResponse</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//如果是文件对象</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">MultipartFile</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">MultipartFile</span> file <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MultipartFile</span><span class="token punctuation">)</span> value<span class="token punctuation">;</span>
            value <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取文件名</span>
        <span class="token punctuation">}</span>

        requestParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>paramNames<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> requestParams<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、效果实现" tabindex="-1"><a class="header-anchor" href="#_3、效果实现" aria-hidden="true">#</a> 3、效果实现</h2><blockquote><p>源代码和拓展：</p></blockquote><p>需要控制台格式化的输出JSON只需要调用：<code>writerWithDefaultPrettyPrinter()</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;\\nRequest Info :{} \\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writerWithDefaultPrettyPrinter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>requestInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;\\nRequest Info :{} \\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>requestInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cloud.greennut.icu/blog/bug/image-20240209171302615.png" alt="效果实现-日志记录" tabindex="0" loading="lazy"><figcaption>效果实现-日志记录</figcaption></figure>`,25),o=[p];function c(i,l){return a(),s("div",null,o)}const k=n(e,[["render",c],["__file","1.html.vue"]]);export{k as default};
