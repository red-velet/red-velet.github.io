const l=JSON.parse('{"key":"v-117357d3","path":"/docs/learning-road/408/operate-system/process.html","title":"进程管理","lang":"zh-CN","frontmatter":{"title":"进程管理","isOriginal":true,"shortTitle":"2、进程管理"},"headers":[{"level":2,"title":"一、进程和线程","slug":"一、进程和线程","link":"#一、进程和线程","children":[{"level":3,"title":"1、进程","slug":"_1、进程","link":"#_1、进程","children":[]},{"level":3,"title":"2、线程","slug":"_2、线程","link":"#_2、线程","children":[]}]},{"level":2,"title":"二、处理机调度","slug":"二、处理机调度","link":"#二、处理机调度","children":[{"level":3,"title":"1、概述","slug":"_1、概述","link":"#_1、概述","children":[]},{"level":3,"title":"2、调度算法","slug":"_2、调度算法","link":"#_2、调度算法","children":[]},{"level":3,"title":"3、拓展","slug":"_3、拓展","link":"#_3、拓展","children":[]}]},{"level":2,"title":"三、进程同步和互斥","slug":"三、进程同步和互斥","link":"#三、进程同步和互斥","children":[{"level":3,"title":"1、进程同步","slug":"_1、进程同步","link":"#_1、进程同步","children":[]},{"level":3,"title":"2、进程互斥","slug":"_2、进程互斥","link":"#_2、进程互斥","children":[]}]}],"git":{},"readingTime":{"minutes":37,"words":11099},"filePathRelative":"docs/learning-road/408/operate-system/process.md","excerpt":"<h2> 一、进程和线程</h2>\\n<blockquote>\\n<p><strong>什么是程序、进程、线程，谈谈你的理解？</strong></p>\\n</blockquote>\\n<ul>\\n<li><strong>程序</strong>：\\n<ol>\\n<li>程序是一组指令集合，用来指示计算机执行特定任务的。它们以某种特定的编程语言编写，可以是像Python、Java、C++等高级语言，也可以是机器语言（二进制代码）。</li>\\n<li>程序是静态的，它们只是存在于磁盘或内存中，直到被执行。</li>\\n</ol>\\n</li>\\n<li><strong>进程</strong>：\\n<ol>\\n<li>进程是程序的动态存在的状态，是在计算机中执行时的实例。而且一个程序同时启动多个，也就是可以同时运行多个进程，每个进程都有自己的内存空间、资源（如CPU时间、文件句柄等）和状态，就和我们的Java中类与对象实例的关系，每个进程都被独立地管理，彼此之间不会干扰。</li>\\n<li>进程通常有两个任务：资源的分配和调度执行任务</li>\\n</ol>\\n</li>\\n<li><strong>线程</strong>：\\n<ol>\\n<li>线程和进程是紧密相关的，线程是进程的一部分，是进程内的一个独立执行单元，线程之间共享进程的内存资源，且承担调度执行的任务。而引入线程主要就是用于执行调度任务的，用来提高并发度（上下文切换开销少-地址、资源、内核的切换）。</li>\\n<li>因为线程共享进程的资源，共享相同的地址空间。这种共享使得线程之间的通信更加直接和高效，可以通过共享内存等方式进行数据传递，而无需复杂的进程间通信机制。</li>\\n</ol>\\n</li>\\n</ul>","copyright":{"author":"red-velet"}}');export{l as data};
