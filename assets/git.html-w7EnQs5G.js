import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o,c as d,d as a,e,f as i,a as n}from"./app-KXX3jVXZ.js";const c={},r=n(`<h1 id="一台电脑git配置多个github账号" tabindex="-1"><a class="header-anchor" href="#一台电脑git配置多个github账号" aria-hidden="true">#</a> 一台电脑Git配置多个Github账号</h1><div class="hint-container tip"><p class="hint-container-title">本文转载</p></div><p>每个程序员都可能有多个GitHub账号，今天就和大家聊一下如何在一台电脑上同时使用多个 GitHub 账号，通过以下四个步骤就可以实现。</p><h2 id="_1、取消全局配置" tabindex="-1"><a class="header-anchor" href="#_1、取消全局配置" aria-hidden="true">#</a> 1、取消全局配置</h2><blockquote><p>如果想在一台电脑上使用多个 GitHub 账号，使用全局配置是不行的。如果使用全局配置的话，那么每次使用 git 命令时都会使用这个全局的用户名和邮箱，就没有办法区分不同的 GitHub 账号了。</p></blockquote><p>在最开始使用GitHub配置ssh时，大部分人都使用过下面这两条语句：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;你的用户名&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;你的邮箱&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这两条命令是在进行全局配置，对于想要在一台电脑上使用多个GitHub账号是不行的，需要利用下面的两条语句来取消全局配置。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> user.name
<span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> user.email
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,9),u={href:"http://user.name",target:"_blank",rel:"noopener noreferrer"},p=n(`<h2 id="_2、ssh" tabindex="-1"><a class="header-anchor" href="#_2、ssh" aria-hidden="true">#</a> 2、SSH</h2><h3 id="_2-1-生成ssh" tabindex="-1"><a class="header-anchor" href="#_2-1-生成ssh" aria-hidden="true">#</a> 2.1 生成ssh</h3><blockquote><p>本地仓库是通过 ssh 的方式和远程 GitHub 仓库建立连接的，所以我们要生成 ssh 私钥和公钥。私钥放在本地，公钥复制粘贴到 GitHub 的 SSH 设置中。这样当公钥和私钥配对时，连接就建立了。</p><p>由于我们想使用多个 GitHub 账号，所以我们就需要建立多个公钥和私钥。</p></blockquote><p>在这里假设我们有三个 GitHub 账号想在一台电脑上同时使用：</p><ul><li>三个账号分别为：ID1，ID2，ID3（ID1,ID2,ID3）即为下图中的名字，比如我的 ID1 就是 happyCoding1024) <ul><li>ID1，ID2，ID3 是Github的用户名</li></ul></li><li>对应的邮箱分别为：E1，E2，E3，现在需要生成三个ssh。 <ul><li>E1，E2，E3是Github的绑定的邮件</li></ul></li></ul><figure><img src="https://cloud.greennut.icu/blog/tool/image-20240327171744519.png" alt="用户信息" tabindex="0" loading="lazy"><figcaption>用户信息</figcaption></figure><blockquote><p>生成第一个ssh：</p></blockquote><p>在桌面打开GitBash或者cmd(在桌面按住shift键再按右键或弹出在此处打开命令窗口)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">&quot;E1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行到这一步时输入红色方框中的内容 <code>id_rsa_one</code> ，表示第一个私钥。</p><figure><img src="https://cloud.greennut.icu/blog/tool/image-20240327171814882.png" alt="命令" tabindex="0" loading="lazy"><figcaption>命令</figcaption></figure><p><mark>红色方框中的内容需要自己输入，表示的是第一个私钥的名称。紧接着会让你输入私码(密码)，直接回车即可</mark></p><blockquote><p>生成第二个ssh：</p></blockquote><p>紧接着运行下面这条语句：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">&quot;E2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在红色方框中输入 id_rsa_two</p><figure><img src="https://cloud.greennut.icu/blog/tool/image-20240327171850580.png" alt="命令" tabindex="0" loading="lazy"><figcaption>命令</figcaption></figure><blockquote><p>生成第三个ssh：</p></blockquote><p>再运行下面这条语句：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">&quot;E3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在红色框中输入id_rsa_three</p><figure><img src="https://cloud.greennut.icu/blog/tool/20191210100905948.png" alt="命令" tabindex="0" loading="lazy"><figcaption>命令</figcaption></figure><p>至此三个ssh生成完毕。</p><blockquote><p>将生成的三个公钥文件：</p></blockquote><ul><li><code>id_rsa_one.pub</code>、<code>id_rsa_two.pub</code>、<code>id_rsa_three.pub</code><ul><li>文件默认路径：<code>C:\\Users\\你的用户名\\.ssh</code></li><li>分别复制粘贴到三个GitHub账号的ssh key中。</li><li>这一步很简单打开 GitHub 中的设置选择 SSH key ，点击添加即可，这一步也可以自行百度，只需点几下鼠标就可以了。</li></ul></li></ul><h3 id="_2-2-添加私钥" tabindex="-1"><a class="header-anchor" href="#_2-2-添加私钥" aria-hidden="true">#</a> 2.2 添加私钥</h3><blockquote><p>由于现在取消了全局配置，所以需要将私钥加到 ssh 中，这样当用到的时候 ssh 才能够识别出来。</p></blockquote><h4 id="_1-打开ssh-agent" tabindex="-1"><a class="header-anchor" href="#_1-打开ssh-agent" aria-hidden="true">#</a> （1）打开ssh-agent</h4><p>（1）如果你是github官方的bash：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-agent <span class="token parameter variable">-s</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（2）如果你是其它，比如msysgit：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">$(</span>ssh-agent <span class="token parameter variable">-s</span><span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>一般情况下第二种是好用的。</p></blockquote><p>第一种如果不行就尝试第二种，成功的截图如下图所示：</p><figure><img src="https://cloud.greennut.icu/blog/tool/20191210100946585.png" alt="命令" tabindex="0" loading="lazy"><figcaption>命令</figcaption></figure><h4 id="_2-添加私钥" tabindex="-1"><a class="header-anchor" href="#_2-添加私钥" aria-hidden="true">#</a> （2）添加私钥</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-add ~/.ssh/id_rsa_one

ssh-add ~/.ssh/id_rsa_two

ssh-add ~/.ssh/id_rsa_three
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果生成ssh 密钥就按照本文的命名方式那么将上面的代码复制粘贴回车就好，否则需要将名称改成你自己设置的私钥名称。</p></blockquote><h3 id="_2-3-修改config文件-核心" tabindex="-1"><a class="header-anchor" href="#_2-3-修改config文件-核心" aria-hidden="true">#</a> 2.3 修改config文件（核心）</h3><blockquote><p>由于在最开始的时候取消了全局配置，所以在这个要配置一下 ssh 的 config 文件，目的就是告诉 ssh 访问某个 GitHub 账号需要使用哪一个私钥。</p></blockquote><p>在 .ssh 文件夹下运行GitBash，生成 config 文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">touch</span> config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打开 config 文件，将以下内容复制到 config 文件中，删除其中注释。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 第一个
Host one.github.com
HostName github.com
User ID1 # Github用户名1
IdentityFile ~/.ssh/id_rsa_one

# 第二个
Host two.github.com  #前缀名可以任意设置
HostName github.com
User ID2 # Github用户名2
IdentityFile ~/.ssh/id_rsa_two

# 第三个
Host three.github.com  #前缀名可以任意设置
HostName github.com
User ID3 # Github用户名3
IdentityFile ~/.ssh/id_rsa_three
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 <code>Host</code> 始终为 <code>github.com</code> ，那么就只能使用一个私钥。</p>`,45),h={href:"http://github.com",target:"_blank",rel:"noopener noreferrer"},g=a("li",null,"这样 SSH 就可以通过不同的 Host 区分出不同的 GitHub 账号，然后使用 Host 对应的私钥和远程的 GitHub 仓库进行连接。",-1),b=n(`<blockquote><p><code>Host one.github.com</code> 前缀名 one 可以随意设置<br><code>HostName github.com</code> 如果要连接的远程仓库是 GitHub 保持不变，如果是其它的远程仓库就改成相应的域名<br><code>User ID1</code> ID1 表示用户名，可以就写 GitHub 的用户名<br><code>IdentityFile ~/.ssh/id_rsa_one</code> 最后的 id_rsa_one 表示的是私钥名称。</p></blockquote><h3 id="_2-4-测试" tabindex="-1"><a class="header-anchor" href="#_2-4-测试" aria-hidden="true">#</a> 2.4 测试</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ssh</span> –T git@one.github.com

<span class="token function">ssh</span> –T git@two.github.com

<span class="token function">ssh</span> –T git@three.github.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果出现下图，则说明成功：</p><figure><img src="https://cloud.greennut.icu/blog/tool/2019121010100666.png" alt="命令" tabindex="0" loading="lazy"><figcaption>命令</figcaption></figure><p>做到这一步 ssh 的部分就差不多完成了，下面是和 GitHub 有关的部分，胜利就在眼前。</p><h2 id="_3、配置本地项目" tabindex="-1"><a class="header-anchor" href="#_3、配置本地项目" aria-hidden="true">#</a> 3、配置本地项目</h2><h3 id="_3-1-从远程仓库-clone-仓库" tabindex="-1"><a class="header-anchor" href="#_3-1-从远程仓库-clone-仓库" aria-hidden="true">#</a> 3.1 从远程仓库 clone 仓库</h3><p>如果 clone 一次不成功就多试几次，有时候会出现 time out 的提示。</p><p>注意与之前的操作有所变化：</p><p>例如我要克隆的远程仓库的 ssh 地址是：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone git@github.com:happyCoding1024/FrontendLearningTool.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>假设这个远程仓库是在 GitHub 账号为 <code>ID1</code> 的仓库中，那么克隆时需要改成下面的形式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone git@one.github.com:happyCoding1024/FrontendLearningTool.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>关于为什么是这样我的理解是这样的：</p><blockquote><p>通过之前 2.3 节配置好的config 文件可知， 当访问 <a href="mailto:git@one.github.com">git@one.github.com</a> 时本地进行域名解析时解析成 <a href="mailto:git@github.com">git@github.com</a> 经过这样的解析之后就和远程仓库的 ssh 地址对应上了因此可以访问到远程仓库，而且当进行这一步时通过 config 配置文件可知这也告诉了要使用的是哪一个 私钥。</p><p>这样一来 ssh 地址是对的，私钥也能和对应的 GItHub 账号中的 SSH 公钥配对，那么就可以正常地从远程仓库克隆了。</p></blockquote><p>当克隆成功后这个时候，在控制台中运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你会发现输出下面的内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>origin  git@one.github.com:happyCoding1024/FrontendLearningTool.git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>
origin  git@one.github.com:happyCoding1024/FrontendLearningTool.git <span class="token punctuation">(</span>push<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果输出内容不是上面这样，那么你需要修改远程仓库的 origin （只要是clone成功了一般不会下面的情况）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">rm</span> origin <span class="token comment"># 先删掉远程仓库原来的origin</span>
<span class="token function">git</span> remote <span class="token function">add</span> origin git@one.github.com:happyCoding1024/FrontendLearningTool.git <span class="token comment"># 重新将远程仓库命名为origin</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之前使用全局设置的时候运行 git remote -v 输出内容应该是下面这样：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>origin  git@github.com:happyCoding1024/FrontendLearningTool.git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>
origin  git@github.com:happyCoding1024/FrontendLearningTool.git <span class="token punctuation">(</span>push<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样以后在本地这个仓库下使用 git 等命令时提交到远程仓库时实际上是提交到 <code>git@one.github.com:happyCoding1024/FrontendLearningTool.git</code> 。</p>`,25),m={href:"http://one.github.com",target:"_blank",rel:"noopener noreferrer"},v=a("code",null,"git@github.com:happyCoding1024/FrontendLearningTool.git",-1),k=n(`<h3 id="_3-2-修改本地仓库的用户名和邮箱" tabindex="-1"><a class="header-anchor" href="#_3-2-修改本地仓库的用户名和邮箱" aria-hidden="true">#</a> 3.2 修改本地仓库的用户名和邮箱</h3><blockquote><p>由于现在不是全局配置了，所以每个仓库都需要配置各自的用户名和邮箱来确定这个仓库是和哪个 GitHub 账号连接的。</p></blockquote><p>在项目文件夹中右键打开 GitBash，然后执行下面 的语句，设置账号和相应的项目关联：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config user.name  ID1
<span class="token function">git</span> config user.email  E1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ID1: 指的是 GitHub 用户名</li><li>E1: 指的是和这个 GitHub 账号关联的邮箱</li></ul><h3 id="_4、提交" tabindex="-1"><a class="header-anchor" href="#_4、提交" aria-hidden="true">#</a> 4、提交</h3><p>恭喜，到达这步之后，就已经和远程仓库建立好连接了， 这个时候随便新建一个文件进行一下 push 操作尝试一下吧。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 新建一个 test.txt 文件</span>
<span class="token function">touch</span> test.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>将这个文件提交到远程仓库：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> test.txt
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;commit test.txt&quot;</span>
<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建议使用 git push 的时候尽量写完整，也不会很费事，不要直接写成 git push，因为以后默认只能推送到master分支，以后有可能还要推送到其它分支。</p><p>-u 参数可以在推送的同时，将 origin 仓库的 master 分支设置为本地仓库当前分支的 upstream， 添加了这个参数之后，将来运行 git pull 命令从远程仓库获取内容时，本地仓库的这个分支就可以直接从 origin 的 master 分支获取内容，省去了另外添加参数的麻烦。</p>`,12);function f(_,x){const s=l("ExternalLinkIcon");return o(),d("div",null,[r,a("p",null,[e("上面的命令直接赋值粘贴输入就好了，不需要将 "),a("a",u,[e("user.name"),i(s)]),e(" 修改成你的用户名。")]),p,a("ul",null,[a("li",null,[e("通过上面的设置，每个 GitHub 账号都有一个自己的 HOST(这样就区分出了不同的 GItHub 账号)，但是每个 Host 的域名(HostName)做 CNAME 解析又都解析到 "),a("a",h,[e("github.com"),i(s)]),e("(这样可以保证访问的是 GitHub，如果你想访问码云，那么就改成码云的域名即可)。")]),g]),b,a("blockquote",null,[a("p",null,[e("本地 SSH 根据 config 文件的配置通过 "),a("a",m,[e("one.github.com"),i(s)]),e(" 可以确定使用哪一个私钥和远程仓库的公钥进行配对，经过域名解析后又可以连接到远程真正的仓库地址 "),v,e("。")])]),k])}const G=t(c,[["render",f],["__file","git.html.vue"]]);export{G as default};
