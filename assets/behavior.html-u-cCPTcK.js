import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as t,b as e,d as n,a as p}from"./app-qOaOTfkM.js";const c={},o=n("p",null,[n("strong",null,"行为型设计模式关注对象之间行为（通信和协作方式），以实现不同对象之间的交互和任务分配。这些模式涉及到对象之间的算法、责任分配和消息传递等行为。行为型设计模式的核心目的是提供一种灵活、可扩展和可维护的方式来管理对象之间的交互和行为。")],-1),l=p(`<h1 id="一、行为型设计模式" tabindex="-1"><a class="header-anchor" href="#一、行为型设计模式" aria-hidden="true">#</a> 一、行为型设计模式</h1><p><mark>行为型设计模式关注对象之间行为（通信和协作方式），以实现不同对象之间的交互和任务分配。这些模式涉及到对象之间的算法、责任分配和消息传递等行为。行为型设计模式的核心目的是提供一种灵活、可扩展和可维护的方式来管理对象之间的交互和行为。</mark></p><p><mark>总结：复用和拓展</mark></p><h2 id="一、观察者设计模式" tabindex="-1"><a class="header-anchor" href="#一、观察者设计模式" aria-hidden="true">#</a> 一、观察者设计模式</h2><h3 id="_1、介绍" tabindex="-1"><a class="header-anchor" href="#_1、介绍" aria-hidden="true">#</a> 1、介绍</h3><p>观察者设计模式（Observer Pattern）是一种行为型设计模式，<strong>它建立了对象之间的一对多依赖关系，使得当一个对象的状态发生变化时，其相关依赖对象都能得到通知并自动更新</strong>。这种模式被广泛应用于事件驱动系统和发布-订阅系统中。</p><h3 id="_2、核心思想" tabindex="-1"><a class="header-anchor" href="#_2、核心思想" aria-hidden="true">#</a> 2、核心思想</h3><p>观察者设计模式的核心思想：</p><ul><li>将对象之间的依赖关系解耦，使得主题（被观察者）和观察者之间可以独立变化。</li><li>主题维护一份观察者列表，并在状态变化时通知观察者，观察者接收到通知后进行相应的处理。</li></ul><h3 id="_3、组成和基本流程" tabindex="-1"><a class="header-anchor" href="#_3、组成和基本流程" aria-hidden="true">#</a> 3、组成和基本流程</h3><blockquote><p>观察者设计模式由以下几个关键组件组成：</p></blockquote><ul><li><strong>Subject（主题）</strong>：也称为被观察者或发布者，维护一份观察者列表，并提供方法用于添加(注册)、删除和通知观察者。</li><li><strong>Observer（观察者）</strong>：也称为订阅者，定义了接收和处理主题通知的方法。</li><li><strong>ConcreteSubject（具体主题）</strong>：具体主题是主题的具体实现类，负责维护具体的状态并在状态变化时通知观察者。</li><li><strong>ConcreteObserver（具体观察者）</strong>：具体观察者是观察者的具体实现类，实现了接收和处理主题通知的方法。</li></ul><blockquote><p>观察者设计模式的使用基本流程：</p></blockquote><ol><li>观察者通过将自身注册到主题中，成为主题的观察者。</li><li>当主题的状态发生变化时，它会遍历观察者列表，并调用每个观察者的通知方法。</li><li>每个观察者接收到通知后，执行相应的更新操作。</li></ol><h3 id="_4、使用场景和具体案例" tabindex="-1"><a class="header-anchor" href="#_4、使用场景和具体案例" aria-hidden="true">#</a> 4、使用场景和具体案例</h3><blockquote><p>观察者设计模式适用于以下场景：</p></blockquote><ul><li>当一个对象的变化需要影响其他对象，但你又不希望这些对象紧密耦合在一起时。</li><li>当一个对象的状态变化会导致其他对象的行为变化，而且你希望能够动态地将对象加入或移除。</li></ul><blockquote><p>具体案例：</p></blockquote><p>一个常见的业务场景是网络聊天的群聊功能。假设我们有一个网络聊天室应用程序，用户可以加入聊天群，并与其他用户进行实时聊天。</p><p>以下是一个简化的示例代码，展示了如何使用观察者设计模式实现网络聊天室：</p><p>在下列示例中：</p><ul><li>我们创建了一个名为<code>ChatGroup</code>的主题接口，其中定义了加入聊天群、退出聊天群和通知所有用户的方法。</li><li>具体主题类<code>QQGroup</code>实现了该接口，并维护了一个用户列表。</li><li>观察者接口<code>ChatUser</code>定义了接收消息和发送消息的方法。</li><li>具体观察者类<code>QQUser</code>实现了该接口，每个用户都可以接收消息并发送消息给聊天室中的其他用户。</li><li>在主类中，我们创建了一个<code>QQGroup</code>实例作为聊天室。然后，创建了几个<code>QQUser</code>实例，代表聊天室中的用户。接着，将这些用户加入聊天室，并执行了一次消息发送操作。 <ul><li>当<code>jack</code>发送消息时，聊天室会调用<code>notifyAllUser</code>方法通知其他用户接收消息。每个用户收到消息后，会打印出相应的消息内容。</li></ul></li></ul><p>这个例子演示了观察者设计模式在网络聊天室中的应用。通过使用观察者模式，网络聊天室实现了用户之间的解耦，聊天室中的用户可以实时接收和发送消息，实现了群聊的功能。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 主题接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ChatGroup</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">joinChatGroup</span><span class="token punctuation">(</span><span class="token class-name">ChatUser</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">exitChatGroup</span><span class="token punctuation">(</span><span class="token class-name">ChatUser</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">notifyAllUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体主题类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QQGroup</span> <span class="token keyword">implements</span> <span class="token class-name">ChatGroup</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ChatUser</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">joinChatGroup</span><span class="token punctuation">(</span><span class="token class-name">ChatUser</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exitChatGroup</span><span class="token punctuation">(</span><span class="token class-name">ChatUser</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        users<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyAllUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ChatUser</span> user <span class="token operator">:</span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            user<span class="token punctuation">.</span><span class="token function">receiverMsg</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 观察者接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ChatUser</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">receiverMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体观察者类</span>
<span class="token keyword">class</span> <span class="token class-name">QQUser</span> <span class="token keyword">implements</span> <span class="token class-name">ChatUser</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">ChatGroup</span> chatRoom<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">QQUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">ChatGroup</span> chatRoom<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>chatRoom <span class="token operator">=</span> chatRoom<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiverMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; 收到消息：&quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; 发送消息：&quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//通知其他人</span>
        chatRoom<span class="token punctuation">.</span><span class="token function">notifyAllUser</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 示例代码的主类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//创建QQ群</span>
        <span class="token class-name">ChatGroup</span> chatGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QQGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//宿舍四个室友创建qq</span>
        <span class="token class-name">ChatUser</span> jack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QQUser</span><span class="token punctuation">(</span><span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span> chatGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ChatUser</span> rose <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QQUser</span><span class="token punctuation">(</span><span class="token string">&quot;rose&quot;</span><span class="token punctuation">,</span> chatGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ChatUser</span> tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QQUser</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> chatGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ChatUser</span> jerry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QQUser</span><span class="token punctuation">(</span><span class="token string">&quot;jerry&quot;</span><span class="token punctuation">,</span> chatGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//加入群聊</span>
        chatGroup<span class="token punctuation">.</span><span class="token function">joinChatGroup</span><span class="token punctuation">(</span>jack<span class="token punctuation">)</span><span class="token punctuation">;</span>
        chatGroup<span class="token punctuation">.</span><span class="token function">joinChatGroup</span><span class="token punctuation">(</span>rose<span class="token punctuation">)</span><span class="token punctuation">;</span>
        chatGroup<span class="token punctuation">.</span><span class="token function">joinChatGroup</span><span class="token punctuation">(</span>tom<span class="token punctuation">)</span><span class="token punctuation">;</span>
        chatGroup<span class="token punctuation">.</span><span class="token function">joinChatGroup</span><span class="token punctuation">(</span>jerry<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//今天晚上打算出去吃饭,jack问了大家晚上吃什么</span>
        jack<span class="token punctuation">.</span><span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token string">&quot;今天晚上吃什么&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、发布订阅模式" tabindex="-1"><a class="header-anchor" href="#_5、发布订阅模式" aria-hidden="true">#</a> 5、发布订阅模式</h3><p>发布-订阅模式是一种行为型设计模式，用于实现对象间的松耦合通信。在该模式中，<strong>存在一个消息总线或事件系统作为中介，发布者（Publisher）将消息发布到消息总线，而订阅者（Subscriber）订阅感兴趣的消息主题或事件类型。当有新的消息或事件发生时，消息总线会将消息传递给对应的订阅者</strong>。</p><p>该模式的核心思想是<strong>解耦发布者和订阅者之间的直接依赖关系</strong>。发布者不需要知道订阅者的存在，而订阅者也不需要知道发布者的细节。通过引入消息总线或事件系统作为中介，发布者和订阅者之间的交互通过消息的发布和订阅来完成。</p><p>发布-订阅模式广泛应用于各种场景，例如消息队列系统、事件驱动系统、日志记录系统等。它提供了一种灵活、可扩展的通信机制，有助于构建松耦合、可维护的软件系统。</p><p>下列例子演示了一个简单的发布-订阅模式，明星发布消息，关注了明星的追星人可以接收到通过总线发送来的消息：</p><p><strong>代码说明介绍：</strong></p><p>上述代码是一个基于事件的发布-订阅模式的实现，以一个明星发布要开全球音乐巡演会的例子来说明。</p><ul><li>接口 <code>Subscribe</code> 定义了订阅者的行为，其中 <code>onEvent()</code> 方法用于处理收到的事件。</li><li><code>JackSubscribe</code> 和 <code>RoseSubscribe</code> 是具体的订阅者实现类，它们实现了 <code>Subscribe</code> 接口，并根据收到的事件进行相应的处理。</li><li><code>EventBus</code> 是事件总线类，用于维护事件和订阅者之间的关系。它包含了注册订阅者、移除订阅者和发布事件的方法。</li><li><code>StartTopic</code> 是发布者类，它拥有一个事件总线实例，并通过调用 <code>worldConcert()</code> 方法发布名为 &quot;worldConcert&quot; 的事件。</li></ul><p><strong>代码解析：</strong></p><ol><li>在 <code>main()</code> 方法中，创建了 <code>JackSubscribe</code> 和 <code>RoseSubscribe</code> 的实例，并创建了一个 <code>EventBus</code> 的实例。</li><li>使用 <code>EventBus</code> 的 <code>registerSubscribe()</code> 方法注册了订阅者，将它们与事件类型 &quot;worldConcert&quot; 关联起来。</li><li>创建了 <code>StartTopic</code> 的实例，并将 <code>EventBus</code> 实例传递给它。</li><li>调用 <code>startTopic</code> 的 <code>worldConcert()</code> 方法发布了事件。</li><li><code>EventBus</code> 接收到事件后，根据事件类型找到相应的订阅者列表，并逐个调用订阅者的 <code>onEvent()</code> 方法处理事件。</li><li><code>JackSubscribe</code> 和 <code>RoseSubscribe</code> 分别接收到事件，并输出相应的消息。</li></ol><p>这个例子模拟了一个音乐演唱会的情景，当 <code>StartTopic</code> 的 <code>worldConcert()</code> 方法被调用时，会发布一个 &quot;worldConcert&quot; 的事件，然后 <code>JackSubscribe</code> 和 <code>RoseSubscribe</code> 作为订阅者接收到这个事件并进行处理，输出相应的消息。</p><p>通过发布-订阅模式，发布者和订阅者之间的解耦，使得发布</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Subscribe</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> eventContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">JackSubscribe</span> <span class="token keyword">implements</span> <span class="token class-name">Subscribe</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">JackSubscribe</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> eventContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot;收到发布订阅的消息:&quot;</span> <span class="token operator">+</span> eventContext<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;tmp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">RoseSubscribe</span> <span class="token keyword">implements</span> <span class="token class-name">Subscribe</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">RoseSubscribe</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> eventContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot;收到发布订阅的消息:&quot;</span> <span class="token operator">+</span> eventContext<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;tmp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">EventBus</span> <span class="token punctuation">{</span>
    <span class="token comment">//维护事件和订阅者</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Subscribe</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> subscribes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerSubscribe</span><span class="token punctuation">(</span><span class="token class-name">String</span> eventType<span class="token punctuation">,</span> <span class="token class-name">Subscribe</span> subscribe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Subscribe</span><span class="token punctuation">&gt;</span></span> subscribeList <span class="token operator">=</span> subscribes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>subscribeList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Subscribe</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//注册</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subscribe<span class="token punctuation">)</span><span class="token punctuation">;</span>
            subscribes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">//注册</span>
            subscribeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subscribe<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeSubscribe</span><span class="token punctuation">(</span><span class="token class-name">String</span> eventType<span class="token punctuation">,</span> <span class="token class-name">Subscribe</span> subscribe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Subscribe</span><span class="token punctuation">&gt;</span></span> subscribeList <span class="token operator">=</span> subscribes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>subscribeList <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            subscribeList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>subscribe<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token class-name">String</span> eventType<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> eventContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Subscribe</span><span class="token punctuation">&gt;</span></span> subscribeList <span class="token operator">=</span> subscribes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Subscribe</span> subscribe <span class="token operator">:</span> subscribeList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            subscribe<span class="token punctuation">.</span><span class="token function">onEvent</span><span class="token punctuation">(</span>eventContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">StartTopic</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">EventBus</span> eventBus<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">StartTopic</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">EventBus</span> eventBus<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>eventBus <span class="token operator">=</span> eventBus<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">worldConcert</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;tmp&quot;</span><span class="token punctuation">,</span> name <span class="token operator">+</span> <span class="token string">&quot;要开全球巡回演唱会了!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token string">&quot;worldConcert&quot;</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">JackSubscribe</span> jackSubscribe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JackSubscribe</span><span class="token punctuation">(</span><span class="token string">&quot;jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RoseSubscribe</span> roseSubscribe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RoseSubscribe</span><span class="token punctuation">(</span><span class="token string">&quot;rose&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">EventBus</span> eventBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">registerSubscribe</span><span class="token punctuation">(</span><span class="token string">&quot;worldConcert&quot;</span><span class="token punctuation">,</span> jackSubscribe<span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">registerSubscribe</span><span class="token punctuation">(</span><span class="token string">&quot;worldConcert&quot;</span><span class="token punctuation">,</span> roseSubscribe<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">StartTopic</span> startTopic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StartTopic</span><span class="token punctuation">(</span><span class="token string">&quot;redvelet&quot;</span><span class="token punctuation">,</span> eventBus<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//发布事件</span>
        startTopic<span class="token punctuation">.</span><span class="token function">worldConcert</span><span class="token punctuation">(</span><span class="token string">&quot;redvelet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、观察者的进阶使用" tabindex="-1"><a class="header-anchor" href="#_6、观察者的进阶使用" aria-hidden="true">#</a> 6、观察者的进阶使用</h3><blockquote><p>异步非阻塞型：</p></blockquote><p>前面例子的实现方式，是一种同步阻塞的实现方式。</p><ul><li>观察者和被观察者代码在同一个线程内执行，被观察者一直阻塞，直到所有的观察者代码都执行完成之后，才执行后续的代码。</li></ul><p>当观察者模式需要在异步非阻塞的场景中使用时，可以通过使用线程池来实现异步通知。下面是一个经过格式化的示例代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span>

<span class="token comment">// 观察者接口</span>
<span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 被观察者接口</span>
<span class="token keyword">interface</span> <span class="token class-name">Observable</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体的被观察者类</span>
<span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token keyword">implements</span> <span class="token class-name">Observable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observer</span><span class="token punctuation">&gt;</span></span> observers<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">ExecutorService</span> executorService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        observers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Observer</span> observer <span class="token operator">:</span> observers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">notifyObservers</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体的观察者类</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteObserver</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ConcreteObserver</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; received message: &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ConcreteObserver</span> observer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteObserver</span><span class="token punctuation">(</span><span class="token string">&quot;Observer 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ConcreteObserver</span> observer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteObserver</span><span class="token punctuation">(</span><span class="token string">&quot;Observer 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ConcreteObserver</span> observer3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteObserver</span><span class="token punctuation">(</span><span class="token string">&quot;Observer 3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        subject<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>observer1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        subject<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>observer2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        subject<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>observer3<span class="token punctuation">)</span><span class="token punctuation">;</span>

        subject<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, observers!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 等待异步任务完成</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们使用了线程池 <code>ExecutorService</code> 来实现异步非阻塞的通知。每个观察者的更新操作都将作为一个任务提交给线程池，并在不同的线程中异步执行。这样可以确保性能敏感的场景不会因为观察者的通知而阻塞。</p><blockquote><p>跨进程通信型：</p></blockquote><p>前面的两个场景，不管是同步阻塞实现方式还是异步非阻塞实现方式，都是进程内的实现方式。</p><p>如果用户注册成功之后，我们需要发送用户信息给大数据征信系统， 而大数据征信系统是一个独立的系统，跟它之间的交互是跨不同进程的，那如何实现 一个跨进程的观察者模式呢？</p><ul><li>如果大数据征信系统提供了发送用户注册信息的 RPC 接口，我们仍然可以沿用之前 的实现思路，在 notifyObservers() 函数中调用 RPC 接口来发送数据。</li><li>另一种就是基于消息队列（Message Queue， 比如 ActiveMQ）来实现。 当然，这种实现方式也有弊端，那就是需要引入一个新的系统（消息队列），增加了维护成本。不过，它的好处也非常明显。在原来的实现方式中，观察者需要注册到被观察者中，被观察者需要依次遍历观察者来发送消息。而基于消息队列的实现方式，被观察者和观察者解耦更加彻底，两部分的耦合更小。被观察者完全不感知观察者，同理，观察者也完全不感知被观察者。被观察者只管发送消息到消息队列，观察者只管从消息队列中读取消息来执行相应的逻辑。</li></ul><h3 id="_7、总结" tabindex="-1"><a class="header-anchor" href="#_7、总结" aria-hidden="true">#</a> 7、总结</h3><p>观察者设计模式的优点包括：</p><ul><li>解耦性：主题和观察者之间的松散耦合使得它们可以独立变化，增加了系统的灵活性和可扩展性。</li><li>可维护性：通过使用观察者模式，可以更容易地维护和理解对象之间的关系。</li><li>可重用性：主题和观察者可以在不同的场景中被重用，增加了代码的复用性。</li></ul><p>观察者设计模式的缺点包括：</p><ul><li>如果观察者较多或处理逻辑较复杂，可能导致性能问题。</li><li>观察者之间的通信是单向的，观察者之间无法直接通信，需要通过主题进行中转。</li></ul><p>总的来说，观察者设计模式是一种非常有用的模式，它能够实现对象之间的松耦合、动态通信和状态同步，提高系统的可维护性和灵活性。通过合理的设计和使用，可以在事件驱动的系统中发挥重要作用。</p><h2 id="二、模板设计模式" tabindex="-1"><a class="header-anchor" href="#二、模板设计模式" aria-hidden="true">#</a> 二、模板设计模式</h2><h3 id="_1、介绍-1" tabindex="-1"><a class="header-anchor" href="#_1、介绍-1" aria-hidden="true">#</a> 1、介绍</h3><p><strong>模板方法设计模式（Template Method Pattern）</strong>，它定义了一个操作中的算法框架，将一些步骤的具体实现延迟到子类中。该模式允许在不改变算法结构的情况下，通过子类实现具体步骤，从而提供了一种代码复用和扩展的方法。</p><p>重点内容：</p><ul><li>定义了一个模板方法，其中包含了算法的基本骨架，但某些步骤的具体实现由子类决定。</li><li>子类可以根据需要重写父类中的方法，以提供特定的实现。 <ul><li>不变的放在模板里，变化的放在子类实现</li></ul></li></ul><h3 id="_2、核心思想-1" tabindex="-1"><a class="header-anchor" href="#_2、核心思想-1" aria-hidden="true">#</a> 2、核心思想</h3><p>模板方法设计模式的核心思想在于定义一个抽象类，其中包含了算法的模板（即模板方法）。模板方法中会调用多个抽象方法，这些方法由子类负责实现。通过这种方式，可以确保算法的结构稳定，同时在子类中提供具体步骤的灵活实现。</p><h3 id="_3、组成和基本流程-1" tabindex="-1"><a class="header-anchor" href="#_3、组成和基本流程-1" aria-hidden="true">#</a> 3、组成和基本流程</h3><p>模板方法设计模式主要由以下组成部分构成：</p><ol><li><p><strong>AbstractClass（抽象类）</strong>：定义了一个模板方法，其中包含了算法的基本骨架，以及若干抽象方法，这些抽象方法由子类负责实现。</p></li><li><p><strong>ConcreteClass（具体类）</strong>：继承自抽象类，实现了在抽象类中定义的抽象方法，从而提供了对算法中特定步骤的具体实现。</p></li></ol><p>基本流程如下：</p><ol><li>定义抽象类，其中包含了一个模板方法和若干抽象方法。</li><li>子类继承抽象类，并实现其中的抽象方法。</li><li>在客户端中，通过实例化具体类对象，调用模板方法执行算法，具体步骤由子类实现。</li></ol><p>示例代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractClass</span> <span class="token punctuation">{</span>
    <span class="token comment">// 模板方法，定义了算法的基本骨架</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">templateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">step1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">step2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">step3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 抽象方法，由子类实现</span>
    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">step1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">step2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">step3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteClass</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractClass</span> <span class="token punctuation">{</span>
    <span class="token comment">// 实现抽象方法</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">step1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 具体步骤实现</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">step2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 具体步骤实现</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">step3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 具体步骤实现</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、使用场景和具体案例-1" tabindex="-1"><a class="header-anchor" href="#_4、使用场景和具体案例-1" aria-hidden="true">#</a> 4、使用场景和具体案例</h3><p>模板方法设计模式适用于以下情况：</p><ul><li>当算法中的结构相对稳定，但其中某些步骤的具体实现可能会变化时，可以<strong>进行复用</strong>的功能。</li><li>当希望在不改变算法整体结构的情况下，能够灵活地扩展和修改其中某些步骤的实现，可以<strong>进行拓展</strong>的功能。</li></ul><p>当结合具体业务场景时，模板方法设计模式可以应用于以下情况：</p><ol><li><p><strong>数据导入处理</strong>：假设我们有一个数据导入系统，用于从不同来源（例如Excel文件、CSV文件、数据库等）导入数据，并将其存储到数据库中。整个导入过程有一定的稳定结构，如打开数据源、解析数据、数据校验、数据存储等。但不同的数据来源可能需要不同的数据解析和校验逻辑。我们可以将整个数据导入过程定义为一个模板方法，其中通用的处理步骤在抽象类中实现，而数据解析和校验的具体实现则由子类（不同数据来源对应的子类）来完成。</p></li><li><p><strong>订单处理</strong>：考虑一个电商平台的订单处理系统，其中订单的创建、支付、物流等过程有一些共性步骤，如生成订单号、验证支付、发货等。但不同类型的订单（普通订单、预定订单、退货订单）可能在这些共性步骤上有所不同，比如退货订单需要额外进行退款处理。我们可以将订单处理过程抽象为模板方法，将共性步骤放在抽象类中实现，然后每种订单类型对应一个具体子类，实现特定类型订单的处理逻辑。</p></li><li><p><strong>游戏关卡设计</strong>：在游戏开发中，不同关卡的设计可能有一些相似的元素，如敌人生成、任务目标、胜利条件等。但每个关卡的地图、敌人种类和数量、任务难度等可能会有所不同。我们可以将关卡设计抽象为模板方法，将共性的关卡元素放在抽象类中实现，然后每个具体关卡对应一个子类，实现特定关卡的设计。</p></li><li><p><strong>流程审批系统</strong>：在企业中，审批流程通常有一定的通用结构，如提交申请、审批处理、审核记录等。不同类型的申请（请假申请、报销申请、加班申请等）可能在审批处理上有所不同，比如请假申请需要额外的日期计算，报销申请需要金额核对。我们可以将审批流程抽象为模板方法，将通用的审批步骤放在抽象类中实现，然后每种申请类型对应一个具体子类，实现特定申请的审批逻辑。</p></li></ol><p>这些场景中，模板方法设计模式能够将稳定的处理流程与特定实现解耦，使得代码更加灵活、易于维护和扩展。同时，通过在抽象类中定义模板方法，可以促使开发人员在子类中实现特定步骤，提高代码的一致性和可读性。</p><h4 id="_4-1-复用" tabindex="-1"><a class="header-anchor" href="#_4-1-复用" aria-hidden="true">#</a> 4.1 复用</h4><h5 id="具体案例1-inputstream" tabindex="-1"><a class="header-anchor" href="#具体案例1-inputstream" aria-hidden="true">#</a> 具体案例1：InputStream</h5><p>在Java的标准库中，有一个经典的例子是<code>java.io.InputStream</code>类，它是所有输入流的抽象基类。这个类定义了一个模板方法<code>read()</code>，用于读取输入流中的数据。下面是一个简化的示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">InputStream</span> <span class="token punctuation">{</span>
    <span class="token comment">// 模板方法，定义了读取输入流中的数据的基本骨架</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEndOfStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">process</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 抽象方法，由子类实现具体的输入流打开逻辑</span>
    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>

    <span class="token comment">// 抽象方法，由子类实现具体的数据读取逻辑</span>
    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>

    <span class="token comment">// 抽象方法，由子类实现具体的数据处理逻辑</span>
    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 具体方法，判断是否达到输入流的末尾</span>
    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isEndOfStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 具体判断逻辑</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 具体方法，由子类实现具体的输入流关闭逻辑</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 具体关闭逻辑</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体类：FileInputStream</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileInputStream</span> <span class="token keyword">extends</span> <span class="token class-name">InputStream</span> <span class="token punctuation">{</span>
    <span class="token comment">// 实现抽象方法：打开文件输入流</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 具体的文件打开逻辑</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 实现抽象方法：读取文件中的字节数据</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 具体的读取字节逻辑</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 实现抽象方法：处理读取到的字节数据</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 具体的处理逻辑</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 重写父类方法：判断是否达到文件末尾</span>
    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isEndOfStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 具体判断文件末尾的逻辑</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 实现抽象方法：关闭文件输入流</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 具体的文件关闭逻辑</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>InputStream</code>类是一个抽象类，它定义了一个模板方法<code>readData()</code>，该方法定义了读取输入流中数据的基本流程（打开流、读取数据、处理数据、关闭流）。具体的实现细节则交给子类去实现，子类必须提供具体的输入流的打开、读取、处理和关闭的逻辑。这样，我们可以通过继承抽象类并实现具体的方法，来创建不同类型的输入流，例如<code>FileInputStream</code>、<code>ByteArrayInputStream</code>等，实现了具体的数据读取逻辑。</p><p>希望这个例子能够更好地展示模板方法设计模式的应用。再次向你表示抱歉，并感谢你的理解！</p><h5 id="具体案例2-生成报告模板" tabindex="-1"><a class="header-anchor" href="#具体案例2-生成报告模板" aria-hidden="true">#</a> 具体案例2：生成报告模板</h5><p>假设我们有一个报告生成系统，其中包含不同类型的报告，如PDF报告、Word报告等。这些报告的生成过程有一定的共性，比如首先需要进行数据查询，然后根据查询结果填充报告内容，并最终导出为指定格式的文件。</p><p>使用模板方法设计模式，我们可以定义一个报告生成的抽象类，其中包含一个模板方法<code>generateReport()</code>，它定义了生成报告的基本骨架。然后，我们可以创建不同的具体报告类，如<code>PDFReport</code>和<code>WordReport</code>，它们继承自抽象类，并实现其中的抽象方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 抽象类：报告生成模板</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ReportTemplate</span> <span class="token punctuation">{</span>
    <span class="token comment">// 模板方法，定义报告生成的基本骨架</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">generateReport</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fillContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exportReport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 抽象方法，由子类实现具体的数据查询</span>
    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 抽象方法，由子类实现具体的报告内容填充</span>
    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">fillContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 抽象方法，由子类实现具体的报告导出</span>
    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">exportReport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体类：PDF报告</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PDFReport</span> <span class="token keyword">extends</span> <span class="token class-name">ReportTemplate</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 实现PDF报告的数据查询逻辑</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">fillContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 实现PDF报告的内容填充逻辑</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">exportReport</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 实现PDF报告的导出逻辑</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体类：Word报告</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordReport</span> <span class="token keyword">extends</span> <span class="token class-name">ReportTemplate</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 实现Word报告的数据查询逻辑</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">fillContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 实现Word报告的内容填充逻辑</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">exportReport</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 实现Word报告的导出逻辑</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这种方式，我们实现了报告生成过程的复用，因为不同类型的报告共用了相同的生成算法框架，但其中的具体步骤由子类实现，使得我们可以灵活地扩展和修改报告生成的某些步骤。</p><h4 id="_4-2-拓展" tabindex="-1"><a class="header-anchor" href="#_4-2-拓展" aria-hidden="true">#</a> 4.2 拓展</h4><h5 id="具体案例1-java-servelt" tabindex="-1"><a class="header-anchor" href="#具体案例1-java-servelt" aria-hidden="true">#</a> 具体案例1：Java Servelt</h5><p>当扩展到处理HTTP的GET、POST和PUT请求时，我们可以在抽象类<code>MyServlet</code>中增加对<code>doPost()</code>和<code>doPut()</code>方法的支持。这样，我们可以在模板方法中处理通用的逻辑，并在具体的子类中实现特定请求类型的处理。</p><p>这段代码展示了一个简化的Java Servlet的示例。</p><ol><li>定义了一个抽象类<code>MyServlet</code>，它继承自<code>HttpServlet</code>，这是Java Servlet的基类。<code>MyServlet</code>中有三个模板方法：<code>doGet()</code>、<code>doPost()</code>和<code>doPut()</code>，它们分别处理HTTP的GET、POST和PUT请求，并调用相应的抽象方法处理具体的请求逻辑。</li><li>抽象类中定义了三个抽象方法：<code>handleGetRequest()</code>、<code>handlePostRequest()</code>和<code>handlePutRequest()</code>，这些方法是由子类来实现的，用于处理特定类型的HTTP请求的逻辑。</li><li>创建了一个具体子类<code>MyServletImpl</code>，它继承自抽象类<code>MyServlet</code>。在<code>MyServletImpl</code>中，我们实现了父类中定义的三个抽象方法，分别处理GET、POST和PUT请求的逻辑。</li></ol><p>这个示例中的<code>MyServlet</code>抽象类可以作为一个基类，用于处理不同类型的HTTP请求，而具体的子类如<code>MyServletImpl</code>则负责实现特定类型请求的处理逻辑。这种结构允许我们在一个抽象的框架中定义通用的请求处理流程，并在具体的子类中提供个性化的实现，实现了模板方法设计模式的思想：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token comment">// 模板方法，处理HTTP请求并生成响应</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行一些通用的处理逻辑</span>

        <span class="token comment">// 调用抽象方法，由子类实现特定的处理逻辑</span>
        <span class="token function">handleGetRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 执行一些通用的处理逻辑</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 模板方法，处理HTTP POST请求并生成响应</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行一些通用的处理逻辑</span>

        <span class="token comment">// 调用抽象方法，由子类实现特定的处理逻辑</span>
        <span class="token function">handlePostRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 执行一些通用的处理逻辑</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 模板方法，处理HTTP PUT请求并生成响应</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPut</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行一些通用的处理逻辑</span>

        <span class="token comment">// 调用抽象方法，由子类实现特定的处理逻辑</span>
        <span class="token function">handlePutRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 执行一些通用的处理逻辑</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 抽象方法，由子类实现特定的GET请求处理逻辑</span>
    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleGetRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>

    <span class="token comment">// 抽象方法，由子类实现特定的POST请求处理逻辑</span>
    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handlePostRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>

    <span class="token comment">// 抽象方法，由子类实现特定的PUT请求处理逻辑</span>
    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handlePutRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体类：MyServletImpl</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServletImpl</span> <span class="token keyword">extends</span> <span class="token class-name">MyServlet</span> <span class="token punctuation">{</span>
    <span class="token comment">// 实现抽象方法：处理GET请求逻辑</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handleGetRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 具体的GET请求处理逻辑</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 实现抽象方法：处理POST请求逻辑</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handlePostRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 具体的POST请求处理逻辑</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 实现抽象方法：处理PUT请求逻辑</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handlePutRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 具体的PUT请求处理逻辑</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过在抽象类中添加<code>doPost()</code>和<code>doPut()</code>的支持，我们使得<code>MyServlet</code>能够处理HTTP的GET、POST和PUT请求。在具体的子类中，我们分别实现了<code>handleGetRequest()</code>、<code>handlePostRequest()</code>和<code>handlePutRequest()</code>方法，来处理相应的请求逻辑。</p><p>这个例子展示了模板方法设计模式在处理不同类型的HTTP请求时的应用。通过模板方法，我们可以复用通用的处理逻辑，同时为不同类型的请求提供灵活的特定处理实现。</p><h3 id="_5、总结" tabindex="-1"><a class="header-anchor" href="#_5、总结" aria-hidden="true">#</a> 5、总结</h3><p><strong>优点：</strong></p><ul><li>模板方法设计模式提高了代码复用性，通过将算法的公共部分抽象到父类中，确保了这些公共步骤在所有子类中的一致性实现，避免了重复代码的出现。</li><li>可以灵活地扩展和修改算法的某些步骤，无需改变整体结构。子类可以通过实现抽象方法来覆盖或添加特定步骤，实现个性化的功能扩展。</li></ul><p><strong>缺点：</strong></p><ul><li>引入了抽象类和抽象方法，增加了代码的复杂性。在一些简单的场景下，使用模板方法可能会导致类的层次结构变得复杂，不利于代码的维护。</li><li>如果算法的变化点过多，可能需要在抽象类中定义大量的抽象方法，增加了子类的实现复杂性和代码的理解难度。</li></ul><p>总体而言，模板方法设计模式在许多情况下都能很好地提高代码的复用性和灵活性。在设计和开发过程中，我们需要根据实际情况来判断是否适合使用模板方法，并平衡代码的复杂性和灵活性。合理地应用模板方法设计模式可以使代码更加清晰、易于维护，并且降低了修改代码时引入错误的风险。</p><h2 id="三、策略设计模式" tabindex="-1"><a class="header-anchor" href="#三、策略设计模式" aria-hidden="true">#</a> 三、策略设计模式</h2><h3 id="_1、介绍-2" tabindex="-1"><a class="header-anchor" href="#_1、介绍-2" aria-hidden="true">#</a> 1、介绍</h3><p>策略设计模式（Strategy Pattern）是一种行为型设计模式，<strong>它允许在运行时选择算法的实现方式，从而使得算法的变化独立于使用算法的客户端</strong>。这种模式通过将不同的算法封装成独立的策略类，并在上下文类中持有一个策略对象，来实现灵活的算法替换和扩展。</p><h3 id="_2、核心思想-2" tabindex="-1"><a class="header-anchor" href="#_2、核心思想-2" aria-hidden="true">#</a> 2、核心思想</h3><p>策略设计模式的核心思想是<strong>把算法的定义和使用分开，将算法的具体实现封装在策略类中，然后在上下文类中持有一个策略对象，通过调用策略对象的方法来执行具体的算法</strong>。这样，当需要改变算法时，只需要替换相应的策略对象，而无需修改上下文类的代码，实现了算法和客户端的解耦。</p><ul><li>个人理解，不就是多态吗，传入的策略是一个接口，可以传入所有实现了该策略的具体实现，根据传入策略不同，选择不同算法实现。</li></ul><h3 id="_3、组成和基本流程-2" tabindex="-1"><a class="header-anchor" href="#_3、组成和基本流程-2" aria-hidden="true">#</a> 3、组成和基本流程</h3><blockquote><p>策略设计模式由以下几个关键组件组成：</p></blockquote><ul><li><strong>Strategy（策略接口）</strong>：策略接口定义了算法的统一接口，所有具体策略类都需要实现该接口。</li><li><strong>ConcreteStrategy（具体策略）</strong>：具体策略类是策略接口的实现类，每个具体策略类实现了一种具体的算法。</li><li><strong>Context（上下文）</strong>：上下文类持有一个策略对象，并在需要执行算法时调用策略对象的方法。</li></ul><blockquote><p>策略设计模式的基本流程：</p></blockquote><ol><li>上下文类持有一个策略接口对象。</li><li>客户端根据需求选择具体的策略，并将其传递给上下文类。</li><li>上下文类在需要执行算法时，调用策略接口的方法。</li><li>具体的策略类根据实现方式执行算法。</li></ol><blockquote><p>以下是一个使用策略设计模式的简单的示例：</p></blockquote><p>允许用户输入不同的符号来选择不同的策略进行计算，以下是用于接受用户输入并根据输入选择策略的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 策略接口</span>
<span class="token keyword">interface</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体策略-加法策略</span>
<span class="token keyword">class</span> <span class="token class-name">AddStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> m <span class="token operator">+</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体策略-除法策略</span>
<span class="token keyword">class</span> <span class="token class-name">DivStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;除数不能为零！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> m <span class="token operator">/</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>
    <span class="token comment">// 持有策略</span>
    <span class="token keyword">private</span> <span class="token class-name">Strategy</span> strategy<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStrategy</span><span class="token punctuation">(</span><span class="token class-name">Strategy</span> strategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 设置策略</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calculator</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> strategy<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建上下文</span>
        <span class="token class-name">Computer</span> computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请输入运算符号（+表示加法，/表示除法，q表示退出）:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> input <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;q&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">Strategy</span> strategy<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AddStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DivStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;无效输入。请输入+、/或q。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 设置策略</span>
            computer<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 获取运算数</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请输入第一个数字:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> x <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请输入第二个数字:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> y <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 使用</span>
            <span class="token keyword">int</span> result <span class="token operator">=</span> computer<span class="token punctuation">.</span><span class="token function">calculator</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;计算结果: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;再见！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个示例非常清晰地展示了策略设计模式的优势，通过策略模式，我们可以轻松地实现算法的替换，而不必修改 <code>Computer</code> 类的代码。这样的设计使得代码更加灵活、可扩展和易于维护。</p><h3 id="_4、使用场景和具体案例-2" tabindex="-1"><a class="header-anchor" href="#_4、使用场景和具体案例-2" aria-hidden="true">#</a> 4、使用场景和具体案例</h3><blockquote><p>策略设计模式适用于以下场景：</p></blockquote><ul><li>当一个类需要根据条件选择不同的算法时，可以使用策略模式来避免使用多个<code>if-else</code>语句。</li><li>当一个类有多个相似的算法，并且客户端需要动态地选择其中一个时，可以使用策略模式来实现算法的灵活替换。</li></ul><blockquote><p>业务场景</p></blockquote><p>我们的电商平台支持多种支付方式，包括支付宝支付、微信支付和信用卡支付。每种支付方式的支付逻辑不同，但是在用户提交订单时，我们并不知道用户会选择哪种支付方式。</p><p><strong>策略设计模式案例：</strong></p><p>首先，我们定义一个策略接口 <code>PaymentStrategy</code>，其中包含一个 <code>pay</code> 方法用于执行支付逻辑。然后，我们创建三个具体的支付策略类：<code>AlipayStrategy</code>、<code>WeChatPayStrategy</code> 和 <code>CreditCardPayStrategy</code>，分别实现了支付宝支付、微信支付和信用卡支付的具体逻辑。</p><p>接下来，我们创建一个 <code>PaymentContext</code> 类作为上下文类，它持有一个支付策略对象，并提供了 <code>setPaymentStrategy</code> 方法用于设置支付策略。在 <code>PaymentContext</code> 类中，我们通过调用支付策略对象的 <code>pay</code> 方法来执行具体的支付逻辑。</p><p>最后，在客户端代码中，我们可以根据用户选择的支付方式来设置不同的支付策略，并执行支付操作。</p><p>示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 策略接口</span>
<span class="token keyword">interface</span> <span class="token class-name">PaymentStrategy</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token keyword">double</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体策略-支付宝支付</span>
<span class="token keyword">class</span> <span class="token class-name">AlipayStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">PaymentStrategy</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;使用支付宝支付：&quot;</span> <span class="token operator">+</span> amount <span class="token operator">+</span> <span class="token string">&quot;元&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 具体的支付逻辑</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体策略-微信支付</span>
<span class="token keyword">class</span> <span class="token class-name">WeChatPayStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">PaymentStrategy</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;使用微信支付：&quot;</span> <span class="token operator">+</span> amount <span class="token operator">+</span> <span class="token string">&quot;元&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 具体的支付逻辑</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体策略-信用卡支付</span>
<span class="token keyword">class</span> <span class="token class-name">CreditCardPayStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">PaymentStrategy</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;使用信用卡支付：&quot;</span> <span class="token operator">+</span> amount <span class="token operator">+</span> <span class="token string">&quot;元&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 具体的支付逻辑</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 上下文类</span>
<span class="token keyword">class</span> <span class="token class-name">PaymentContext</span> <span class="token punctuation">{</span>
    <span class="token comment">// 持有策略</span>
    <span class="token keyword">private</span> <span class="token class-name">PaymentStrategy</span> paymentStrategy<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPaymentStrategy</span><span class="token punctuation">(</span><span class="token class-name">PaymentStrategy</span> paymentStrategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 设置策略</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>paymentStrategy <span class="token operator">=</span> paymentStrategy<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makePayment</span><span class="token punctuation">(</span><span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        paymentStrategy<span class="token punctuation">.</span><span class="token function">pay</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 客户端代码</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建上下文</span>
        <span class="token class-name">PaymentContext</span> paymentContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PaymentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 用户选择支付宝支付</span>
        <span class="token class-name">PaymentStrategy</span> alipayStrategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlipayStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        paymentContext<span class="token punctuation">.</span><span class="token function">setPaymentStrategy</span><span class="token punctuation">(</span>alipayStrategy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        paymentContext<span class="token punctuation">.</span><span class="token function">makePayment</span><span class="token punctuation">(</span><span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 用户选择微信支付</span>
        <span class="token class-name">PaymentStrategy</span> weChatPayStrategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeChatPayStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        paymentContext<span class="token punctuation">.</span><span class="token function">setPaymentStrategy</span><span class="token punctuation">(</span>weChatPayStrategy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        paymentContext<span class="token punctuation">.</span><span class="token function">makePayment</span><span class="token punctuation">(</span><span class="token number">200.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 用户选择信用卡支付</span>
        <span class="token class-name">PaymentStrategy</span> creditCardPayStrategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreditCardPayStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        paymentContext<span class="token punctuation">.</span><span class="token function">setPaymentStrategy</span><span class="token punctuation">(</span>creditCardPayStrategy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        paymentContext<span class="token punctuation">.</span><span class="token function">makePayment</span><span class="token punctuation">(</span><span class="token number">300.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个案例中，策略设计模式帮助我们实现了不同支付方式的逻辑隔离和动态替换。当用户选择不同的支付方式时，我们可以灵活地设置不同的支付策略，而不必修改 <code>PaymentContext</code> 类的代码。这样的设计使得代码更加灵活、可扩展和易于维护。</p><p>在实际的电商平台中，支付逻辑可能更加复杂，涉及支付安全、订单状态管理等，使用策略设计模式能够更好地组织和管理这些复杂的支付流程。</p><h3 id="_6、总结" tabindex="-1"><a class="header-anchor" href="#_6、总结" aria-hidden="true">#</a> 6、总结</h3><p>策略设计模式的优点包括：</p><ul><li>算法可互换：可以在运行时动态地选择算法，实现算法的灵活替换。</li><li>避免多重条件判断：避免使用大量的<code>if-else</code>语句，增加代码的可读性和可维护性。</li><li>提高可扩展性：可以方便地增加新的策略类，扩展系统的功能。</li></ul><p>策略设计模式的缺点包括：</p><ul><li>增加类的数量：每个具体策略类都需要一个对应的类，如果策略较多，会增加类的数量。</li><li>策略的选择逻辑：客户端需要选择合适的策略，如果策略选择逻辑复杂，会增加客户端的复杂性。</li></ul><p>总的来说，策略设计模式是一种非常有用的模式，它可以将算法的定义和使用分开，实现算法的灵活替换，提高系统的可扩展性和可</p><p>维护性。在合适的场景下，使用策略设计模式可以使代码更加清晰、简洁、易于理解和维护。</p><h3 id="_7、结合工厂设计模式" tabindex="-1"><a class="header-anchor" href="#_7、结合工厂设计模式" aria-hidden="true">#</a> 7、结合工厂设计模式</h3><p>使用策略设计模式和工厂设计模式可以有效消除代码中的 if-else 语句，使代码更加清晰、可维护和易于扩展。</p><p>首先，我们可以创建一个工厂类来根据用户输入返回相应的策略对象。然后，我们使用策略设计模式将不同的策略封装在不同的类中，从而实现算法的动态切换。</p><p>下面是一个示例代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 策略接口</span>
<span class="token keyword">interface</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体策略-加法策略</span>
<span class="token keyword">class</span> <span class="token class-name">AddStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> m <span class="token operator">+</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体策略-除法策略</span>
<span class="token keyword">class</span> <span class="token class-name">DivStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;除数不能为零！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> m <span class="token operator">/</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 策略工厂</span>
<span class="token keyword">class</span> <span class="token class-name">StrategyFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Strategy</span> <span class="token function">createStrategy</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AddStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DivStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;无效输入。请输入+或/。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>
    <span class="token comment">// 持有策略</span>
    <span class="token keyword">private</span> <span class="token class-name">Strategy</span> strategy<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStrategy</span><span class="token punctuation">(</span><span class="token class-name">Strategy</span> strategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 设置策略</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calculator</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> strategy<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建上下文</span>
        <span class="token class-name">Computer</span> computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请输入运算符号（+表示加法，/表示除法，q表示退出）:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> input <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;q&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 创建策略</span>
                <span class="token class-name">Strategy</span> strategy <span class="token operator">=</span> <span class="token class-name">StrategyFactory</span><span class="token punctuation">.</span><span class="token function">createStrategy</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 设置策略</span>
                computer<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 获取运算数</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请输入第一个数字:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> x <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请输入第二个数字:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> y <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 使用</span>
                <span class="token keyword">int</span> result <span class="token operator">=</span> computer<span class="token punctuation">.</span><span class="token function">calculator</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;计算结果: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;再见！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们使用了策略设计模式将加法和除法封装在不同的策略类中，并通过工厂设计模式根据用户的输入动态创建相应的策略对象。这样，在主程序中，就不再需要使用繁琐的 if-else 语句，代码更加简洁、易读、易于扩展和维护。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>您说得对，每个序列化器实现类中的判断确实会导致代码耦合，而且还会违反开闭原则（Open-Closed Principle），因为每次添加新的版本需要修改已有的实现类。

为了避免这种耦合，我们可以进一步优化设计。我们可以使用策略模式和工厂模式的组合来解耦代码并支持添加新的版本，而不需要修改现有的实现类。

首先，我们将序列化逻辑从序列化器实现类中分离出来，创建一个新的策略接口\`DeserializationStrategy\`用于处理反序列化逻辑。

\`\`\`java
public interface DeserializationStrategy {
    &lt;T&gt; T deserialize(byte[] bytes, Class&lt;T&gt; clazz);
}
\`\`\`

然后，我们为每个版本创建一个实现\`DeserializationStrategy\`的具体策略类。

\`\`\`java
public class Version1DeserializationStrategy implements DeserializationStrategy {
    @Override
    public &lt;T&gt; T deserialize(byte[] bytes, Class&lt;T&gt; clazz) {
        // 实现版本1的反序列化逻辑
    }
}

public class Version2DeserializationStrategy implements DeserializationStrategy {
    @Override
    public &lt;T&gt; T deserialize(byte[] bytes, Class&lt;T&gt; clazz) {
        // 实现版本2的反序列化逻辑
    }
}

// 添加更多版本的策略类...
\`\`\`

接下来，我们更新\`Serializer\`接口，将策略模式引入其中：

\`\`\`java
public interface Serializer {
    byte[] serialize(Object object);

    &lt;T&gt; T deserialize(byte[] bytes, Class&lt;T&gt; clazz);

    void registerDeserializationStrategy(int version, DeserializationStrategy strategy);
}
\`\`\`

我们将\`registerDeserializationStrategy\`方法用于注册不同版本对应的反序列化策略。

接着，我们修改每个序列化器实现类，让它们实现新的\`Serializer\`接口，并将策略模式的逻辑添加到其中。

\`\`\`java
public class HessianSerializer implements Serializer {
    private Map&lt;Integer, DeserializationStrategy&gt; deserializationStrategies = new HashMap&lt;&gt;();

    @Override
    public byte[] serialize(Object object) {
        // 实现Hessian的序列化方法
    }

    @Override
    public &lt;T&gt; T deserialize(byte[] bytes, Class&lt;T&gt; clazz) {
        return deserialize(bytes, clazz, 1); // 默认版本1的反序列化方式
    }

    @Override
    public void registerDeserializationStrategy(int version, DeserializationStrategy strategy) {
        deserializationStrategies.put(version, strategy);
    }

    @Override
    public &lt;T&gt; T deserialize(byte[] bytes, Class&lt;T&gt; clazz, int version) {
        DeserializationStrategy strategy = deserializationStrategies.get(version);
        if (strategy != null) {
            return strategy.deserialize(bytes, clazz);
        } else {
            // 版本不兼容时，默认选择版本1的反序列化逻辑
            return deserialize(bytes, clazz);
        }
    }
}

// 同样更新Fastjson2Serializer
public class Fastjson2Serializer implements Serializer {
    // ... 其他代码 ...

    private Map&lt;Integer, DeserializationStrategy&gt; deserializationStrategies = new HashMap&lt;&gt;();

    @Override
    public byte[] serialize(Object object) {
        // 实现Fastjson2的序列化方法
    }

    @Override
    public &lt;T&gt; T deserialize(byte[] bytes, Class&lt;T&gt; clazz) {
        return deserialize(bytes, clazz, 1); // 默认版本1的反序列化方式
    }

    @Override
    public void registerDeserializationStrategy(int version, DeserializationStrategy strategy) {
        deserializationStrategies.put(version, strategy);
    }

    @Override
    public &lt;T&gt; T deserialize(byte[] bytes, Class&lt;T&gt; clazz, int version) {
        DeserializationStrategy strategy = deserializationStrategies.get(version);
        if (strategy != null) {
            return strategy.deserialize(bytes, clazz);
        } else {
            // 版本不兼容时，默认选择版本1的反序列化逻辑
            return deserialize(bytes, clazz);
        }
    }
}
\`\`\`

在上述实现中，我们将策略模式应用到序列化器实现类中，通过\`registerDeserializationStrategy\`方法注册不同版本的反序列化策略，并在\`deserialize\`方法中根据版本号选择对应的策略进行反序列化操作。如果版本不兼容，仍然可以选择默认的版本1的反序列化方式。

最后，在主程序中，您可以使用这些序列化器，并注册不同版本的反序列化策略。

\`\`\`java
public class Main {
    public static void main(String[] args) {
        Serializer hessianSerializer = new HessianSerializer();
        Serializer fastjsonSerializer = new Fastjson2Serializer();

        int version = 2; // 假设报文传入的版本号为2
        Serializer serializer = version == 2 ? fastjsonSerializer : hessianSerializer;

        // 注册不同版本的反序列化策略
        serializer.registerDeserializationStrategy(1, new Version1DeserializationStrategy());
        serializer.registerDeserializationStrategy(2, new Version2DeserializationStrategy());
        // 可以继续注册更多版本的策略...

        // 假设bytes为序列化后的字节数组
        byte[] bytes = // ...;

        // 假设clazz为目标类的Class对象
        Class&lt;?&gt; clazz = // ...;

        // 反序列化
        Message deserializedMessage = serializer.deserialize(bytes, clazz, version);
        System.out.println(&quot;Deserialized message: &quot; + deserializedMessage);
    }
}
\`\`\`

通过使用策略模式和工厂模式的组合，我们成功解耦了代码，并可以根据版本号注册不同的反序列化策略，使得代码更加灵活和可扩展。新的版本也可以很方便地添加到现有系统中，而不需要修改已有的实现类。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、责任链设计模式" tabindex="-1"><a class="header-anchor" href="#四、责任链设计模式" aria-hidden="true">#</a> 四、责任链设计模式</h2><h3 id="_1、介绍-3" tabindex="-1"><a class="header-anchor" href="#_1、介绍-3" aria-hidden="true">#</a> 1、介绍</h3><p>责任链设计模式（Chain of Responsibility Pattern）是一种行为型设计模式，<strong>它通过为请求创建一个接收者链，将多个处理器（或接收者）连接在一起，依次尝试处理请求</strong>。当一个请求进入责任链时，每个处理器将依次检查自己是否能够处理该请求，如果可以处理，则进行处理，如果不能处理，则将请求传递给下一个处理器。</p><ul><li>请求：不只是<code>http</code>请求，任何一个<code>方法的调用</code>也是请求</li></ul><h3 id="_2、核心思想-3" tabindex="-1"><a class="header-anchor" href="#_2、核心思想-3" aria-hidden="true">#</a> 2、核心思想</h3><p>责任链设计模式的核心思想是<strong>解耦请求的发送者和接收者，将多个处理器组成一个链条，并在运行时动态决定请求的处理顺序</strong>。当一个请求进入责任链时，责任链上的每个处理器都有机会处理该请求，直到有一个处理器能够处理它为止。这样，每个处理器只需要关心自己能否处理该请求，而无需关心其他处理器的存在。</p><h3 id="_3、组成和基本流程-3" tabindex="-1"><a class="header-anchor" href="#_3、组成和基本流程-3" aria-hidden="true">#</a> 3、组成和基本流程</h3><blockquote><p>责任链设计模式由以下几个要素组成：</p></blockquote><ul><li><strong>Handler（处理器）</strong>：定义一个处理请求的接口，并持有下一个处理器的引用。</li><li><strong>ConcreteHandler（具体处理器）</strong>：实现处理器接口，对请求进行实际处理。如果不能处理请求，则将请求传递给下一个处理器。</li><li><strong>Client（客户端）</strong>：创建责任链并将请求发送给责任链的头部。</li></ul><blockquote><p>基本流程：</p></blockquote><ol><li>客户端创建多个具体处理器，并将它们按照处理顺序连接成责任链。</li><li>当一个请求进入责任链时，责任链上的第一个处理器开始检查是否能够处理该请求。</li><li>如果能够处理，则进行处理并结束。</li><li>如果不能处理，则将请求传递给下一个处理器，继续检查，直到有一个处理器能够处理该请求。</li></ol><blockquote><p>以下是一个使用责任链设计模式的简单的示例：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Handler（处理器）接口</span>
<span class="token keyword">interface</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">setNextHandler</span><span class="token punctuation">(</span><span class="token class-name">Handler</span> nextHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// ConcreteHandler（具体处理器）类</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteHandlerA</span> <span class="token keyword">implements</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Handler</span> nextHandler<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> request <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ConcreteHandlerA 处理请求: &quot;</span> <span class="token operator">+</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nextHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            nextHandler<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNextHandler</span><span class="token punctuation">(</span><span class="token class-name">Handler</span> nextHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>nextHandler <span class="token operator">=</span> nextHandler<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ConcreteHandlerB</span> <span class="token keyword">implements</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Handler</span> nextHandler<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">&gt;=</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> request <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ConcreteHandlerB 处理请求: &quot;</span> <span class="token operator">+</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nextHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            nextHandler<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNextHandler</span><span class="token punctuation">(</span><span class="token class-name">Handler</span> nextHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>nextHandler <span class="token operator">=</span> nextHandler<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ConcreteHandlerC</span> <span class="token keyword">implements</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">&gt;=</span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span> request <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ConcreteHandlerC 处理请求: &quot;</span> <span class="token operator">+</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;没有处理器能够处理该请求: &quot;</span> <span class="token operator">+</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNextHandler</span><span class="token punctuation">(</span><span class="token class-name">Handler</span> nextHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ConcreteHandlerC 是责任链的末端，不需要持有下一个处理器的引用</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Client（客户端）类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建具体处理器</span>
        <span class="token class-name">Handler</span> handlerA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteHandlerA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Handler</span> handlerB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteHandlerB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Handler</span> handlerC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteHandlerC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 构建责任链</span>
        handlerA<span class="token punctuation">.</span><span class="token function">setNextHandler</span><span class="token punctuation">(</span>handlerB<span class="token punctuation">)</span><span class="token punctuation">;</span>
        handlerB<span class="token punctuation">.</span><span class="token function">setNextHandler</span><span class="token punctuation">(</span>handlerC<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 客户端发送请求</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> requests <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> request <span class="token operator">:</span> requests<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            handlerA<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们创建了三个具体处理器类（ConcreteHandlerA、ConcreteHandlerB、ConcreteHandlerC），它们分别能处理不同范围的请求。客户端（Main类）创建了这三个处理器，并按照处理顺序连接成了一个责任链。</p><p>当客户端发送请求时，请求会从责任链的头部（handlerA）开始传递，每个处理器检查是否能够处理该请求，如果能够处理，则进行处理，否则将请求传递给下一个处理器。这样，只有能够处理该请求的处理器会进行处理，实现了请求的动态分发和处理。</p><p>请注意，<code>ConcreteHandlerC</code> 是责任链的末端，并不需要持有下一个处理器的引用，因为它没有后继处理器。当请求到达末端后，如果没有任何处理器能够处理该请求，则会输出&quot;没有处理器能够处理该请求&quot;。</p><h3 id="_4、使用场景和具体案例-3" tabindex="-1"><a class="header-anchor" href="#_4、使用场景和具体案例-3" aria-hidden="true">#</a> 4、使用场景和具体案例</h3><p>责任链设计模式在以下情况下适用：</p><ol><li><p>当一个请求需要被多个对象处理，但具体的处理对象在运行时才能确定时。责任链模式允许在运行时动态地确定请求的处理顺序，从而实现灵活的处理流程。</p></li><li><p>当希望避免请求发送者与接收者之间的耦合关系，或者希望动态地指定处理请求的对象时。责任链模式将请求发送者和接收者解耦，使得请求发送者无需知道是哪个接收者处理了请求，而接收者也无需知道请求的发送者是谁，从而增强了系统的灵活性和可扩展性。</p></li></ol><h4 id="具体案例" tabindex="-1"><a class="header-anchor" href="#具体案例" aria-hidden="true">#</a> 具体案例</h4><p>责任链设计模式在实际应用中有许多场景，以下是一些具体案例：</p><ol><li><p>Servlet Filter：在Java Web开发中，Servlet Filter是一种典型的责任链模式的应用。Filter用于在Servlet请求被处理之前或之后对请求和响应进行预处理和后处理。可以通过配置多个Filter，并按照一定的顺序将它们连接成责任链，使得请求依次经过各个Filter进行处理。</p></li><li><p>Spring Interceptor：在Spring框架中，Interceptor也是一种责任链模式的应用。Interceptor用于在请求被处理之前或之后进行一些公共的处理逻辑，如权限验证、日志记录等。可以通过配置多个Interceptor，并按照一定的顺序将它们连接成责任链，从而实现对请求的预处理和后处理。</p></li><li><p>MyBatis中的插件：MyBatis是一个流行的Java持久化框架，它允许用户编写自定义的插件来扩展其功能。插件就是一种责任链模式的应用，可以通过插件在SQL执行前后进行拦截和处理，实现一些自定义的功能，如日志记录、缓存处理等，一层一层的代理包装。</p></li></ol><p>这些具体案例展示了责任链设计模式在实际项目中的灵活应用，通过将处理逻辑拆分成多个处理器，并将它们连接成责任链，可以实现更加灵活、可扩展和可维护的代码结构。</p><h5 id="具体案例-链表实现" tabindex="-1"><a class="header-anchor" href="#具体案例-链表实现" aria-hidden="true">#</a> 具体案例-链表实现</h5><p>这是一个简单的责任链设计模式示例代码，模拟了一个处理器链（HandlerChain）和两个具体处理器（LoggingHandler和ValidationHandler）。这些处理器按照添加的顺序依次处理请求。</p><ul><li><code>Handler</code> 是抽象处理器类，定义了处理器的基本结构，并持有下一个处理器的引用。</li><li><code>LoggingHandler</code> 是具体处理器类，负责对请求进行日志处理。</li><li><code>ValidationHandler</code> 是具体处理器类，负责对请求进行数据校验。</li><li><code>HandlerChain</code> 是处理器链类，持有处理器链的头部和尾部，并提供添加处理器和执行处理器链的方法。</li></ul><p>在 <code>Main</code> 类中，创建了一个处理器链 <code>chain</code>，并向其添加了 <code>LoggingHandler</code> 和 <code>ValidationHandler</code>。然后，通过调用 <code>chain.doChain(&quot;登录请求&quot;)</code> 来触发处理器链的执行，从而依次处理请求。</p><p>调用输出：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>登录请求经过了日志处理器<span class="token punctuation">..</span><span class="token punctuation">..</span>打了进入日志
登录请求经过了日志处理器<span class="token punctuation">..</span><span class="token punctuation">..</span>进行的数据校验
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HandlerChain</span> chain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        chain<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        chain<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValidationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        chain<span class="token punctuation">.</span><span class="token function">doChain</span><span class="token punctuation">(</span><span class="token string">&quot;登录请求&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">Handler</span> next<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token class-name">Handler</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">String</span> product<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">LoggingHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">String</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>product <span class="token operator">+</span> <span class="token string">&quot;经过了日志处理器....打了进入日志&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ValidationHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">String</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>product <span class="token operator">+</span> <span class="token string">&quot;经过了日志处理器....进行的数据校验&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">HandlerChain</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">Handler</span> head<span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token class-name">Handler</span> tail<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addHandler</span><span class="token punctuation">(</span><span class="token class-name">Handler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> tail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            head <span class="token operator">=</span> handler<span class="token punctuation">;</span>
            tail <span class="token operator">=</span> handler<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        tail<span class="token punctuation">.</span>next <span class="token operator">=</span> handler<span class="token punctuation">;</span>
        tail <span class="token operator">=</span> handler<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doChain</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Handler</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                p<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此示例代码演示了责任链设计模式的基本实现方式，它允许灵活地添加、移除和调整处理器的顺序，从而实现不同的处理逻辑和扩展。在实际应用中，可以根据业务需求定义更复杂的处理器链，并实现更多的具体处理器来满足不同的需求。</p><h5 id="具体案例-数组实现" tabindex="-1"><a class="header-anchor" href="#具体案例-数组实现" aria-hidden="true">#</a> 具体案例-数组实现</h5><p>在这个示例中，<code>HandlerChain</code>类持有一个<code>List&lt;Handler&gt;</code>，并提供了<code>addHandler</code>方法用于添加处理器到链中。<code>doChain</code>方法遍历链中的处理器，并依次调用它们的<code>handle</code>方法，从而实现责任链的执行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HandlerChain</span> chain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        chain<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        chain<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValidationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        chain<span class="token punctuation">.</span><span class="token function">doChain</span><span class="token punctuation">(</span><span class="token string">&quot;登录请求&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">String</span> product<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">LoggingHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">String</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>product <span class="token operator">+</span> <span class="token string">&quot;经过了日志处理器....打了进入日志&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ValidationHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">String</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>product <span class="token operator">+</span> <span class="token string">&quot;经过了日志处理器....进行的数据校验&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">HandlerChain</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Handler</span><span class="token punctuation">&gt;</span></span> handlers<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">HandlerChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>handlers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addHandler</span><span class="token punctuation">(</span><span class="token class-name">Handler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        handlers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doChain</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Handler</span> handler <span class="token operator">:</span> handlers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            handler<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、总结-1" tabindex="-1"><a class="header-anchor" href="#_5、总结-1" aria-hidden="true">#</a> 5、总结</h3><p>责任链设计模式的优点：</p><ul><li>解耦请求发送者和接收者，增强了代码的灵活性和可扩展性。</li><li>动态地组织和分配处理器，简化了代码的维护和扩展。</li></ul><p>责任链设计模式的缺点：</p><ul><li>可能会导致请求在责任链上无法被处理。</li><li>需要遍历整个责任链，对性能有一定影响。</li></ul><p>总体而言，责任链设计模式在一些特定的场景下能够带来很大的便利，但也需要谨慎使用，避免责任链过长或者过于复杂，其次责任链模式在工作中的应用非常广泛，它可以在很多场景中帮助我们实现灵活的请求处理和任务分配。</p><p>以下是一些常见的使用场景：</p><ol><li><p>日志记录器：在应用程序中，我们可能需要将日志记录到不同的位置，如控制台、文件、数据库等。我们可以创建一个日志记录器链，每个记录器处理特定级别的日志，然后将请求传递给下一个记录器。这样，可以根据日志级别灵活地记录日志信息。</p></li><li><p>Web应用中的过滤器和拦截器：在Web应用程序中，我们经常需要对请求进行预处理和后处理，如身份验证、授权、编码转换、请求日志记录等。过滤器和拦截器就是典型的使用责任链模式的场景，请求和响应在过滤器或拦截器链中依次传递，每个过滤器或拦截器执行特定的任务。</p></li><li><p>工作流引擎：在一个工作流引擎中，一个请求可能需要经过多个处理步骤，这些步骤可以看作是一个责任链。每个处理器处理请求的一个部分，然后将请求传递给下一个处理器，直到请求被完全处理。</p></li><li><p>软件审批流程：在企业软件开发过程中，代码审查、需求审批、文档审查等流程可能需要多个审批者按顺序审批。这种场景下，责任链模式能够确保每个审批者只关注自己的审批职责，并将审批请求传递给下一个审批者。</p></li><li><p>电子邮件处理：在一个电子邮件处理系统中，可能需要对不同类型的邮件进行不同的处理，如垃圾邮件过滤、自动回复、邮件归类等。在这种情况下，可以使用责任链模式来创建一个邮件处理链，每个处理器负责处理特定类型的邮件，然后将邮件传递给下一个处理器。</p></li><li><p>事件处理系统：在一个事件驱动的系统中，可能需要对不同类型的事件进行不同的处理。责任链模式可以用于创建一个事件处理器链，每个处理器负责处理特定类型的事件，并将事件传递给下一个处理器。这样可以确保系统的可扩展性和灵活性。</p></li><li><p>规则引擎：在某些业务场景下，可能需要按照一定的规则对数据进行处理。规则引擎是典型的使用责任链模式的场景。每个规则可以看作是一个处理器，对数据进行特定的处理，然后将数据传递给下一个规则，直至所有规则都被执行。</p></li><li><p>任务调度系统：在任务调度系统中，根据任务的优先级、类型和资源需求，可能需要将任务分配给不同的执行器。责任链模式可以确保每个执行器只关注自己可以处理的任务，并将其他任务传递给下一个执行器。</p></li></ol><p>在这些场景中，责任链模式使得请求的处理和任务的分配变得灵活和可配置，同时保持了各个处理器之间的解耦，使得系统具有更好的扩展性和可维护性。因此，责任链模式是很多系统设计中常用的一种设计模式。</p><h2 id="五、状态设计模式" tabindex="-1"><a class="header-anchor" href="#五、状态设计模式" aria-hidden="true">#</a> 五、状态设计模式</h2><h3 id="_1、介绍-4" tabindex="-1"><a class="header-anchor" href="#_1、介绍-4" aria-hidden="true">#</a> 1、介绍</h3><p><strong>状态设计模式（State Pattern）</strong>，又称状态模式，是一种行为型设计模式。它允许一个对象在其内部状态发生改变时改变其行为，使得对象在不同状态下具有不同的行为。状态模式的关键在于将对象的状态封装成独立的类，并将请求委派给当前状态对象进行处理。这样可以避免在对象中使用大量的条件语句来判断状态，并将状态转换逻辑集中管理，使得代码更加清晰和易于维护。</p><h3 id="_2、核心思想-4" tabindex="-1"><a class="header-anchor" href="#_2、核心思想-4" aria-hidden="true">#</a> 2、核心思想</h3><p>状态设计模式的核心思想是将对象的状态抽象成独立的类，每个状态类都实现了相同的接口，表示对象在该状态下的行为。对象内部维护一个状态对象，根据不同的状态委派请求给对应的状态类处理。当对象的状态发生改变时，可以动态地切换状态对象，从而改变对象的行为。</p><h3 id="_3、组成和基本流程-4" tabindex="-1"><a class="header-anchor" href="#_3、组成和基本流程-4" aria-hidden="true">#</a> 3、组成和基本流程</h3><p>状态设计模式由以下几个要素组成：</p><ul><li><strong>Context（上下文）</strong>：定义客户端感兴趣的接口，并持有一个具体状态的引用。</li><li><strong>State（状态）</strong>：定义一个接口来封装与Context的一个特定状态相关的行为。</li><li><strong>ConcreteState（具体状态）</strong>：实现State接口，每个具体状态类负责对应状态下的行为实现。</li><li><strong>Client（客户端）</strong>：通过Context类来与状态对象进行交互，实现状态切换。</li></ul><p>基本流程：</p><ol><li>客户端创建Context对象，并初始化为某个具体状态的对象。</li><li>Context对象接收客户端的请求，并委派给当前具体状态对象处理。</li><li>具体状态对象根据当前状态处理请求，可能会导致状态发生改变。</li><li>如果状态发生改变，Context对象切换到新的具体状态对象进行处理。</li></ol><p>以下是一个简单的状态设计模式代码案例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// State（状态）接口</span>
<span class="token keyword">interface</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// ConcreteState（具体状态）类</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteStateA</span> <span class="token keyword">implements</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前是状态A，执行状态A的行为&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ConcreteStateB</span> <span class="token keyword">implements</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前是状态B，执行状态B的行为&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Context（上下文）类</span>
<span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">State</span> currentState<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        currentState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteStateA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始状态为状态A</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCurrentState</span><span class="token punctuation">(</span><span class="token class-name">State</span> currentState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>currentState <span class="token operator">=</span> currentState<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        currentState<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Client（客户端）类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Context</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        context<span class="token punctuation">.</span><span class="token function">setCurrentState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteStateB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们定义了一个简单的状态设计模式。<code>State</code>接口定义了一个<code>handle</code>方法，表示当前状态下的行为；<code>ConcreteStateA</code>和<code>ConcreteStateB</code>是两个具体状态类，分别实现了<code>State</code>接口，表示状态A和状态B下的行为。<code>Context</code>类是上下文类，持有当前的状态对象，并根据当前状态委派请求给相应的状态对象处理。客户端（Main类）创建了<code>Context</code>对象，并初始状态为状态A，然后调用<code>request</code>方法来执行当前状态的行为。接着，客户端切换状态为状态B，再次调用<code>request</code>方法来执行状态B下的行为。</p><h3 id="_4、使用场景" tabindex="-1"><a class="header-anchor" href="#_4、使用场景" aria-hidden="true">#</a> 4、使用场景</h3><p>状态设计模式适用于以下场景：</p><ul><li>当一个对象的行为取决于它的状态，并且该对象需要根据状态改变行为时。</li><li>当一个对象有许多状态且状态之间的转换频繁发生时，使用状态模式可以避免大量的条件语句。</li><li>当一个对象的行为包含大量与状态相关的代码，状态模式可以将不同状态的行为拆分成独立的类，使代码更加清晰和易于维护。</li></ul><p>现在我们来看一个简单的Java示例。假设我们要模拟一个简易的电视遥控器，具有开启、关闭和调整音量的功能。如果我们不使用设计模式，编写出来的代码可能是这个样子的，我们需要针对电视机当前的状态为每一次操作编写判断逻辑：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TV</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isOn<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> volume<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">TV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        isOn <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        volume <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果是开启状态</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isOn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;TV is already on.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            isOn <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Turning on the TV.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isOn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            isOn <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Turning off the TV.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;TV is already off.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">adjustVolume</span><span class="token punctuation">(</span><span class="token keyword">int</span> volume<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isOn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>volume <span class="token operator">=</span> volume<span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Adjusting volume to: &quot;</span> <span class="token operator">+</span> volume<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Cannot adjust volume, TV is off.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TV</span> tv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tv<span class="token punctuation">.</span><span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tv<span class="token punctuation">.</span><span class="token function">adjustVolume</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tv<span class="token punctuation">.</span><span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然在该例子中我们的状态比较少，所以代码看起来也不是很复杂，但是状态如果变多了呢？比如加入换台、快捷键、静音等功能后呢？你会发现条件分支会急速膨胀，所以此时状态设计模式就要登场了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//首先，我们定义抽象状态接口TVState，将每一个修改状态的动作抽象成个接口：</span>
<span class="token keyword">interface</span> <span class="token class-name">TVState</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">adjustVolume</span><span class="token punctuation">(</span><span class="token keyword">int</span> volume<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//接下来，我们为每个具体状态创建类，实现 \`TVState\` 接口。例如，我们创建 \`TVOnState\` 和 \`TVOffState\` 类</span>
<span class="token comment">// 在on状态下，去执行以下各种操作</span>
<span class="token keyword">class</span> <span class="token class-name">TVOnState</span> <span class="token keyword">implements</span> <span class="token class-name">TVState</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;TV is already on.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Turning off the TV.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">adjustVolume</span><span class="token punctuation">(</span><span class="token keyword">int</span> volume<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Adjusting volume to: &quot;</span> <span class="token operator">+</span> volume<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在关机的状态下执行以下的操作</span>
<span class="token keyword">class</span> <span class="token class-name">TVOffState</span> <span class="token keyword">implements</span> <span class="token class-name">TVState</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Turning on the TV.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;TV is already off.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">adjustVolume</span><span class="token punctuation">(</span><span class="token keyword">int</span> volume<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Cannot adjust volume, TV is off.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//接下来，我们定义上下文类 \`TV\`</span>
<span class="token keyword">class</span> <span class="token class-name">TV</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当前状态</span>
    <span class="token keyword">private</span> <span class="token class-name">TVState</span> state<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">TV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TVOffState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">TVState</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 打开</span>
        state<span class="token punctuation">.</span><span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置为开机状态</span>
        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TVOnState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 关闭</span>
        state<span class="token punctuation">.</span><span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置为关机状态</span>
        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TVOffState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">adjustVolume</span><span class="token punctuation">(</span><span class="token keyword">int</span> volume<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        state<span class="token punctuation">.</span><span class="token function">adjustVolume</span><span class="token punctuation">(</span>volume<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//现在，我们可以在游戏中根据角色的状态来执行不同的行为，而不需要直接在 \`Character\` 类中进行大量的条件判断。</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TV</span> tv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tv<span class="token punctuation">.</span><span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tv<span class="token punctuation">.</span><span class="token function">adjustVolume</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tv<span class="token punctuation">.</span><span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tv<span class="token punctuation">.</span><span class="token function">adjustVolume</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子展示了状态模式的基本结构和用法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Turning on the TV.
Adjusting volume to: <span class="token number">10</span>
Turning off the TV.
Cannot adjust volume, TV is off.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过使用状态模式，我们可以更好地组织和管理与特定状态相关的代码。当状态较多时，这种模式的优势就会凸显出来，同时我们在代码时，因为我们会对每个状态进行独立封装，所以也会简化代码编写。</p><h3 id="_5、总结-2" tabindex="-1"><a class="header-anchor" href="#_5、总结-2" aria-hidden="true">#</a> 5、总结</h3><p>状态设计模式通过将对象的状态封装成独立的类，并根据当前状态委派请求给相应的状态对象处理，实现了对象行为的动态改变。它可以消除大量的条件语句，使代码更加灵活和可维护。使用状态设计模式可以将复杂的对象行为拆分成独立的类，从而提高代码的可读性和可维护性。</p><p><strong>优点</strong>：</p><ul><li><p>将对象的状态抽象成独立的类，避免大量的条件语句，使代码更加清晰和易于维护。</p></li><li><p>支持开闭原则，可以方便地添加新的状态类，而无需修改现有代码。</p></li><li><p>当使用状态模式时，有以下几个具体的好处，让我用白话点来解释：</p><ol><li><p><strong>清晰简洁的代码结构：</strong> 状态模式让我们将每种状态的处理逻辑封装在独立的类中，避免了大量的条件语句，让代码结构更加清晰、简洁，易于理解和维护。</p></li><li><p><strong>易于扩展和添加新功能：</strong> 通过将状态与上下文类分离，新增状态时只需添加新的状态类，不需要修改原有代码，符合开闭原则，使得扩展和添加新功能变得非常简单。</p></li><li><p><strong>状态切换更加灵活：</strong> 上下文类可以轻松地切换不同的状态，只需在运行时设置不同的状态类，状态之间的切换变得灵活可控。</p></li><li><p><strong>降低代码复杂度：</strong> 在处理复杂的状态逻辑时，状态模式能够将每个状态的处理逻辑独立起来，降低了代码的复杂度，让代码更易于维护和调试。</p></li><li><p><strong>增强可读性：</strong> 状态模式可以让每个状态类只包含特定状态下的逻辑，使得代码的含义更加明确，增强了代码的可读性。</p></li></ol><p>总之，状态模式为处理具有不同状态的对象提供了一种优雅的解决方案，通过封装状态的处理逻辑，简化了代码结构，使得代码更易于扩展和维护，降低了代码的复杂度，增强了代码的可读性。这让开发人员可以更加专注于业务逻辑的实现，而不需要过多地关心状态切换和状态处理的细节。</p></li></ul><p><strong>缺点</strong>：</p><ul><li>状态模式会增加类的数量，增加代码复杂性。</li><li>在某些情况下，状态的转换可能较为复杂，需要仔细设计状态之间的转换逻辑。</li></ul><p>总体而言，状态设计模式在一些需要根据状态改变行为的场景中是很有用的设计模式，它可以提高代码的可读性和可维护性，并支持系统的扩展。在使用状态模式时，应根据实际情况仔细设计状态之间的转换逻辑，避免状态的频繁转换导致性能问题。</p><h2 id="六、迭代器设计模式" tabindex="-1"><a class="header-anchor" href="#六、迭代器设计模式" aria-hidden="true">#</a> 六、迭代器设计模式</h2><h3 id="_1、介绍-5" tabindex="-1"><a class="header-anchor" href="#_1、介绍-5" aria-hidden="true">#</a> 1、介绍</h3><p><strong>迭代器设计模式</strong>（Iterator Design Pattern）是一种行为型设计模式，它<strong>提供了一种顺序访问聚合对象（如列表、集合等）元素的方法，而无需暴露底层集合的表示方式</strong>。通过使用迭代器，可以遍历聚合对象，而不必了解其内部结构。</p><h3 id="_2、核心思想-5" tabindex="-1"><a class="header-anchor" href="#_2、核心思想-5" aria-hidden="true">#</a> 2、核心思想</h3><p>迭代器设计模式的核心思想是将迭代逻辑从聚合对象中抽离出来，使得聚合对象可以专注于管理元素，而迭代逻辑由迭代器来实现。这样做的好处是在不影响聚合对象结构的情况下，能够灵活地遍历聚合对象中的元素。</p><h3 id="_3、组成和基本流程-5" tabindex="-1"><a class="header-anchor" href="#_3、组成和基本流程-5" aria-hidden="true">#</a> 3、组成和基本流程</h3><ul><li><p><strong>组成</strong>：迭代器设计模式由以下两个主要组件组成：</p><ul><li><p><em><strong>迭代器（Iterator）</strong></em>：定义访问和遍历元素的接口，通常包括<code>hasNext()</code>方法判断是否有下一个元素，以及<code>next()</code>方法获取下一个元素。</p></li><li><p><em><strong>具体迭代器（Concrete Iterator）</strong></em>：实现迭代器接口，负责具体的遍历逻辑，维护遍历时的状态信息。</p></li></ul></li><li><p><strong>基本流程</strong>：迭代器设计模式的基本流程如下：</p><ol><li>定义聚合对象，并在聚合对象中实现一个方法用于返回迭代器对象。</li><li>定义迭代器接口，包含用于遍历聚合对象的方法。</li><li>在具体聚合对象中实现迭代器接口，定义具体迭代器类，实现遍历逻辑。</li><li>在客户端中，通过聚合对象的迭代器方法获取迭代器对象，然后使用迭代器遍历聚合对象的元素。</li></ol></li></ul><p>以下是一个按照组成和基本流程的代码案例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 迭代器接口</span>
<span class="token keyword">interface</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体聚合对象</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteAggregate</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Iterator</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteIterator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体迭代器</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">ConcreteAggregate</span> aggregate<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> currentIndex<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">ConcreteIterator</span><span class="token punctuation">(</span><span class="token class-name">ConcreteAggregate</span> aggregate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>aggregate <span class="token operator">=</span> aggregate<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>currentIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> currentIndex <span class="token operator">&lt;</span> aggregate<span class="token punctuation">.</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> aggregate<span class="token punctuation">.</span>elements<span class="token punctuation">[</span>currentIndex<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 客户端代码</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConcreteAggregate</span> aggregate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteAggregate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> aggregate<span class="token punctuation">.</span><span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Object</span> element <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 处理元素逻辑</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、使用场景和具体案例-4" tabindex="-1"><a class="header-anchor" href="#_4、使用场景和具体案例-4" aria-hidden="true">#</a> 4、使用场景和具体案例</h3><p>迭代器设计模式适用于以下场景：</p><ul><li><strong>当需要遍历一个复杂对象结构</strong>，并且不希望暴露其内部表示时。</li><li>当需要<strong>提供多种遍历方式</strong>，而又不希望在聚合对象中增加复杂的遍历逻辑时。</li><li>当希望<strong>将遍历算法和遍历逻辑与聚合对象分离</strong>，使得代码更加清晰和易于维护。</li></ul><blockquote><p><strong>在下面例子中，我们实现了一个简单的类似ArrayList的集合<code>SuperArray</code>，并且实现了迭代器设计模式：</strong></p></blockquote><ul><li><code>SuperArray</code>类表示一个简单的数组聚合对象，它封装了一个整型数组，并提供了添加元素、获取元素、获取长度和创建迭代器等方法。</li><li><code>ArrayIterator</code>类是具体的迭代器类，它实现了<code>Iterator</code>接口，负责遍历<code>SuperArray</code>对象中的元素。</li><li><code>Main</code>类的<code>main()</code>方法中，我们创建了一个<code>SuperArray</code>对象并添加了一些元素。然后，通过调用<code>iterator()</code>方法获取迭代器对象，使用迭代器遍历并输出<code>SuperArray</code>对象中的元素。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 迭代器接口</span>
<span class="token keyword">interface</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 聚合对象</span>
<span class="token keyword">class</span> <span class="token class-name">SuperArray</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> curr <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SuperArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">SuperArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 判断容量、扩容</span>
        <span class="token comment">// ...</span>
        array<span class="token punctuation">[</span><span class="token operator">++</span>curr<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>
        <span class="token keyword">return</span> curr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Iterator</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 返回一个迭代器对象，迭代器持有当前对象实例</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIterator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体迭代器</span>
<span class="token keyword">class</span> <span class="token class-name">ArrayIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>
    <span class="token comment">// 维护一个聚合对象</span>
    <span class="token keyword">private</span> <span class="token class-name">SuperArray</span> superArray<span class="token punctuation">;</span>
    <span class="token comment">// 记录一个当前位置指针</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> currIndex<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ArrayIterator</span><span class="token punctuation">(</span><span class="token class-name">SuperArray</span> concreteObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>superArray <span class="token operator">=</span> concreteObject<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>currIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 判断是否有下一个</span>
        <span class="token keyword">return</span> currIndex <span class="token operator">&lt;</span> superArray<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> length <span class="token operator">=</span> superArray<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>currIndex <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 返回当前元素，且指针下移</span>
            <span class="token keyword">return</span> superArray<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>currIndex<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SuperArray</span> superArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            superArray<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 创建并获得迭代器</span>
        <span class="token comment">// 隐藏了底层实现（没有方法获取到 superArray 内具体的实现 - array，只能通过公共的方法访问），所以我们只需要关注迭代器结合</span>
        <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> superArray<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;iterator.next() = &quot;</span> <span class="token operator">+</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、总结-3" tabindex="-1"><a class="header-anchor" href="#_5、总结-3" aria-hidden="true">#</a> 5、总结</h3><p><strong>优点</strong>：</p><ul><li>将遍历算法与聚合对象分离，增加了代码的灵活性和可维护性。</li><li>简化了聚合对象的接口，对外隐藏了内部表示，降低了对聚合对象的依赖。</li></ul><p><strong>缺点</strong>：</p><ul><li>增加了迭代器类的数量，使得代码结构变得更加复杂。</li><li>对于简单的聚合对象，使用迭代器模式可能会显得过于繁琐。</li></ul><p><strong>总结</strong>：<br> 迭代器设计模式提供了一种优雅的方式来遍历聚合对象，它将遍历算法与聚合对象解耦，使得代码更加灵活和易于维护。然而，在简单的情况下，使用迭代器模式可能会增加代码复杂性，因此在应用时需根据实际情况权衡利弊。</p><p>其它：</p><p>在使用迭代器内的<code>remove()</code>方法时，需要注意以下几点：</p><ol><li><p><strong>调用位置</strong>：<code>remove()</code>方法只能在调用了<code>next()</code>方法之后再调用。例如，假设我们有一个迭代器<code>iterator</code>，如果在调用<code>remove()</code>之前没有调用<code>iterator.next()</code>，或者在同一个<code>next()</code>方法之后再次调用<code>remove()</code>，都将会抛出<code>IllegalStateException</code>异常。这是因为迭代器需要知道当前指针指向的元素，才能正确地执行删除操作。</p></li><li><p><strong>单次迭代</strong>：<code>remove()</code>方法在一次迭代中只能被调用一次。在每次调用<code>next()</code>方法后，我们只能调用一次<code>remove()</code>来移除上一个元素。如果在同一次迭代中多次调用<code>remove()</code>，将会导致<code>IllegalStateException</code>异常。这是为了避免迭代器状态的混乱，保持每次迭代操作的一致性。</p></li><li><p><strong>验证元素</strong>：在调用<code>remove()</code>方法之前，必须先调用<code>hasNext()</code>或<code>next()</code>方法来检查是否还有元素。如果在调用<code>remove()</code>之前没有检查元素，而迭代器已经遍历到了最后一个元素，将会导致<code>remove()</code>方法抛出<code>NoSuchElementException</code>异常。因此，在删除元素之前，我们应该先确保迭代器指针还没有到达最后一个元素。</p></li><li><p><strong>并发修改</strong>：在使用迭代器遍历集合的同时，通过其他方式修改了集合的结构（比如直接调用集合的<code>add()</code>、<code>remove()</code>等方法），会导致迭代器的状态不一致，进而可能引发<code>ConcurrentModificationException</code>异常。为了避免并发修改问题，建议在使用迭代器期间，不要使用集合的其他修改方法。如果需要在遍历过程中修改集合，应该使用迭代器的<code>remove()</code>方法来安全地删除元素。</p></li></ol><p>综上所述，使用迭代器的<code>remove()</code>方法需要遵循特定的调用顺序，确保在正确的时机调用并避免多次调用。同时，在调用<code>remove()</code>方法之前要进行元素的验证，确保迭代器指针没有到达最后一个元素。另外，需要注意避免在使用迭代器时并发修改集合的结构，以免引发<code>ConcurrentModificationException</code>异常。遵循这些注意事项，可以确保在使用迭代器的<code>remove()</code>方法时能够正常而安全地移除集合中的元素。</p><h2 id="七、访问者设计模式" tabindex="-1"><a class="header-anchor" href="#七、访问者设计模式" aria-hidden="true">#</a> 七、访问者设计模式</h2><p>说实话我也看不懂，理解不了，但是这个还是通过组合的方式实现的</p><h3 id="_1、介绍-6" tabindex="-1"><a class="header-anchor" href="#_1、介绍-6" aria-hidden="true">#</a> 1、介绍</h3><p><strong>访问者设计模式（Visitor Pattern）<strong>是一种行为型设计模式，用于</strong>在不修改已有类的情况下，对现有类的对象结构进行操作或添加新的操作</strong>。它允许在不改变对象结构的前提下，定义作用于该结构中元素的新操作，从而实现对元素的新功能扩展。</p><h3 id="_2、核心思想-6" tabindex="-1"><a class="header-anchor" href="#_2、核心思想-6" aria-hidden="true">#</a> 2、核心思想</h3><p>访问者模式的核心思想是将数据结构与对数据的操作分离。</p><ul><li>通过引入访问者对象，使得数据结构中的元素可以接受不同类型的访问者对象，从而可以实现不同的操作。</li></ul><h3 id="_3、组成和基本流程-6" tabindex="-1"><a class="header-anchor" href="#_3、组成和基本流程-6" aria-hidden="true">#</a> 3、组成和基本流程</h3><blockquote><p>访问者模式主要包括以下组成：</p></blockquote><ul><li><strong>抽象访问者（Visitor）</strong>：定义访问元素对象的接口，通过这个接口，访问者可以访问所有具体元素。</li><li><strong>具体访问者（ConcreteVisitor）</strong>：实现抽象访问者定义的接口，为每种具体元素对象提供具体的访问操作。</li><li><strong>抽象元素（Element）</strong>：定义接受访问者对象的接口，通过这个接口，元素对象可以被访问者访问。</li><li><strong>具体元素（ConcreteElement）</strong>：实现抽象元素定义的接口，提供接受访问者访问的具体实现。</li><li><strong>对象结构（Object Structure）</strong>：包含元素对象的结构，可以是一个集合或其他数据结构。</li><li><strong>客户端（Client）</strong>：通过访问者来访问对象结构中的元素。</li></ul><blockquote><p>基本流程如下：</p></blockquote><ol><li>定义抽象访问者接口，声明访问具体元素对象的方法。</li><li>定义抽象元素接口，声明接受访问者对象的方法。</li><li>定义具体元素类，实现抽象元素接口，并提供具体的实现。</li><li>定义具体访问者类，实现抽象访问者接口，并为每种具体元素对象提供具体的访问操作。</li><li>定义对象结构，用于存储具体元素对象。</li><li>在客户端中，创建具体元素对象并添加到对象结构中，然后创建具体访问者对象，调用访问者的访问方法对元素进行操作。</li></ol><h3 id="_4、使用场景和具体案例-5" tabindex="-1"><a class="header-anchor" href="#_4、使用场景和具体案例-5" aria-hidden="true">#</a> 4、使用场景和具体案例</h3><ul><li>当需要为一个对象结构中的元素添加新的操作，且不希望修改现有类的结构时，可以使用访问者模式。</li><li>当需要对一个对象结构中的元素进行多种不相关的操作，且希望避免这些操作对元素类的污染时，可以使用访问者模式。</li></ul><p>当我们谈论访问者设计模式时，可以把它比作一个旅行团的场景。假设你要带领一个旅行团游览一个大城市，这个城市里有很多不同的景点，比如博物馆、公园、购物中心等等。</p><p>在我们的旅行团场景中：</p><ul><li>可以将城市的景点看作是对象结构</li><li>旅行团成员则是访问者。</li><li>每个景点都可以接受访问者并提供一种或多种参观方式。</li></ul><p>这样，我们就可以实现旅行团成员在不同景点间游览的行为，同时不需要修改景点的结构。</p><figure><img src="https://cloud.greennut.icu/blog/design-pattern/visitor.png" alt="访问者设计模式示例" tabindex="0" loading="lazy"><figcaption>访问者设计模式示例</figcaption></figure><ol><li>创建访问者接口（Visitor Interface）：首先，我们需要定义一个访问者接口，它包含了旅行团成员可能会访问的不同景点的访问方法。例如，我们可以定义一个名为&quot;Visitor&quot;的接口，其中包含类似visitMuseum，visitPark，visitShoppingMall等方法。</li><li>创建具体访问者（Concrete Visitors）：接下来，我们为旅行团成员的不同类型创建具体访问者类，实现访问者接口中的方法。例如，我们可以创建&quot;Tourist&quot;和&quot;Guide&quot;两个具体访问者类，它们分别表示普通旅游者和导游。</li><li>创建元素接口（Element Interface）：定义一个元素接口，其中包含一个接受访问者的方法accept，该方法将具体的访问者作为参数。</li><li>创建具体元素（Concrete Elements）：创建表示不同景点的具体元素类，这些类实现元素接口，并在accept方法中调用访问者的对应方法。例如，我们可以创建&quot;Museum&quot;、&quot;Park&quot;和&quot;ShoppingMall&quot;等具体元素类。</li><li>建立对象结构（Object Structure）：创建一个对象结构，该结构存储所有景点的引用，并可以接受访问者。例如，我们可以创建一个&quot;City&quot;类，其中包含一个列表，存储所有景点（即具体元素）的引用。</li><li>实现游览过程：最后，我们将旅行团成员引导到不同的景点上，并让他们按照一定顺序访问这些景点。旅行团成员可以依次访问每个景点，通过调用accept方法，将自己作为访问者传递给城市的对象结构。城市对象结构在接受访问者时，会调用具体元素的accept方法，从而实现访问者对景点的访问。</li></ol><p>当然，下面是用Java语言实现的示例代码，演示如何使用访问者设计模式来模拟旅行团游览大城市的场景：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 访问者接口</span>
<span class="token keyword">interface</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">visitMuseum</span><span class="token punctuation">(</span><span class="token class-name">Museum</span> museum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">visitPark</span><span class="token punctuation">(</span><span class="token class-name">Park</span> park<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">visitShoppingMall</span><span class="token punctuation">(</span><span class="token class-name">ShoppingMall</span> shoppingMall<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体访问者 - 普通旅游者</span>
<span class="token keyword">class</span> <span class="token class-name">Tourist</span> <span class="token keyword">implements</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitMuseum</span><span class="token punctuation">(</span><span class="token class-name">Museum</span> museum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Tourist is visiting the museum&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitPark</span><span class="token punctuation">(</span><span class="token class-name">Park</span> park<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Tourist is enjoying the park&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitShoppingMall</span><span class="token punctuation">(</span><span class="token class-name">ShoppingMall</span> shoppingMall<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Tourist is shopping at the mall&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体访问者 - 导游</span>
<span class="token keyword">class</span> <span class="token class-name">Guide</span> <span class="token keyword">implements</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitMuseum</span><span class="token punctuation">(</span><span class="token class-name">Museum</span> museum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Guide is explaining the museum history&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitPark</span><span class="token punctuation">(</span><span class="token class-name">Park</span> park<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Guide is giving information about the park&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitShoppingMall</span><span class="token punctuation">(</span><span class="token class-name">ShoppingMall</span> shoppingMall<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Guide is showing the best shops at the mall&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 元素接口</span>
<span class="token keyword">interface</span> <span class="token class-name">CityElement</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Visitor</span> visitor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体元素 - 博物馆</span>
<span class="token keyword">class</span> <span class="token class-name">Museum</span> <span class="token keyword">implements</span> <span class="token class-name">CityElement</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Visitor</span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        visitor<span class="token punctuation">.</span><span class="token function">visitMuseum</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体元素 - 公园</span>
<span class="token keyword">class</span> <span class="token class-name">Park</span> <span class="token keyword">implements</span> <span class="token class-name">CityElement</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Visitor</span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        visitor<span class="token punctuation">.</span><span class="token function">visitPark</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体元素 - 购物中心</span>
<span class="token keyword">class</span> <span class="token class-name">ShoppingMall</span> <span class="token keyword">implements</span> <span class="token class-name">CityElement</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Visitor</span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        visitor<span class="token punctuation">.</span><span class="token function">visitShoppingMall</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 对象结构 - 城市</span>
<span class="token keyword">class</span> <span class="token class-name">City</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CityElement</span><span class="token punctuation">&gt;</span></span> cityElements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCityElement</span><span class="token punctuation">(</span><span class="token class-name">CityElement</span> cityElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cityElements<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cityElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Visitor</span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">CityElement</span> cityElement <span class="token operator">:</span> cityElements<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cityElement<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>visitor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 测试</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">City</span> city <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">City</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        city<span class="token punctuation">.</span><span class="token function">addCityElement</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Museum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        city<span class="token punctuation">.</span><span class="token function">addCityElement</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        city<span class="token punctuation">.</span><span class="token function">addCityElement</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ShoppingMall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Visitor</span> tourist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tourist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Visitor</span> guide <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Guide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Tourist&#39;s tour:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        city<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>tourist<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\nGuide&#39;s tour:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        city<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>guide<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的Java代码中，我们使用了访问者设计模式来实现旅行团游览大城市的场景。其中，游客（Tourist）和导游（Guide）是具体的访问者，博物馆（Museum）、公园（Park）、购物中心（ShoppingMall）是具体的元素。City是对象结构，用于存储所有景点，并接受访问者的访问。</p><p>在测试部分，我们创建了一个City对象，并向其中添加了不同的景点。然后分别用游客和导游进行游览，观察他们在每个景点上执行的不同访问操作。</p><p>这样，我们就成功地使用访问者设计模式来模拟了旅行团游览大城市的场景。该设计模式可以使得景点的结构保持稳定，同时旅行团成员可以根据自己的类型执行不同的访问行为，而无需改变景点的代码。</p><hr><p>访问者模式在现实世界中有很多应用场景，其中一个典型的例子是网站数据统计。假设我们有一个网站，网站上有不同类型的页面（例如首页、文章页、产品页等），而我们希望能够统计每种类型页面的访问量。</p><p>下面是一个用Java语言实现网站数据统计的访问者模式示例代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 访问者接口</span>
<span class="token keyword">interface</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">HomePage</span> homePage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">ArticlePage</span> articlePage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">ProductPage</span> productPage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体访问者 - 网站数据统计</span>
<span class="token keyword">class</span> <span class="token class-name">WebsiteStatsVisitor</span> <span class="token keyword">implements</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> homePageCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> articlePageCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> productPageCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">HomePage</span> homePage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        homePageCount<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">ArticlePage</span> articlePage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        articlePageCount<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">ProductPage</span> productPage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        productPageCount<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">displayStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Home Page Count: &quot;</span> <span class="token operator">+</span> homePageCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Article Page Count: &quot;</span> <span class="token operator">+</span> articlePageCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Product Page Count: &quot;</span> <span class="token operator">+</span> productPageCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 元素接口</span>
<span class="token keyword">interface</span> <span class="token class-name">Page</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Visitor</span> visitor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体元素 - 首页</span>
<span class="token keyword">class</span> <span class="token class-name">HomePage</span> <span class="token keyword">implements</span> <span class="token class-name">Page</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Visitor</span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体元素 - 文章页</span>
<span class="token keyword">class</span> <span class="token class-name">ArticlePage</span> <span class="token keyword">implements</span> <span class="token class-name">Page</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Visitor</span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体元素 - 产品页</span>
<span class="token keyword">class</span> <span class="token class-name">ProductPage</span> <span class="token keyword">implements</span> <span class="token class-name">Page</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Visitor</span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 对象结构 - 网站</span>
<span class="token keyword">class</span> <span class="token class-name">Website</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Page</span><span class="token punctuation">&gt;</span></span> pages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPage</span><span class="token punctuation">(</span><span class="token class-name">Page</span> page<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Visitor</span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Page</span> page <span class="token operator">:</span> pages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            page<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>visitor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 测试</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Website</span> website <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Website</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        website<span class="token punctuation">.</span><span class="token function">addPage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        website<span class="token punctuation">.</span><span class="token function">addPage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArticlePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        website<span class="token punctuation">.</span><span class="token function">addPage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProductPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        website<span class="token punctuation">.</span><span class="token function">addPage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArticlePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        website<span class="token punctuation">.</span><span class="token function">addPage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Visitor</span> websiteStatsVisitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebsiteStatsVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        website<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>websiteStatsVisitor<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">WebsiteStatsVisitor</span><span class="token punctuation">)</span> websiteStatsVisitor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">displayStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们创建了一个网站，并向网站中添加了不同类型的页面（首页、文章页、产品页）。然后，我们创建了一个用于统计网站数据的访问者<code>WebsiteStatsVisitor</code>，它实现了访问者接口。当访问者访问各种页面时，会根据页面类型进行相应的计数。</p><p>在测试部分，我们模拟了一些页面的访问，并最终显示了每种类型页面的访问次数。</p><p>这个例子中，访问者模式将网站数据统计与网站的页面结构解耦，使得我们可以方便地新增其他的访问者来处理不同的操作，同时也能很容易地增加新的页面类型，而不需要修改已有的代码。这展示了访问者模式在真实业务场景中的应用。</p><h3 id="_6、总结-1" tabindex="-1"><a class="header-anchor" href="#_6、总结-1" aria-hidden="true">#</a> 6、总结</h3><p><strong>优点：</strong></p><ul><li>可以在不修改现有类的情况下，增加新的操作和功能。</li><li>将数据结构和操作分离，使得扩展新功能更加灵活。</li></ul><p><strong>缺点：</strong></p><ul><li>增加了访问者类和元素类的数量，增加了系统复杂性。</li><li>当元素类个数较少且变化不大时，访问者模式可能会显得过于繁琐。</li></ul><p><strong>应用建议：</strong></p><p>访问者模式适用于需要在不改变数据结构的情况下，对数据结构中的元素进行操作的场景。它能够将不同的操作封装在具体的访问者中，从而实现对元素的功能扩展。但在使用时，应该根据具体情况权衡利弊，避免过度设计，保持代码的简洁和可维护性。</p><h2 id="八、备忘录设计模式" tabindex="-1"><a class="header-anchor" href="#八、备忘录设计模式" aria-hidden="true">#</a> 八、备忘录设计模式</h2><h3 id="_1、介绍-7" tabindex="-1"><a class="header-anchor" href="#_1、介绍-7" aria-hidden="true">#</a> 1、介绍</h3><p><strong>备忘录设计模式（Memento Design Pattern）<strong>是一种行为型设计模式，它允许在</strong>不破坏封装性的前提下，捕获一个对象的内部状态，并在之后恢复该状态</strong>。这样，对象在后续的操作中可以回到之前的状态，提供了一种可撤销和恢复操作的机制。</p><blockquote><p><strong>补充知识：</strong></p></blockquote><p>&quot;undo&quot;, &quot;redo&quot;, 和 &quot;todo&quot; 是在软件开发中常见的术语，它们与备忘录设计模式有相关性。</p><ol><li><p><strong>Undo（撤销）</strong>：<br> 撤销是指在执行一个操作后，可以回到之前的状态。这意味着我们可以撤销前一步或多步操作，返回到过去的状态。例如，在文本编辑器中，当我们执行了一系列编辑操作，如果需要取消之前的某些操作，就可以使用撤销功能。</p></li><li><p><strong>Redo（重做）</strong>：<br> 重做是指在执行了撤销操作后，可以再次执行这些被撤销的操作，恢复到之前的状态。例如，在文本编辑器中，如果我们执行了撤销操作，但之后发现撤销的部分是错误的，就可以使用重做功能重新执行之前的操作。</p></li><li><p><strong>Todo（待办事项）</strong>：<br> &quot;Todo&quot; 是 &quot;to do&quot; 的缩写，指待办事项列表。在软件开发中，特别是在项目管理或任务追踪中，我们通常会创建一个待办事项列表，用于记录未完成的任务、功能或问题。这样的列表帮助团队成员了解尚未完成的工作，并能够跟踪进度。</p></li></ol><p>这些术语与备忘录设计模式的关系在于，&quot;undo&quot; 和 &quot;redo&quot; 是备忘录设计模式的实际应用场景。备忘录模式允许我们捕获对象的状态并在后续需要时恢复，从而实现了撤销和重做的功能。而 &quot;todo&quot; 列表则是一个待办事项列表，虽然与备忘录模式没有直接关联，但在软件开发中与项目管理密切相关。</p><h3 id="_2、核心思想-7" tabindex="-1"><a class="header-anchor" href="#_2、核心思想-7" aria-hidden="true">#</a> 2、核心思想</h3><p>备忘录设计模式的核心思想是：</p><ul><li>将对象的状态保存在一个备忘录对象中</li><li>通过在原对象和备忘录对象之间建立关联</li><li>可以在之后根据备忘录对象恢复原对象的状态。</li></ul><p><strong>保存 ➡️ 恢复</strong></p><h3 id="_3、组成和基本流程-7" tabindex="-1"><a class="header-anchor" href="#_3、组成和基本流程-7" aria-hidden="true">#</a> 3、组成和基本流程</h3><blockquote><p><strong>组成：</strong></p></blockquote><ol><li><strong>Originator（发起人）</strong>：拥有需要保存和恢复状态的对象，并负责创建备忘录对象和从备忘录对象中恢复状态。</li><li><strong>Memento（备忘录）</strong>：用于存储Originator对象的内部状态，并提供给Originator进行恢复操作的接口。</li><li><strong>Caretaker（负责人）</strong>：负责保存备忘录对象，但不对备忘录对象的内容进行操作。主要作用是防止Originator以外的对象访问备忘录。</li></ol><blockquote><p><strong>基本流程：</strong></p></blockquote><ol><li>Originator通过创建备忘录对象将自身状态存储在备忘录中。</li><li>Originator可以在后续的操作中根据备忘录对象来恢复自身状态。</li></ol><blockquote><p><strong>一个基本案例：</strong></p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 备忘录类</span>
<span class="token keyword">class</span> <span class="token class-name">Memento</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> state<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Memento</span><span class="token punctuation">(</span><span class="token class-name">String</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> state<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 发起人类</span>
<span class="token keyword">class</span> <span class="token class-name">Originator</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> state<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">String</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> state<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Memento</span> <span class="token function">saveStateToMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Memento</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token class-name">Memento</span> memento<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        state <span class="token operator">=</span> memento<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 负责人类</span>
<span class="token keyword">class</span> <span class="token class-name">Caretaker</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Memento</span><span class="token punctuation">&gt;</span></span> mementos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveMemento</span><span class="token punctuation">(</span><span class="token class-name">Memento</span> memento<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mementos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>memento<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Memento</span> <span class="token function">getMemento</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> mementos<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Originator</span> originator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Originator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Caretaker</span> caretaker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Caretaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 设置Originator的状态并保存到备忘录</span>
        originator<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">&quot;State 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        caretaker<span class="token punctuation">.</span><span class="token function">saveMemento</span><span class="token punctuation">(</span>originator<span class="token punctuation">.</span><span class="token function">saveStateToMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 修改Originator的状态并保存到备忘录</span>
        originator<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">&quot;State 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        caretaker<span class="token punctuation">.</span><span class="token function">saveMemento</span><span class="token punctuation">(</span>originator<span class="token punctuation">.</span><span class="token function">saveStateToMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 恢复Originator的状态到之前的备忘录</span>
        originator<span class="token punctuation">.</span><span class="token function">undo</span><span class="token punctuation">(</span>caretaker<span class="token punctuation">.</span><span class="token function">getMemento</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Current State: &quot;</span> <span class="token operator">+</span> originator<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 再次恢复Originator的状态到之前的备忘录</span>
        originator<span class="token punctuation">.</span><span class="token function">undo</span><span class="token punctuation">(</span>caretaker<span class="token punctuation">.</span><span class="token function">getMemento</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Current State: &quot;</span> <span class="token operator">+</span> originator<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们使用了一个List来保存多个备忘录，然后通过指定备忘录的索引来恢复到相应的状态。运行这段代码将得到正确的输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Current State: State 1
Current State: State 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、使用场景和具体案例-6" tabindex="-1"><a class="header-anchor" href="#_4、使用场景和具体案例-6" aria-hidden="true">#</a> 4、使用场景和具体案例</h3><ul><li>需要实现撤销和恢复功能，让对象能够回到之前的状态。</li><li>需要保存对象状态的历史记录，以便可以在需要时进行查看或恢复。</li></ul><p>下面以一个文本编辑器为例来演示备忘录设计模式的应用。 假设我们有一个简单的文本编辑器，支持输入文本、撤销和重做操作。在这个场景中，我们可以使用备忘录设计模式来实现撤销和重做功能。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 备忘录类 - 文本状态</span>
<span class="token keyword">class</span> <span class="token class-name">TextMemento</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TextMemento</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> text<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 发起人类 - 文本编辑器</span>
<span class="token keyword">class</span> <span class="token class-name">TextEditor</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">History</span> history<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TextEditor</span><span class="token punctuation">(</span><span class="token class-name">History</span> history<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>history <span class="token operator">=</span> history<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> text<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextMemento</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TextMemento</span> memento <span class="token operator">=</span> history<span class="token punctuation">.</span><span class="token function">popLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>memento <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">restore</span><span class="token punctuation">(</span>memento<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">restore</span><span class="token punctuation">(</span><span class="token class-name">TextMemento</span> memento<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        text <span class="token operator">=</span> memento<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 负责人类 - 历史记录管理</span>
<span class="token keyword">class</span> <span class="token class-name">History</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TextMemento</span><span class="token punctuation">&gt;</span></span> mementos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">TextMemento</span> memento<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mementos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>memento<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">TextMemento</span> <span class="token function">popLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mementos<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> mementos<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">History</span> history <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">History</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TextEditor</span> editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextEditor</span><span class="token punctuation">(</span>history<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 输入第一次文本并保存到历史记录</span>
        editor<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;1 input Current Text: &quot;</span> <span class="token operator">+</span> editor<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        editor<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 修改文本并保存到历史记录</span>
        editor<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world! Have a nice day!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;2 input Current Text: &quot;</span> <span class="token operator">+</span> editor<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        editor<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 输入第二次文本并保存到历史记录</span>
        editor<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;Goodbye, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;3 input Current Text: &quot;</span> <span class="token operator">+</span> editor<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        editor<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 撤销到之前的状态</span>
        editor<span class="token punctuation">.</span><span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;1 return input Current Text: &quot;</span> <span class="token operator">+</span> editor<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 再次撤销到之前的状态</span>
        editor<span class="token punctuation">.</span><span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;2 return Current Text: &quot;</span> <span class="token operator">+</span> editor<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token number">1</span> input <span class="token keyword">Current</span> <span class="token keyword">Text</span>: Hello<span class="token punctuation">,</span> world<span class="token operator">!</span>
<span class="token number">2</span> input <span class="token keyword">Current</span> <span class="token keyword">Text</span>: Hello<span class="token punctuation">,</span> world<span class="token operator">!</span> Have a nice <span class="token keyword">day</span><span class="token operator">!</span>
<span class="token number">3</span> input <span class="token keyword">Current</span> <span class="token keyword">Text</span>: Goodbye<span class="token punctuation">,</span> world<span class="token operator">!</span>
<span class="token number">1</span> <span class="token keyword">return</span> input <span class="token keyword">Current</span> <span class="token keyword">Text</span>: Goodbye<span class="token punctuation">,</span> world<span class="token operator">!</span>
<span class="token number">2</span> <span class="token keyword">return</span> <span class="token keyword">Current</span> <span class="token keyword">Text</span>: Hello<span class="token punctuation">,</span> world<span class="token operator">!</span> Have a nice <span class="token keyword">day</span><span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、总结-4" tabindex="-1"><a class="header-anchor" href="#_5、总结-4" aria-hidden="true">#</a> 5、总结</h3><p><strong>优点：</strong></p><ul><li>提供了可撤销和恢复状态的机制，增加了系统的灵活性和可维护性。</li><li>将状态的保存和恢复逻辑封装在备忘录对象中，不影响Originator对象的封装性。</li></ul><p><strong>缺点：</strong></p><ul><li>如果备忘录对象过多或状态较大，可能会占用较大的内存空间。</li></ul><p>备忘录设计模式是一种功能强大的模式，适用于需要撤销和恢复操作的场景。合理地使用备忘录模式可以使系统更加灵活和可靠。</p><h2 id="九、命令设计模式" tabindex="-1"><a class="header-anchor" href="#九、命令设计模式" aria-hidden="true">#</a> 九、命令设计模式</h2><h3 id="_1、介绍-8" tabindex="-1"><a class="header-anchor" href="#_1、介绍-8" aria-hidden="true">#</a> 1、介绍</h3><p>命令设计模式是一种行为型设计模式，它允许将请求或操作封装为一个对象，从而使得我们可以将不同的请求参数化，延迟请求的执行，或者将请求放入队列中进行排队处理。通过使用命令模式，我们可以实现解耦请求的发送者和接收者，从而增加系统的灵活性和可扩展性。</p><h3 id="_2、核心思想-8" tabindex="-1"><a class="header-anchor" href="#_2、核心思想-8" aria-hidden="true">#</a> 2、核心思想</h3><p>命令设计模式的核心思想是通过将请求封装成一个对象，使得请求的发送者和接收者解耦。具体来说，它包含以下几个关键组件：</p><ul><li><strong>Command（命令）</strong>：声明了执行操作的接口，通常包含一个execute方法，用于执行具体的命令。</li><li><strong>ConcreteCommand（具体命令）</strong>：实现了Command接口，持有一个接收者对象，并在execute方法中调用接收者的相应操作。</li><li><strong>Receiver（接收者）</strong>：负责执行具体操作的对象。</li><li><strong>Invoker（调用者）</strong>：持有一个命令对象，并在需要执行命令时调用命令的execute方法。</li><li><strong>Client（客户端）</strong>：创建具体命令对象并设置其接收者，将命令对象传递给调用者。</li></ul><h3 id="_3、组成和基本流程-8" tabindex="-1"><a class="header-anchor" href="#_3、组成和基本流程-8" aria-hidden="true">#</a> 3、组成和基本流程</h3><ul><li>组成： <ul><li>Command：定义命令接口，包含execute方法。</li><li>ConcreteCommand：实现Command接口，持有Receiver对象，执行具体命令。</li><li>Receiver：负责执行实际操作。</li><li>Invoker：持有Command对象，在需要执行命令时调用Command的execute方法。</li><li>Client：创建具体的Command对象并设置其接收者，传递给Invoker。</li></ul></li><li>基本流程： <ol><li>客户端创建具体的命令对象，并设置其接收者。</li><li>客户端创建调用者对象，并将命令对象传递给调用者。</li><li>调用者在需要执行命令时，调用命令对象的execute方法。</li><li>命令对象调用接收者的具体操作来完成命令的执行。</li></ol></li></ul><p>下面是一个简单的命令设计模式的例子，以一个遥控器控制电灯为例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Command（命令）接口</span>
<span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// ConcreteCommand（具体命令）：控制电灯开启的命令</span>
<span class="token keyword">class</span> <span class="token class-name">LightOnCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Light</span> light<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">LightOnCommand</span><span class="token punctuation">(</span><span class="token class-name">Light</span> light<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        light<span class="token punctuation">.</span><span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// ConcreteCommand（具体命令）：控制电灯关闭的命令</span>
<span class="token keyword">class</span> <span class="token class-name">LightOffCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Light</span> light<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">LightOffCommand</span><span class="token punctuation">(</span><span class="token class-name">Light</span> light<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        light<span class="token punctuation">.</span><span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Receiver（接收者）：电灯类</span>
<span class="token keyword">class</span> <span class="token class-name">Light</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Light is ON&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Light is OFF&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Invoker（调用者）：遥控器类</span>
<span class="token keyword">class</span> <span class="token class-name">RemoteControl</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Command</span> command<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token class-name">Command</span> command<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>command <span class="token operator">=</span> command<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pressButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建电灯和对应的命令对象</span>
        <span class="token class-name">Light</span> light <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Light</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Command</span> lightOnCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightOnCommand</span><span class="token punctuation">(</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Command</span> lightOffCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightOffCommand</span><span class="token punctuation">(</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建遥控器并设置命令</span>
        <span class="token class-name">RemoteControl</span> remoteControl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        remoteControl<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span>lightOnCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 按下按钮，执行命令</span>
        remoteControl<span class="token punctuation">.</span><span class="token function">pressButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 更改命令为关闭电灯，并再次按下按钮，执行命令</span>
        remoteControl<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span>lightOffCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>
        remoteControl<span class="token punctuation">.</span><span class="token function">pressButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们实现了一个简单的遥控器控制电灯的场景。其中，Command接口定义了执行命令的方法<code>execute()</code>，ConcreteCommand类LightOnCommand和LightOffCommand分别用于控制电灯开启和关闭。Receiver类Light表示电灯，它具体执行开启和关闭操作。而Invoker类RemoteControl持有Command对象，在需要执行命令时调用其execute方法。</p><p>通过命令设计模式，我们可以轻松地添加新的命令和接收者，实现不同的功能，并且可以支持撤销和重做操作。这样，我们可以将请求的发送者和接收者解耦，增加系统的灵活性和可扩展性。</p><h3 id="_4、使用场景和具体案例-7" tabindex="-1"><a class="header-anchor" href="#_4、使用场景和具体案例-7" aria-hidden="true">#</a> 4、使用场景和具体案例</h3><p>命令设计模式适用于以下场景：</p><ul><li>需要将请求的发送者和接收者解耦，使得系统更加灵活和可扩展。</li><li>需要支持请求的撤销、重做和排队等功能。</li><li>需要将一系列操作参数化，以便在不同的上下文中执行相似的请求。</li></ul><p>当结合真实业务场景时，命令设计模式可以用于实现购物车系统中的&quot;添加商品到购物车&quot;和&quot;从购物车移除商品&quot;等功能。我们来看看如何在Java中实现这个例子：</p><p>好的，我会将所有的代码整合到一个代码块内，只保留 <code>Client</code> 类为 <code>public</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Command接口</span>
<span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 添加商品命令类</span>
<span class="token keyword">class</span> <span class="token class-name">AddItemCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">ShoppingCart</span> cart<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> item<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">AddItemCommand</span><span class="token punctuation">(</span><span class="token class-name">ShoppingCart</span> cart<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cart <span class="token operator">=</span> cart<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cart<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 移除商品命令类</span>
<span class="token keyword">class</span> <span class="token class-name">RemoveItemCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">ShoppingCart</span> cart<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> item<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">RemoveItemCommand</span><span class="token punctuation">(</span><span class="token class-name">ShoppingCart</span> cart<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cart <span class="token operator">=</span> cart<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cart<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 购物车类</span>
<span class="token keyword">class</span> <span class="token class-name">ShoppingCart</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> items<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ShoppingCart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token class-name">String</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item <span class="token operator">+</span> <span class="token string">&quot; 已添加到购物车&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token class-name">String</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>items<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            items<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item <span class="token operator">+</span> <span class="token string">&quot; 已从购物车移除&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item <span class="token operator">+</span> <span class="token string">&quot; 不在购物车中&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 客户端类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建购物车对象</span>
        <span class="token class-name">ShoppingCart</span> cart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShoppingCart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建添加商品和移除商品的命令</span>
        <span class="token class-name">Command</span> addItemCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AddItemCommand</span><span class="token punctuation">(</span>cart<span class="token punctuation">,</span> <span class="token string">&quot;商品A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Command</span> removeItemCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoveItemCommand</span><span class="token punctuation">(</span>cart<span class="token punctuation">,</span> <span class="token string">&quot;商品B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 执行命令</span>
        addItemCommand<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        removeItemCommand<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个代码块完整地展示了如何使用命令设计模式来实现购物车系统的功能，并且保持了结构的清晰性。</p><h3 id="_5、总结-5" tabindex="-1"><a class="header-anchor" href="#_5、总结-5" aria-hidden="true">#</a> 5、总结</h3><p>命令设计模式是一种非常有用的设计模式，它可以帮助我们实现请求的封装和参数化，从而提高系统的灵活性和可扩展性。使用命令模式，我们可以将请求的发送者和接收者解耦，使得系统更加易于维护和扩展。虽然它增加了一些类的复杂性，但它带来的好处远远超过了这些额外的开销。</p><p><strong>优点</strong>：</p><ul><li>解耦请求的发送者和接收者，提高系统的灵活性和可扩展性。</li><li>支持请求的撤销、重做和排队等功能，增加系统的功能性。</li><li>可以将一系列操作参数化，实现更加灵活的命令组合。</li></ul><p><strong>缺点</strong>：</p><ul><li>可能会引入过多的具体命令类，增加系统的复杂性。</li></ul><p>在设计和实现时，我们应该注意将命令设计模式与其他设计模式结合使用，以便在特定场景中获得更好的效果。同时，合理地使用继承和组合等技术，可以减少命令模式的复杂性，使得系统更加易于维护和扩展。</p><h3 id="_6、和策略设计模式比较" tabindex="-1"><a class="header-anchor" href="#_6、和策略设计模式比较" aria-hidden="true">#</a> 6、和策略设计模式比较</h3><p>命令设计模式（Command Pattern）关注的是将请求（命令）封装成一个对象，从而允许您参数化客户端与接收者之间的关系。它主要用于实现撤销/重做、队列请求、日志记录等功能。在命令模式中，客户端和接收者是解耦的，客户端不需要知道命令是如何被执行的，只需要调用命令对象的方法即可。</p><p>策略设计模式（Strategy Pattern）关注的是定义一系列算法或行为，将它们封装成独立的策略类，并使这些策略类可以相互替换。这样可以让客户端在运行时动态选择算法，而不需要修改客户端代码。策略模式主要用于在不同算法或行为之间进行灵活切换，以实现不同的业务逻辑。</p><p>主要区别如下：</p><ol><li><p><strong>关注点不同</strong>：</p><ul><li>命令设计模式关注的是将请求封装成对象，以支持请求的参数化和解耦客户端与接收者。</li><li>策略设计模式关注的是封装不同的算法或行为，并使得它们可以互相替换，从而动态地改变对象的行为。</li></ul></li><li><p><strong>角色不同</strong>：</p><ul><li>命令模式的核心角色是命令（Command）对象、调用者（Invoker）和接收者（Receiver）。</li><li>策略模式的核心角色是策略（Strategy）接口、具体策略（ConcreteStrategy）类和上下文（Context）。</li></ul></li><li><p><strong>应用场景不同</strong>：</p><ul><li>命令模式适用于需要将请求封装为对象，支持撤销/重做、队列请求、日志记录等场景。</li><li>策略模式适用于在运行时动态选择算法或行为的场景，以实现不同的业务逻辑。</li></ul></li></ol><p>虽然它们有相似之处，但根据不同的需求和应用场景，选择使用命令模式或策略模式可以更好地组织和设计代码。</p><h2 id="十、解释器设计模式" tabindex="-1"><a class="header-anchor" href="#十、解释器设计模式" aria-hidden="true">#</a> 十、解释器设计模式</h2><h3 id="_1、介绍-9" tabindex="-1"><a class="header-anchor" href="#_1、介绍-9" aria-hidden="true">#</a> 1、介绍</h3><p><strong>解释器设计模式</strong>（Interpreter Pattern）是一种行为型设计模式，属于GOF设计模式中的一员。它通过定义语言的文法表示，以及<strong>解释预定义的表达式</strong>，来实现对特定问题领域的解释和处理。</p><h3 id="_2、核心思想-9" tabindex="-1"><a class="header-anchor" href="#_2、核心思想-9" aria-hidden="true">#</a> 2、核心思想</h3><p>解释器设计模式的核心思想是创建一个解释器，用于解释特定问题领域的表达式和语句。它将每个文法规则表示为一个类，并定义解释方法，以便能够解释和处理特定的语法结构。</p><h3 id="_3、组成和基本流程-9" tabindex="-1"><a class="header-anchor" href="#_3、组成和基本流程-9" aria-hidden="true">#</a> 3、组成和基本流程</h3><blockquote><p>解释器设计模式的组成主要包括以下几个元素：</p></blockquote><ol><li><strong>抽象表达式（Abstract Expression）</strong>：定义解释器的接口，包含一个解释方法 <code>interpret()</code>，所有具体表达式都必须实现该接口。</li><li><strong>终结符表达式（Terminal Expression）</strong>：表示语法规则中的终结符，即不再包含其他表达式的表达式。它实现了抽象表达式的解释方法，并处理表达式的终结符部分。</li><li><strong>非终结符表达式（Non-terminal Expression）</strong>：表示语法规则中的非终结符，即包含其他表达式的表达式。它实现了抽象表达式的解释方法，并处理表达式的非终结符部分。</li></ol><blockquote><p>解释器设计模式的基本流程如下：</p></blockquote><ol><li>客户端构建语法树（由多个终结符表达式和非终结符表达式组成）。</li><li>客户端调用解释器的解释方法，对语法树进行解释。</li></ol><p>我们将实现一个简单的数学表达式求值器，以演示解释器设计模式的应用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 抽象表达式</span>
<span class="token keyword">interface</span> <span class="token class-name">Expression</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 终结符表达式</span>
<span class="token keyword">class</span> <span class="token class-name">NumberExpression</span> <span class="token keyword">implements</span> <span class="token class-name">Expression</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">NumberExpression</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> number<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> number<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 非终结符表达式 - 加法</span>
<span class="token keyword">class</span> <span class="token class-name">AddExpression</span> <span class="token keyword">implements</span> <span class="token class-name">Expression</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Expression</span> left<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Expression</span> right<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">AddExpression</span><span class="token punctuation">(</span><span class="token class-name">Expression</span> left<span class="token punctuation">,</span> <span class="token class-name">Expression</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> left<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> right<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 非终结符表达式 - 减法</span>
<span class="token keyword">class</span> <span class="token class-name">SubtractExpression</span> <span class="token keyword">implements</span> <span class="token class-name">Expression</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Expression</span> left<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Expression</span> right<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SubtractExpression</span><span class="token punctuation">(</span><span class="token class-name">Expression</span> left<span class="token punctuation">,</span> <span class="token class-name">Expression</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> left<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> right<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 构建数学表达式： 7 + (10 - 3)</span>
        <span class="token class-name">Expression</span> left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NumberExpression</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Expression</span> right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubtractExpression</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NumberExpression</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NumberExpression</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Expression</span> expression <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AddExpression</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 计算并输出结果</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;计算结果: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：计算结果: 14</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、使用场景和具体案例-8" tabindex="-1"><a class="header-anchor" href="#_4、使用场景和具体案例-8" aria-hidden="true">#</a> 4、使用场景和具体案例</h3><p>解释器设计模式适用于以下场景：</p><ul><li>当有一个语言需要解释执行，且该语言的文法规则相对稳定，可以使用解释器模式来解释和处理语法规则。</li><li>当需要构建一个可以灵活配置的语法树，并且能够支持特定领域的解释和处理。</li></ul><p>当结合真实业务场景时，解释器设计模式可以用于处理自定义的查询语言或规则引擎，从而实现对特定领域的解释和处理。一个常见的例子是实现一个简单的规则引擎，用于根据一组规则对输入数据进行评估和决策。</p><p>在这个例子中，我们将实现一个简单的规则引擎，用于根据用户输入的条件，对输入数据进行评估。我们将定义一些基本的规则，然后用户可以输入规则条件，规则引擎将根据这些条件对输入数据进行判断和处理。</p><h4 id="_1、介绍-10" tabindex="-1"><a class="header-anchor" href="#_1、介绍-10" aria-hidden="true">#</a> 1、介绍</h4><p>我们将实现一个简单的规则引擎，用于根据用户输入的规则条件，对输入数据进行评估和处理。该规则引擎将支持基本的比较操作，例如大于、小于、等于等。</p><h4 id="_2、实现步骤" tabindex="-1"><a class="header-anchor" href="#_2、实现步骤" aria-hidden="true">#</a> 2、实现步骤</h4><ol><li><p><strong>定义抽象表达式（Expression）接口</strong>：该接口定义了解释器的解释方法 <code>interpret()</code>。</p></li><li><p><strong>实现终结符表达式（TerminalExpression）类</strong>：该类表示规则引擎中的终结符，即用户输入的条件，它实现了抽象表达式接口，并根据输入条件进行解释和评估。</p></li><li><p><strong>实现非终结符表达式（NonTerminalExpression）类</strong>：该类表示规则引擎中的非终结符，即基于多个终结符条件的组合条件，它实现了抽象表达式接口，并根据组合条件进行解释和评估。</p></li><li><p><strong>使用客户端（Client）类</strong>：客户端代码创建规则引擎对象，并输入规则条件和待评估的数据，然后调用规则引擎进行解释和处理。</p></li></ol><h5 id="_3、代码实现" tabindex="-1"><a class="header-anchor" href="#_3、代码实现" aria-hidden="true">#</a> 3、代码实现</h5><p>以下是Java实现的简单规则引擎：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 抽象表达式</span>
<span class="token keyword">interface</span> <span class="token class-name">Expression</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 终结符表达式 - 大于</span>
<span class="token keyword">class</span> <span class="token class-name">GreaterExpression</span> <span class="token keyword">implements</span> <span class="token class-name">Expression</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">GreaterExpression</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> data <span class="token operator">&gt;</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 终结符表达式 - 小于</span>
<span class="token keyword">class</span> <span class="token class-name">LessExpression</span> <span class="token keyword">implements</span> <span class="token class-name">Expression</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">LessExpression</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> data <span class="token operator">&lt;</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 非终结符表达式 - And</span>
<span class="token keyword">class</span> <span class="token class-name">AndExpression</span> <span class="token keyword">implements</span> <span class="token class-name">Expression</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Expression</span> expr1<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Expression</span> expr2<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">AndExpression</span><span class="token punctuation">(</span><span class="token class-name">Expression</span> expr1<span class="token punctuation">,</span> <span class="token class-name">Expression</span> expr2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>expr1 <span class="token operator">=</span> expr1<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>expr2 <span class="token operator">=</span> expr2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> expr1<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> expr2<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 非终结符表达式 - Or</span>
<span class="token keyword">class</span> <span class="token class-name">OrExpression</span> <span class="token keyword">implements</span> <span class="token class-name">Expression</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Expression</span> expr1<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Expression</span> expr2<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">OrExpression</span><span class="token punctuation">(</span><span class="token class-name">Expression</span> expr1<span class="token punctuation">,</span> <span class="token class-name">Expression</span> expr2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>expr1 <span class="token operator">=</span> expr1<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>expr2 <span class="token operator">=</span> expr2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> expr1<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">||</span> expr2<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 客户端</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建规则引擎</span>
        <span class="token class-name">Expression</span> rule1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AndExpression</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GreaterExpression</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LessExpression</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Expression</span> rule2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrExpression</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GreaterExpression</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LessExpression</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 输入数据</span>
        <span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>

        <span class="token comment">// 判断并输出结果</span>
        <span class="token keyword">boolean</span> result1 <span class="token operator">=</span> rule1<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> result2 <span class="token operator">=</span> rule2<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data <span class="token operator">+</span> <span class="token string">&quot; &gt; 10 and &quot;</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">&quot; &lt; 20: &quot;</span> <span class="token operator">+</span> result1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data <span class="token operator">+</span> <span class="token string">&quot; &gt; 30 or &quot;</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">&quot; &lt; 40: &quot;</span> <span class="token operator">+</span> result2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4、解析和注释" tabindex="-1"><a class="header-anchor" href="#_4、解析和注释" aria-hidden="true">#</a> 4、解析和注释</h5><p>上述代码实现了一个简单的规则引擎，其中 <code>Expression</code> 接口为抽象表达式，<code>GreaterExpression</code> 和 <code>LessExpression</code> 类为终结符表达式，表示大于和小于条件。<code>AndExpression</code> 和 <code>OrExpression</code> 类为非终结符表达式，用于组合多个终结符条件。</p><p>客户端代码创建了规则引擎对象 <code>rule1</code> 和 <code>rule2</code>，然后输入数据 <code>data</code> 进行条件判断，并输出结果。在这个例子中，我们对输入数据 <code>15</code> 进行了两个规则条件的判断，分别是大于10并且小于20的结果为 <code>true</code>，以及大于30或小于40的结果为 <code>false</code>。</p><p>通过这个简单的案例，我们可以看到解释器设计模式在实现规则引擎等特定领域的应用。它通过定义语言的文法表示，并解释预定义的表达式，使得我们能够根据不同的规则条件进行灵活的评估和处理。</p><h3 id="_5、总结-6" tabindex="-1"><a class="header-anchor" href="#_5、总结-6" aria-hidden="true">#</a> 5、总结</h3><p><strong>优点：</strong></p><ul><li>灵活性：解释器设计模式可以动态地修改、扩展语法规则，因为每个文法规则都对应一个表达式类。</li><li>可维护性：解释器模式将每个表达式规则封装在独立的类中，易于维护和理解。</li></ul><p><strong>缺点：</strong></p><ul><li>复杂性：对于复杂的文法规则，可能需要创建大量的表达式类，导致代码复杂化。</li></ul><p><strong>总结：</strong></p><p>解释器设计模式提供了一种灵活的方式来处理特定领域的语法规则和表达式。它适用于特定领域的解释执行，但对于复杂的文法规则，可能会导致代码复杂性增加。在使用时需要权衡其优缺点，并结合实际情况选择是否使用解释器模式来解决问题。</p><h2 id="十一、中介设计模式" tabindex="-1"><a class="header-anchor" href="#十一、中介设计模式" aria-hidden="true">#</a> 十一、中介设计模式</h2><h3 id="_1、介绍-11" tabindex="-1"><a class="header-anchor" href="#_1、介绍-11" aria-hidden="true">#</a> 1、介绍</h3><p><strong>中介设计模式</strong>（Mediator Pattern）是一种行为型设计模式，属于GOF设计模式中的一员。它<strong>通过引入中介者来降低多个对象之间的直接通信</strong>复杂性，从而提高对象之间的松耦合性。</p><h3 id="_2、核心思想-10" tabindex="-1"><a class="header-anchor" href="#_2、核心思想-10" aria-hidden="true">#</a> 2、核心思想</h3><p>中介设计模式的核心思想是引入一个中介者对象，用于协调多个相关对象之间的交互。多个对象不再直接相互通信，而是通过中介者对象进行消息传递，使得对象之间的通信更加灵活和可扩展。</p><h3 id="_3、组成和基本流程-10" tabindex="-1"><a class="header-anchor" href="#_3、组成和基本流程-10" aria-hidden="true">#</a> 3、组成和基本流程</h3><blockquote><p>中介设计模式的组成主要包括以下几个元素：</p></blockquote><ol><li><p><strong>中介者（Mediator）</strong>：定义一个接口用于与各个相关对象通信，它可以是接口或抽象类。</p></li><li><p><strong>具体中介者（Concrete Mediator）</strong>：实现中介者接口，负责协调各个相关对象的交互关系。</p></li><li><p><strong>相关对象（Colleague）</strong>：每个相关对象都知道中介者对象，并通过中介者来与其他相关对象通信。</p></li></ol><blockquote><p>中介设计模式的基本流程如下：</p></blockquote><ol><li>客户端创建中介者对象。</li><li>客户端创建相关对象，并将中介者对象传递给相关对象。</li><li>相关对象在需要与其他对象通信时，通过中介者对象进行消息传递。</li></ol><p>在下面这个简单的案例中，我们将实现一个简单的飞机交通管制系统，演示中介者设计模式的应用。飞机交通管制系统将处理多个飞机之间的通信和交互，确保它们在空中安全地航行。</p><h4 id="_1、介绍-12" tabindex="-1"><a class="header-anchor" href="#_1、介绍-12" aria-hidden="true">#</a> 1、介绍</h4><p>在飞机交通管制系统中，我们将实现一个中介者（TrafficMediator）接口，用于处理飞机之间的通信。每个飞机（Aircraft）都将参与交通管制系统，并通过中介者来与其他飞机通信，以避免碰撞和确保安全航行。</p><h4 id="_2、实现步骤-1" tabindex="-1"><a class="header-anchor" href="#_2、实现步骤-1" aria-hidden="true">#</a> 2、实现步骤</h4><ol><li><p><strong>定义中介者（TrafficMediator）接口</strong>：该接口定义了飞机之间的通信方法。</p></li><li><p><strong>实现具体的中介者类（AirTrafficController）</strong>：该类实现了中介者接口，并负责处理飞机之间的通信和交互。</p></li><li><p><strong>定义参与者（Aircraft）接口</strong>：该接口定义了飞机参与交通管制系统的方法。</p></li><li><p><strong>实现具体的参与者类（ConcreteAircraft）</strong>：该类实现了参与者接口，表示实际的飞机，可以发送和接收通信。</p></li></ol><h4 id="_3、代码实现-1" tabindex="-1"><a class="header-anchor" href="#_3、代码实现-1" aria-hidden="true">#</a> 3、代码实现</h4><p>以下是Java实现的简单飞机交通管制系统：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 中介者接口</span>
<span class="token keyword">interface</span> <span class="token class-name">TrafficMediator</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Aircraft</span> aircraft<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体的中介者类 - 空中交通管制</span>
<span class="token keyword">class</span> <span class="token class-name">AirTrafficController</span> <span class="token keyword">implements</span> <span class="token class-name">TrafficMediator</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Aircraft</span> aircraft<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ATC: &quot;</span> <span class="token operator">+</span> aircraft<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 发送消息: &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 参与者接口</span>
<span class="token keyword">interface</span> <span class="token class-name">Aircraft</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体的参与者类 - 飞机</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteAircraft</span> <span class="token keyword">implements</span> <span class="token class-name">Aircraft</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">TrafficMediator</span> mediator<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ConcreteAircraft</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">TrafficMediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mediator <span class="token operator">=</span> mediator<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; 发送消息: &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mediator<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; 收到消息: &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了测试代码，我们需要创建客户端代码来创建中介者和飞机对象，并模拟它们之间的通信。以下是一个简单的客户端代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建空中交通管制作为中介者</span>
        <span class="token class-name">TrafficMediator</span> atc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AirTrafficController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建飞机参与者</span>
        <span class="token class-name">Aircraft</span> aircraft1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteAircraft</span><span class="token punctuation">(</span><span class="token string">&quot;Flight-001&quot;</span><span class="token punctuation">,</span> atc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Aircraft</span> aircraft2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteAircraft</span><span class="token punctuation">(</span><span class="token string">&quot;Flight-002&quot;</span><span class="token punctuation">,</span> atc<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 飞机发送和接收消息</span>
        aircraft1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;请求降落许可。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        aircraft2<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;已收到，准备降落。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行上述客户端代码，输出结果如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>Flight<span class="token operator">-</span><span class="token number">001</span> 发送消息: 请求降落许可。
ATC: Flight<span class="token operator">-</span><span class="token number">001</span> 发送消息: 请求降落许可。
Flight<span class="token operator">-</span><span class="token number">002</span> 发送消息: 已收到，准备降落。
ATC: Flight<span class="token operator">-</span><span class="token number">002</span> 发送消息: 已收到，准备降落。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在输出结果中，我们可以看到飞机成功发送了消息，并且中介者（空中交通管制）也成功接收到了这些消息。中介者负责将消息传递给目标飞机，并打印相应的消息内容。</p><p>这个例子是一个简单的模拟，它演示了中介者设计模式的应用。在实际应用中，中介者模式可以用于处理更复杂的对象间通信和交互，以实现更灵活和解耦的系统设计。</p><h4 id="_4、解析和注释-1" tabindex="-1"><a class="header-anchor" href="#_4、解析和注释-1" aria-hidden="true">#</a> 4、解析和注释</h4><p>上述代码实现了一个简单的飞机交通管制系统，其中 <code>TrafficMediator</code> 接口为中介者，<code>AirTrafficController</code> 类为具体的中介者类，<code>Aircraft</code> 接口为参与者，<code>ConcreteAircraft</code> 类为具体的参与者类。</p><p>中介者模式的核心是 <code>TrafficMediator</code> 接口和 <code>AirTrafficController</code> 类。<code>AirTrafficController</code> 类实现了中介者接口的 <code>sendMessage()</code> 方法，用于接收消息并进行传递。<code>ConcreteAircraft</code> 类实现了参与者接口，表示飞机，可以发送消息并接收消息。</p><p>在客户端代码中，我们创建了一个空中交通管制作为中介者，并创建了两个飞机作为参与者。飞机可以通过发送消息来进行通信，中介者负责将消息传递给目标飞机。</p><p>通过这个简单的例子，我们可以看到中介者设计模式在实现飞机交通管制系统等复杂的对象间通信场景中的应用。它通过引入中介者来降低对象间的直接通信复杂性，从而提高系统的松耦合性和可扩展性。</p><h3 id="_4、使用场景和具体案例-9" tabindex="-1"><a class="header-anchor" href="#_4、使用场景和具体案例-9" aria-hidden="true">#</a> 4、使用场景和具体案例</h3><p>中介设计模式适用于以下场景：</p><ul><li>当多个对象之间存在复杂的关联关系，导致对象之间的通信和交互复杂且难以维护时，可以使用中介者模式来简化对象之间的通信。</li><li>当一个对象的行为依赖于其他多个对象时，可以引入中介者来减少对象之间的直接依赖，提高系统的灵活性和可扩展性。 <ul><li>在 Spring MVC 框架中，DispatcherServlet 可以看作是一种中介者模式的中介。</li></ul></li></ul><p>中介者设计模式在真实业务场景中经常用于处理复杂的对象间通信和交互关系。一个典型的例子是聊天应用程序，其中多个用户之间进行实时聊天，中介者设计模式可以用于管理用户之间的消息传递。</p><p>在这个例子中，我们将实现一个简单的聊天应用程序，其中有多个用户参与聊天，每个用户可以发送消息给其他用户，中介者将负责将消息传递给目标用户。</p><h4 id="_1、介绍-13" tabindex="-1"><a class="header-anchor" href="#_1、介绍-13" aria-hidden="true">#</a> 1、介绍</h4><p>在这个聊天应用程序中，我们将实现一个中介者（Mediator）接口，其中包含消息传递的方法。然后，我们将实现具体的中介者类 ChatRoom，用于实现消息传递逻辑。</p><h4 id="_2、实现步骤-2" tabindex="-1"><a class="header-anchor" href="#_2、实现步骤-2" aria-hidden="true">#</a> 2、实现步骤</h4><ol><li><p><strong>定义中介者（Mediator）接口</strong>：该接口定义了消息传递的方法。</p></li><li><p><strong>实现具体的中介者类（ChatRoom）</strong>：该类实现了中介者接口，并负责实际处理用户之间的消息传递逻辑。</p></li><li><p><strong>定义参与者（Participant）接口</strong>：该接口定义了用户参与聊天的方法。</p></li><li><p><strong>实现具体的参与者类（User）</strong>：该类实现了参与者接口，表示聊天应用中的用户，可以发送和接收消息。</p></li></ol><h4 id="_3、代码实现-2" tabindex="-1"><a class="header-anchor" href="#_3、代码实现-2" aria-hidden="true">#</a> 3、代码实现</h4><p>以下是Java实现的简单聊天应用程序：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 中介者接口</span>
<span class="token keyword">interface</span> <span class="token class-name">Mediator</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Participant</span> sender<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体的中介者类 - 聊天室</span>
<span class="token keyword">class</span> <span class="token class-name">ChatRoom</span> <span class="token keyword">implements</span> <span class="token class-name">Mediator</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Participant</span> sender<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sender<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 发送消息: &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 参与者接口</span>
<span class="token keyword">interface</span> <span class="token class-name">Participant</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体的参与者类 - 用户</span>
<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Participant</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Mediator</span> mediator<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mediator <span class="token operator">=</span> mediator<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; 发送消息: &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mediator<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; 收到消息: &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于中介者设计模式的简单案例，我们无法实际运行测试，因为它是一个示例代码，不涉及实际的交互或外部依赖。这个例子主要用于说明中介者设计模式的结构和实现，而不是实际运行和交互。</p><p>为了运行测试，我们需要创建客户端代码来创建中介者、参与者对象，并模拟它们之间的通信。以下是一个简单的客户端代码示例，用于展示中介者设计模式的运行测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建聊天室作为中介者</span>
        <span class="token class-name">Mediator</span> chatRoom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChatRoom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建用户参与者</span>
        <span class="token class-name">Participant</span> user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;User1&quot;</span><span class="token punctuation">,</span> chatRoom<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Participant</span> user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;User2&quot;</span><span class="token punctuation">,</span> chatRoom<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Participant</span> user3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;User3&quot;</span><span class="token punctuation">,</span> chatRoom<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 用户发送和接收消息</span>
        user1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, everyone!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user2<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;Hi, User1!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user3<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;Hey, there!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个客户端代码中，我们创建了一个聊天室作为中介者，然后创建了三个用户参与者。用户通过调用 <code>send()</code> 方法来发送消息，中介者将消息传递给其他用户，并调用 <code>receive()</code> 方法来接收消息。输出结果显示每个用户成功发送了消息，并且其他用户成功接收到了这些消息。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>User1 发送消息: Hello<span class="token punctuation">,</span> everyone<span class="token operator">!</span>
User2 发送消息: Hi<span class="token punctuation">,</span> User1<span class="token operator">!</span>
User3 发送消息: Hey<span class="token punctuation">,</span> there<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子是一个简单的模拟，它演示了中介者设计模式的应用。在实际应用中，中介者模式可以用于处理更复杂的对象间通信和交互，以实现更灵活和解耦的系统设计。</p><h3 id="_4、解析和注释-2" tabindex="-1"><a class="header-anchor" href="#_4、解析和注释-2" aria-hidden="true">#</a> 4、解析和注释</h3><p>上述代码实现了一个简单的聊天应用程序，其中 <code>Mediator</code> 接口为中介者，<code>ChatRoom</code> 类为具体的中介者类，<code>Participant</code> 接口为参与者，<code>User</code> 类为具体的参与者类。</p><p>中介者模式的核心是 <code>Mediator</code> 接口和 <code>ChatRoom</code> 类。<code>ChatRoom</code> 类实现了中介者接口的 <code>sendMessage()</code> 方法，用于接收消息并进行传递。<code>User</code> 类实现了参与者接口，表示聊天应用中的用户，可以发送消息并接收消息。</p><p>在客户端代码中，我们创建了一个聊天室作为中介者，并创建了两个用户作为参与者。用户可以通过发送消息来进行聊天，中介者负责将消息传递给目标用户。</p><p>通过这个简单的例子，我们可以看到中介者设计模式在实现聊天应用程序等复杂的对象间通信场景中的应用。它通过引入中介者来降低对象间的直接通信复杂性，从而提高系统的松耦合性和可扩展性。</p><h3 id="_5、总结-7" tabindex="-1"><a class="header-anchor" href="#_5、总结-7" aria-hidden="true">#</a> 5、总结</h3><p><strong>优点：</strong></p><ul><li><p>降低耦合：中介者设计模式通过引入中介者对象，将对象之间的直接通信转为通过中介者来进行，从而降低对象之间的耦合性。</p></li><li><p>简化通信：中介者模式可以简化多个对象之间的通信和交互，使得系统的结构更加清晰。</p></li></ul><p><strong>缺点：</strong></p><ul><li>中介者对象可能会变得复杂：随着系统中对象之间关联关系的增多，中介者对象可能变得复杂，导致中介者对象本身难以维护。</li></ul><p><strong>总结：</strong></p><p>中介设计模式是一种有助于降低对象之间直接通信复杂性的设计模式。它适用于需要简化对象之间通信关系的场景。在使用中介者模式时，需要注意中介者对象的复杂性，并权衡其优缺点，确保在特定场景下使用中介者模式能够带来实际的优势。</p><h3 id="_6、和观察者对比" tabindex="-1"><a class="header-anchor" href="#_6、和观察者对比" aria-hidden="true">#</a> 6、和观察者对比</h3><p>中介者设计模式和观察者设计模式是两种不同的设计模式，它们的关注点和应用场景有所不同。</p><p><strong>中介者设计模式</strong>：</p><ol><li><p><strong>关注点</strong>：中介者设计模式关注的是将多个对象之间的通信和交互逻辑集中处理，通过引入一个中介者对象，使得对象之间不需要直接相互通信，而是通过中介者进行通信。中介者模式旨在降低对象之间的耦合性，使得对象之间的通信更加灵活和解耦。</p></li><li><p><strong>适用场景</strong>：中介者设计模式适用于对象之间存在复杂的交互和通信关系的场景，当对象之间的通信逻辑过于复杂且耦合性高时，可以引入一个中介者对象来简化和集中通信逻辑。</p></li></ol><p><strong>观察者设计模式</strong>：</p><ol><li><p><strong>关注点</strong>：观察者设计模式关注的是对象之间的一对多依赖关系。当一个对象的状态发生变化时，所有依赖它的观察者对象都会得到通知并更新自己的状态。观察者模式旨在建立对象之间的松耦合关系，使得一个对象的变化可以通知到多个观察者对象。</p></li><li><p><strong>适用场景</strong>：观察者设计模式适用于一个对象的状态变化需要通知多个观察者对象的场景。当一个对象的变化需要影响到多个其他对象时，可以使用观察者模式来建立对象之间的依赖关系。</p></li></ol><p><strong>区别</strong>：</p><ol><li><p><strong>目的不同</strong>：中介者设计模式的目的是简化对象之间的通信和交互，降低耦合性，而观察者设计模式的目的是建立对象之间的依赖关系，使得一个对象的变化可以通知到多个观察者对象。</p></li><li><p><strong>对象关系不同</strong>：中介者设计模式中，对象之间的通信是通过中介者对象进行的，对象之间不存在直接的关联。而观察者设计模式中，对象之间存在一对多的依赖关系，观察者对象直接订阅和监听被观察对象的状态变化。</p></li><li><p><strong>侧重点不同</strong>：中介者设计模式侧重于集中处理对象之间的通信和交互逻辑，使得对象之间的通信更加简单和灵活。观察者设计模式侧重于建立对象之间的松耦合关系，使得一个对象的状态变化可以通知到多个观察者对象。</p></li></ol><p>虽然中介者设计模式和观察者设计模式有不同的关注点和应用场景，但它们都是用于实现对象之间的解耦和通信，从而提高系统的灵活性和可维护性。根据具体的业务需求和设计目标，选择合适的设计模式来组织和管理对象之间的交互关系是很重要的。</p>`,446);function i(u,k){return a(),t("div",null,[o,e(" more "),l])}const v=s(c,[["render",i],["__file","behavior.html.vue"]]);export{v as default};
