import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as i,c as u,b as k,f as r,w as a,d as n,a as e,e as s}from"./app-yOESM-4p.js";const d={},v=n("p",null,[n("strong",null,"创建型设计模式的核心就是给我们提供了一系列全新的创建对象的方式方法")],-1),m=e('<h1 id="创建型设计模式" tabindex="-1"><a class="header-anchor" href="#创建型设计模式" aria-hidden="true">#</a> 创建型设计模式</h1><p><mark>创建型设计模式：核心目的就是给我们提供了一系列全新的创建对象的方式方法</mark></p><h2 id="一、单例设计模式" tabindex="-1"><a class="header-anchor" href="#一、单例设计模式" aria-hidden="true">#</a> 一、单例设计模式</h2><h3 id="_1、介绍" tabindex="-1"><a class="header-anchor" href="#_1、介绍" aria-hidden="true">#</a> 1、介绍</h3><p>单例设计模式（Singleton Pattern）是一种创建型设计模式，它<strong>确保一个类只有一个实例，并提供一个全局访问点以供其他对象使用</strong>。单例模式<strong>常用于需要在整个系统中共享一个共享资源或管理共享状态的情况下</strong>。</p><h3 id="_2、核心思想" tabindex="-1"><a class="header-anchor" href="#_2、核心思想" aria-hidden="true">#</a> 2、核心思想</h3><p>单例设计模式的核心思想是确保一个类只有一个实例，并提供一个全局访问点来获取该实例。通过使用单例模式，可以控制对象的创建过程，并确保在整个系统中只存在一个实例，提供对该实例的全局访问。</p><h3 id="_3、组成和基本流程" tabindex="-1"><a class="header-anchor" href="#_3、组成和基本流程" aria-hidden="true">#</a> 3、组成和基本流程</h3><blockquote><p>单例设计模式通常由以下组成部分构成：</p></blockquote><ul><li><strong>单例类（Singleton Class）</strong>：表示只能有一个实例的类。该类负责创建自己的唯一实例，并提供对该实例的全局访问。</li><li><strong>全局访问点（Global Access Point）</strong>：提供对单例类实例的全局访问。其他对象可以通过该访问点获取单例类的实例。</li></ul><blockquote><p>单例设计模式的基本流程如下：</p></blockquote><ol><li>将类的构造函数设置为私有，以防止其他对象直接实例化该类。</li><li>在类内部创建一个私有静态成员变量，用于保存类的唯一实例。</li><li>提供一个公共的静态方法作为全局访问点，用于获取类的实例。在该方法内部，如果实例不存在，则创建一个新实例并返回；如果实例已存在，则直接返回现有实例。</li></ol><h3 id="_4、使用场景" tabindex="-1"><a class="header-anchor" href="#_4、使用场景" aria-hidden="true">#</a> 4、使用场景</h3><blockquote><p>单例设计模式适用于以下场景：</p></blockquote><ul><li>当需要在整个系统中共享一个共享资源或管理共享状态时 ➡️ Spring容器的单例</li><li>当某个对象只能有一个实例，而且需要对该实例进行严格的控制和管理时 ➡️ JDK中的Runtime类，该类封装了运行时的环境</li><li>当需要对资源进行集中管理，以便于协调和控制时 ➡️ Mybaits中的org.apache.ibatis.io.VFS使用到了单例模式</li></ul><blockquote><p>例如：</p></blockquote><ol><li>jdk中有一个类的实现是一个标准单例模式-&gt;Runtime类，该类封装了运行时的环境。每个 Java 应用程序都有一个 Runtime 类实例，使应用程序能够与其运行的环境相连接。 一般不能实例化一个Runtime对象，应用程序也不能创建自己的 Runtime 类实例，但可以通过 getRuntime 方法获取当前Runtime运行时对象的引用。</li><li>Mybaits中的org.apache.ibatis.io.VFS使用到了单例模式。VFS就是Virtual File System的意思，mybatis通过VFS来查找指定路径下的资源。查看VFS以及它的实现类，不难发现，VFS的角色就是对更“底层”的查找指定资源的方法的封装，将复杂的 “底层”操作封装到易于使用的高层模块中，方便使用者使用。</li></ol><h3 id="_5、具体案例" tabindex="-1"><a class="header-anchor" href="#_5、具体案例" aria-hidden="true">#</a> 5、具体案例</h3>',18),b=n("blockquote",null,[n("p",null,[n("strong",null,"单例设计模式-饿汉式：")])],-1),y=n("p",null,[s("饿汉式是一种"),n("strong",null,"简单直接"),s("的单例模式实现方式。**在类加载的时候就创建了唯一的实例对象，并在整个生命周期中保持不变。**因此，它也被称为“急切”创建实例的方式。")],-1),w=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"HgySingleton"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"HgySingleton"),s(),n("span",{class:"token constant"},"INSTANCE"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"HgySingleton"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"HgySingleton"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token class-name"},"HgySingleton"),s(),n("span",{class:"token function"},"getInstance"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token constant"},"INSTANCE"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=n("p",null,null,-1),f=n("blockquote",null,[n("p",null,[n("strong",null,"单例设计模式-懒汉式：")])],-1),h=n("p",null,[s("懒汉式是一种"),n("strong",null,"延迟实例化"),s("的方式，在第一次访问获取实例的时候才会创建对象。这种方式在实例创建之前没有额外的开销，但"),n("strong",null,"需要考虑多线程环境下的线程安全问题"),s("。")],-1),S=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"LazySingleton"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token class-name"},"LazySingleton"),s(" instance "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"LazySingleton"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token class-name"},"LazySingleton"),s(),n("span",{class:"token function"},"getInstance"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("instance "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            instance `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"LazySingleton"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" instance"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=n("p",null,null,-1),R=n("blockquote",null,[n("p",null,[n("strong",null,"单例设计模式-双重检查锁：")])],-1),x=n("p",null,"双重检查锁是对懒汉式的改进，通过在获取实例时进行双重检查，确保只在实例未创建时才进行同步操作。这样在多线程环境下可以保持高性能并且线程安全。",-1),_=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"DclSingleton"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"volatile"),s(),n("span",{class:"token class-name"},"DclSingleton"),s(),n("span",{class:"token constant"},"INSTANCE"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"DclSingleton"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token class-name"},"DclSingleton"),s(),n("span",{class:"token function"},"getInstance"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"INSTANCE"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"synchronized"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"DclSingleton"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"INSTANCE"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    `),n("span",{class:"token constant"},"INSTANCE"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"DclSingleton"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token constant"},"INSTANCE"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),P=n("p",null,null,-1),I=n("blockquote",null,[n("p",null,[n("strong",null,"单例设计模式-静态内部类：")])],-1),A=n("p",null,"静态内部类方式是一种延迟加载实例的方式，它利用了Java类加载机制中的静态内部类不会在外部类加载时被加载的特性。当第一次获取实例时，静态内部类才会被加载并创建实例。",-1),C=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"InnerSingleton"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"InnerSingleton"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token class-name"},"InnerSingleton"),s(),n("span",{class:"token function"},"getInstance"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token class-name"},"SingletonHolder"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"INSTANCE"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"SingletonHolder"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"InnerSingleton"),s(),n("span",{class:"token constant"},"INSTANCE"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"InnerSingleton"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=n("p",null,null,-1),B=n("blockquote",null,[n("p",null,[n("strong",null,"单例设计模式-枚举类：")])],-1),j=n("p",null,"枚举类方式是Java中最简洁、高效且线程安全的单例模式实现方式。枚举类的实例是在枚举常量被第一次访问时创建的，而且它天生就是线程安全的。",-1),E=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"EnumSingleton"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"EnumSingleton"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 私有构造函数"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token class-name"},"EnumSingleton"),s(),n("span",{class:"token function"},"getInstance"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token class-name"},"SingletonEnum"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"INSTANCE"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getInstance"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"enum"),s(),n("span",{class:"token class-name"},"SingletonEnum"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token constant"},"INSTANCE"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"EnumSingleton"),s(" instant"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token comment"},"// 在枚举常量中初始化单例实例"),s(`
        `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"SingletonEnum"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            instant `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"EnumSingleton"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`

        `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"EnumSingleton"),s(),n("span",{class:"token function"},"getInstance"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"return"),s(" instant"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F=n("p",null,[s("枚举可以抵挡常规的反射攻击是因为Java语言规范对枚举类进行了特殊处理。当使用反射尝试访问枚举类的私有构造函数时，会抛出"),n("code",null,"IllegalAccessException"),s("异常，阻止了对枚举类进行实例化的尝试。")],-1),N=n("p",null,[s("这种反射抵御是通过Java语言规范的设计来实现的。在枚举类中，构造函数被默认为私有的，不允许外部代码直接访问。当使用反射时，如果尝试通过"),n("code",null,"Constructor.newInstance()"),s("方法来调用枚举类的私有构造函数，Java会在内部检查是否为枚举类，并抛出异常。")],-1),D=n("p",null,"此外，枚举常量在枚举类被加载时就被实例化，并且是在枚举类初始化阶段完成的。这意味着在第一次访问枚举类时，所有的枚举常量都会被创建，而且无法再通过反射来创建新的枚举常量实例。",-1),T=n("p",null,"综上所述，由于枚举类的特殊处理和枚举常量的提前实例化，枚举可以有效地抵挡常规的反射攻击，确保枚举类的单例特性和唯一性。这也是为什么使用枚举实现单例模式是一种安全可靠的方式。然而，需要注意的是，反射仍然可以访问枚举类的其他成员变量和方法，只是无法通过反射创建新的枚举常量实例。",-1),O=n("p",null,null,-1),U=n("blockquote",null,[n("p",null,[n("strong",null,"单例设计模式-反射和序列化：")])],-1),M=n("p",null,"使用常规的单例模式实现可能会受到反射和序列化的影响而产生多个实例。为了防止这种情况，需要在单例类中做特殊处理，确保在使用反射和序列化时依然保持单例特性。",-1),z=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"ReflectSerializableSingleton"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"Serializable"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"volatile"),s(),n("span",{class:"token class-name"},"ReflectSerializableSingleton"),s(),n("span",{class:"token constant"},"INSTANCE"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"ReflectSerializableSingleton"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"INSTANCE"),s(),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"throw"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"RuntimeException"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"实例：【"'),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getClass"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token string"},'"】已经存在，该实例只允许实例化一次"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token class-name"},"ReflectSerializableSingleton"),s(),n("span",{class:"token function"},"getInstance"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"INSTANCE"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"synchronized"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ReflectSerializableSingleton"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"INSTANCE"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    `),n("span",{class:"token constant"},"INSTANCE"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ReflectSerializableSingleton"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token constant"},"INSTANCE"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token comment"},"// readResolve()方法可以用于替换从流中读取的对象，在进行反序列化时，会尝试执行readResolve方法，并将返回值作为反序列化的结果，而不会克隆一个新的实例，保证jvm中仅仅有一个实例存在"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Object"),s(),n("span",{class:"token function"},"readResolve"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" singleton"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),H=e(`<h3 id="_6、总结" tabindex="-1"><a class="header-anchor" href="#_6、总结" aria-hidden="true">#</a> 6、总结</h3><p>单例设计模式通过确保一个类只有一个实例，提供了全局访问点来获取该实例。它在需要共享资源或管理共享状态的情况下非常有用。使用单例模式可以控制对象的创建和访问，提供对实例的全局访问，并确保在整个系统中只有一个实例存在。</p><details class="hint-container details"><summary>单例设计模式的优点和缺点：</summary><blockquote><p>优点：</p></blockquote><ul><li>提供了对唯一实例的全局访问点，方便其他对象使用。</li><li>控制对象的创建过程，确保在整个系统中只存在一个实例。</li><li>提供了对共享资源和共享状态的集中管理。</li></ul><blockquote><p>缺点：</p></blockquote><ul><li>可能引入全局状态和全局访问点，增加了对象之间的耦合性。</li><li>可能导致单例类的职责过重，违反了单一职责原则。</li></ul><p>总体而言，单例设计模式在需要全局访问点和唯一实例的情况下非常有用。它提供了一种简单而有效的方式来管理共享资源和共享状态。然而，在使用单例模式时，需要权衡好全局状态的管理和对象职责的合理划分，以确保系统的可维护性和灵活性。</p></details><details class="hint-container details"><summary>单例存在的其它问题</summary><blockquote><p>单例存在的其它问题：</p></blockquote><ol><li><p><strong>无法支持面向对象编程</strong>：单例模式的构造方法被私有化，这导致无法将单例类作为其他类的父类，限制了继承和多态的特性。这意味着在面对未来的需求变化时，扩展性受到限制。如果需要创建类似但略有差异的单例，就需要重新创建一个相似且大部分功能相同的单例类，造成代码冗余。</p></li><li><p><strong>极难的横向扩展</strong>：单例模式只允许存在一个实例对象，如果未来需要创建更多实例以满足不同需求，就必须修改源代码。这违反了开闭原则，增加新的实例需要对现有代码进行修改，导致扩展困难。例如，在数据库连接池中，可能从一个连接变成需要多个连接。</p></li><li><p><strong>不同作用范围的单例</strong>：</p><ol><li>线程级别的单例：每个线程都拥有自己的单例实例，线程之间互不干扰。</li><li>容器范围的单例：在容器中管理单例实例，容器可以管理多个单例对象并控制其生命周期。</li><li>日志中的多例：在日志记录中，可能需要根据不同的上下文创建多个实例来记录不同的日志信息。</li></ol></li></ol><p>请注意，尽管单例模式存在一些缺点，但在某些情况下仍然是有用的设计模式。在使用单例模式时，需要仔细考虑其适用性和潜在的问题，并根据具体情况做出权衡决策。</p></details><h2 id="二、工厂设计模式" tabindex="-1"><a class="header-anchor" href="#二、工厂设计模式" aria-hidden="true">#</a> 二、工厂设计模式</h2><p>当没有使用工厂设计模式的情况下，代码可能会像下面这样实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Resource</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Resource</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceLoader</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Resource</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 根据前缀匹配</span>
        <span class="token class-name">String</span> prefix <span class="token operator">=</span> <span class="token function">getPrefix</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>prefix<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 很复杂的操作，可能此处会执行很久</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>prefix<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 很复杂的操作，可能此处会执行很久</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>prefix<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;classpath&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 很复杂的操作，可能此处会执行很久</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">(</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getPrefix</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">||</span> url<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ResourceLoadException</span><span class="token punctuation">(</span><span class="token string">&quot;url不合法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>代码详细解析：</summary><p>上述代码包含两个类：<code>Resource</code> 和 <code>ResourceLoader</code>。</p><ul><li><p><code>Resource</code> 类表示资源对象，具有一个私有的 <code>url</code> 字段和一个公共的构造函数。它通过构造函数接收一个 <code>url</code> 参数，并将其赋值给 <code>url</code> 字段。</p></li><li><p><code>ResourceLoader</code> 类是一个资源加载器，它有一个私有的 <code>load</code> 方法用于加载资源。该方法接收一个 <code>url</code> 参数，根据其前缀进行匹配。根据前缀的不同，它执行不同的操作来创建并返回一个 <code>Resource</code> 对象。</p></li><li><p>在 <code>load</code> 方法中，它通过调用私有的 <code>getPrefix</code> 方法来获取 <code>url</code> 的前缀。然后，使用条件语句判断前缀是什么，并在每个分支中执行复杂的操作（可能需要执行很久）来创建一个对应的 <code>Resource</code> 对象。如果前缀不匹配任何条件，则创建一个默认的 <code>Resource</code> 对象。</p></li><li><p><code>getPrefix</code> 方法用于从 <code>url</code> 中提取前缀。它首先检查 <code>url</code> 是否为空、空字符串或包含冒号。如果是，则抛出一个 <code>ResourceLoadException</code> 异常，表示 <code>url</code> 不合法。否则，它通过将 <code>url</code> 使用冒号进行分割，并返回分割后的第一个元素作为前缀。</p></li></ul><p>总结：以上代码展示了一个简单的资源加载器，根据给定的 <code>url</code> 和其前缀，创建并返回对应的 <code>Resource</code> 对象。它通过条件语句进行判断和创建，没有使用工厂设计模式。然而，这种实现方式存在代码冗余和可扩展性差的问题。工厂设计模式可以用来改善这些问题。</p></details><hr><p>在这个没有使用工厂设计模式的例子中，<code>ResourceLoader</code> 类负责根据 URL 的前缀来加载资源。根据不同的前缀，它执行不同的操作来创建 <code>Resource</code> 对象。这导致了以下问题：</p><ol><li>代码冗余：在每个分支中，都有相似的复杂操作用于创建 <code>Resource</code> 对象，这造成了代码的重复。</li><li>可扩展性差：当需要添加新的资源类型时，需要修改 <code>ResourceLoader</code> 类的代码，并增加对应的分支。这违反了开闭原则，使代码难以扩展和维护。</li><li>低内聚性：<code>ResourceLoader</code> 类的职责既包括根据前缀选择创建资源对象的逻辑，又包括资源对象的创建过程，导致职责不够单一。</li></ol><p>没有使用工厂设计模式的代码实现不够灵活，代码复用性较低，并且随着业务需求的变化，代码的维护和扩展会变得困难。相比之下，使用工厂设计模式可以将对象的创建逻辑封装到工厂类中，提高了代码的可扩展性和可维护性，同时使得代码更加清晰和易于理解。</p><h3 id="_1、简单工厂" tabindex="-1"><a class="header-anchor" href="#_1、简单工厂" aria-hidden="true">#</a> 1、简单工厂</h3><h4 id="_1-1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-1-介绍" aria-hidden="true">#</a> 1.1 介绍</h4><p>简单工厂设计模式（Simple Factory Pattern）是一种创建型设计模式，它<strong>提供了一种统一的方式来创建对象，而无需直接实例化具体的产品类</strong>。简单工厂模式通过<strong>将对象的创建逻辑封装在一个工厂类中，根据不同的参数返回相应的对象实例</strong>。</p><h4 id="_1-2-核心思想" tabindex="-1"><a class="header-anchor" href="#_1-2-核心思想" aria-hidden="true">#</a> 1.2 核心思想</h4><p>简单工厂设计模式的核心思想是通过一个工厂类来封装对象的创建过程。客户端通过传递不同的参数给工厂类，工厂类根据参数的不同来创建对应的具体产品对象。这样可以将对象的创建和使用分离，降低了客户端代码的耦合性。</p><h4 id="_1-3-组成" tabindex="-1"><a class="header-anchor" href="#_1-3-组成" aria-hidden="true">#</a> 1.3 组成</h4><p>简单工厂设计模式由以下组成部分构成：</p><ul><li><strong>工厂类（Factory Class）</strong>：负责创建具体产品对象的工厂类。它包含一个静态方法，根据传入的参数返回相应的产品对象。</li></ul><h4 id="_1-4-基本流程" tabindex="-1"><a class="header-anchor" href="#_1-4-基本流程" aria-hidden="true">#</a> 1.4 基本流程</h4><p>简单工厂设计模式的基本流程如下：</p><ol><li>定义一个工厂类，包含一个静态方法用于创建产品对象。</li><li>在工厂方法中根据不同的参数，实例化相应的具体产品对象。</li><li>客户端通过调用工厂方法并传递参数，获取所需的产品对象。</li></ol><h4 id="_1-5-使用场景" tabindex="-1"><a class="header-anchor" href="#_1-5-使用场景" aria-hidden="true">#</a> 1.5 使用场景</h4><p>简单工厂设计模式适用于以下场景：</p><ul><li>当需要根据不同参数创建不同的对象时。</li><li>当需要将对象的创建和使用分离，降低客户端代码的耦合性时。</li></ul><h4 id="_1-6-具体案例" tabindex="-1"><a class="header-anchor" href="#_1-6-具体案例" aria-hidden="true">#</a> 1.6 具体案例</h4><p>在下列案例中，<code>ResourceLoader</code>类是一个资源加载器，负责根据URL加载对应的资源。为了将资源的创建过程与资源加载器解耦，使用了简单工厂模式。<code>ResourceLoadFactory</code>类是工厂类，根据URL的前缀来创建不同类型的资源对象。在<code>ResourceLoader</code>类中，通过调用工厂类的静态方法<code>create()</code>来获取相应的资源实例，而不需要直接实例化具体的资源类。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceLoader</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Resource</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//1.根据前缀匹配</span>
        <span class="token class-name">String</span> prefix <span class="token operator">=</span> <span class="token function">getPrefix</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//使用简单工厂模式,不将创建资源的过程耦合到此处代码</span>
        <span class="token keyword">return</span> <span class="token class-name">ResourceLoadFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getPrefix</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">||</span> url<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ResourceLoadException</span><span class="token punctuation">(</span><span class="token string">&quot;url不合法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceLoadFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Resource</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">,</span> <span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//很复杂的操作,可能此处会执行很久</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//很复杂的操作,可能此处会执行很久</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;classpath&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//很复杂的操作,可能此处会执行很久</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">(</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-7-总结" tabindex="-1"><a class="header-anchor" href="#_1-7-总结" aria-hidden="true">#</a> 1.7 总结</h4><p>简单工厂设计模式通过一个工厂类来封装对象的创建过程，根据不同的参数返回相应的产品对象。它提供了一种简单而统一的方式来创建对象，将对象的创建和使用分离，降低了客户端代码的耦合性。</p><details class="hint-container details"><summary>优点和缺点：</summary><p>优点：</p><ul><li>将对象的创建逻辑集中在一个工厂类中，方便维护和管理。</li><li>客户端通过调用工厂方法获取所需的产品对象，无需直接实例化具体产品类。</li><li>可以通过改变工厂方法的实现，轻松扩展新的产品类。</li></ul><p>缺点：</p><ul><li>工厂类的职责较重，可能随着产品种类的增加而变得臃肿。</li><li>新增产品需要修改工厂类的代码，违背了开闭原则。</li></ul></details><p>总体而言，简单工厂设计模式提供了一种简单而统一的方式来创建对象，将对象的创建和使用分离。它适用于需要根据不同参数创建不同对象的场景，并可以提供一定程度的灵活性和扩展性。然而，在使用简单工厂模式时，需要注意工厂类的职责和代码的扩展性，以确保系统的可维护性和可扩展性。</p><p>简单工厂设计模式（Simple Factory Pattern）是一种创建型设计模式，旨在通过一个工厂类来封装对象的创建过程。它属于最基本的工厂模式，虽然并不是一种正式的设计模式，但在实际开发中被广泛应用。</p><ul><li>在简单工厂模式中，存在一个具体的工厂类，负责根据客户端的需求创建不同类型的产品对象。客户端只需要提供一个参数或条件给工厂类，工厂类根据参数或条件的不同，返回相应类型的产品对象。这样，客户端与具体产品类之间解耦，不需要直接依赖具体产品的创建过程。</li><li><strong>总结就是：一个工厂负责生产多个产品</strong></li></ul><h3 id="_2、工厂方法" tabindex="-1"><a class="header-anchor" href="#_2、工厂方法" aria-hidden="true">#</a> 2、工厂方法</h3><h4 id="_2-1-介绍" tabindex="-1"><a class="header-anchor" href="#_2-1-介绍" aria-hidden="true">#</a> 2.1 介绍</h4><p>工厂方法设计模式（Factory Method Design Pattern）是一种创建型设计模式，旨在解决对象的创建过程。它定义了一个用于创建对象的接口，但将具体对象的创建延迟到子类中实现。工厂方法模式通过将对象的创建和使用分离，实现了开闭原则，使得系统更加灵活可扩展。</p><h4 id="_2-2-核心思想" tabindex="-1"><a class="header-anchor" href="#_2-2-核心思想" aria-hidden="true">#</a> 2.2 核心思想</h4><p>工厂方法设计模式的核心思想是将对象的创建委托给子类来实现。定义一个创建对象的接口，具体的对象创建由子类来完成。这样可以在不修改客户端代码的情况下，通过切换具体工厂类来创建不同的产品对象。</p><h4 id="_2-3-组成和基本流程" tabindex="-1"><a class="header-anchor" href="#_2-3-组成和基本流程" aria-hidden="true">#</a> 2.3 组成和基本流程</h4><blockquote><p>工厂方法设计模式通常由以下组成部分构成：</p></blockquote><ul><li><strong>抽象工厂类（Abstract Factory Class）</strong>：定义了创建对象的接口，包含一个抽象的工厂方法。</li><li><strong>具体工厂类（Concrete Factory Class）</strong>：实现了抽象工厂类，负责创建具体的产品对象。</li><li><strong>抽象产品类（Abstract Product Class）</strong>：定义了产品对象的接口，描述了产品的公共方法。</li><li><strong>具体产品类（Concrete Product Class）</strong>：实现了抽象产品类，表示具体的产品对象。</li></ul><blockquote><p>工厂方法设计模式的基本流程如下：</p></blockquote><ol><li>定义抽象工厂类，包含一个抽象的工厂方法。</li><li>定义抽象产品类，描述产品对象的公共接口。</li><li>创建具体产品类，实现抽象产品类的接口。</li><li>创建具体工厂类，实现抽象工厂类，负责创建具体的产品对象。</li><li>在客户端中，通过抽象工厂类创建产品对象，而无需直接实例化具体的产品类。</li></ol><h4 id="_2-4-使用场景" tabindex="-1"><a class="header-anchor" href="#_2-4-使用场景" aria-hidden="true">#</a> 2.4 使用场景</h4><p>工厂方法设计模式适用于以下场景：</p><ul><li>当需要创建一组相关的对象时，可以使用工厂方法模式来统一创建这些对象。</li><li>当对象的创建逻辑比较复杂，或者需要根据不同的条件创建不同的对象时，可以使用工厂方法模式。</li></ul><h4 id="_2-5-具体案例" tabindex="-1"><a class="header-anchor" href="#_2-5-具体案例" aria-hidden="true">#</a> 2.5 具体案例</h4><p>下列这段代码展示了使用抽象工厂设计模式的资源加载器实现。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 抽象产品和具体产品</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractResource</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">AbstractResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">AbstractResource</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 子类都要实现的方法</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">InputStream</span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileResource</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractResource</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">FileResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">FileResource</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">InputStream</span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 抽象工厂和具体工厂</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IResourceFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">AbstractResource</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileResourceFactory</span> <span class="token keyword">implements</span> <span class="token class-name">IResourceFactory</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">AbstractResource</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 很复杂的逻辑...</span>
        <span class="token comment">// 很复杂的逻辑...</span>
        <span class="token comment">// 很复杂的逻辑...</span>
        <span class="token comment">// 很复杂的逻辑...</span>
        <span class="token comment">// 很复杂的逻辑...</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FileResource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 测试</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceLoaderMethod</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">IResourceFactory</span> resourceFactory<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">IResourceFactory</span><span class="token punctuation">&gt;</span></span> resourceFactoryCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token comment">// 在类加载的时候/起一个定时器,定时读取配置文件</span>
        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;resourceFactory.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entries <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> entries<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> prefixKey <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> className <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">IResourceFactory</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IResourceFactory</span><span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                resourceFactoryCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>prefixKey<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> <span class="token operator">|</span> <span class="token class-name">NoSuchMethodException</span> <span class="token operator">|</span> <span class="token class-name">InstantiationException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span>
                     <span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">AbstractResource</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> prefix <span class="token operator">=</span> <span class="token function">getPrefix</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> resourceFactoryCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getPrefix</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">||</span> url<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ResourceLoaderMethod</span> rlm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceLoaderMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AbstractResource</span> load <span class="token operator">=</span> rlm<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;file:user/inter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;load.getUrl() = &quot;</span> <span class="token operator">+</span> load<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>代码详细解析：</summary><p><strong>抽象产品和具体产品部分：</strong></p><ul><li><code>AbstractResource</code> 是抽象产品类，它包含了一个 <code>url</code> 字段，并定义了一个抽象方法 <code>getInputStream()</code>。</li><li><code>FileResource</code> 是具体产品类，它继承自 <code>AbstractResource</code>，实现了抽象方法 <code>getInputStream()</code>。</li></ul><p><strong>抽象工厂和具体工厂部分：</strong></p><ul><li><code>IResourceFactory</code> 是抽象工厂接口，它定义了一个方法 <code>create()</code>，用于创建抽象产品 <code>AbstractResource</code> 对象。</li><li><code>FileResourceFactory</code> 是具体工厂类，实现了 <code>IResourceFactory</code> 接口。在 <code>create()</code> 方法中，它通过复杂的逻辑创建一个 <code>FileResource</code> 对象，并将其返回。</li></ul><p><strong>测试部分：</strong></p><ul><li><code>ResourceLoaderMethod</code> 类中包含了一个静态的 <code>resourceFactoryCache</code> 缓存，用于存储不同前缀对应的具体工厂对象。</li><li>在静态代码块中，通过读取配置文件 <code>resourceFactory.properties</code>，获取了具体工厂类的映射关系，并将其实例化放入缓存中。</li><li><code>load()</code> 方法根据传入的 URL 获取前缀，并从 <code>resourceFactoryCache</code> 缓存中获取对应的具体工厂对象，然后调用其 <code>create()</code> 方法创建抽象产品对象。</li><li><code>getPrefix()</code> 方法用于从 URL 中提取前缀，如果 URL 为空、空字符串或包含冒号，则返回默认前缀。</li><li>在 <code>main()</code> 方法中，创建 <code>ResourceLoaderMethod</code> 对象，并通过调用 <code>load()</code> 方法加载资源。最后打印出加载的资源的 URL。</li></ul><p>通过这段代码，资源加载器实现了抽象工厂设计模式。客户端只需与抽象工厂接口 <code>IResourceFactory</code> 进行交互，通过调用其 <code>create()</code> 方法，由具体工厂类根据传入的 URL 创建相应的具体产品对象。这样可以实现客户端与具体产品类的解耦，提高了代码的灵活性和可维护性。</p></details><h4 id="_2-6-总结" tabindex="-1"><a class="header-anchor" href="#_2-6-总结" aria-hidden="true">#</a> 2.6 总结</h4><p>工厂方法设计模式的优点包括：</p><ul><li>实现了对象的创建和使用的解耦，客户端只需要与抽象工厂接口交互。</li><li>提供了可扩展性，可以通过添加新的具体工厂类和产品类来创建新的产品对象。</li><li>代码结构清晰，各个对象的职责明确。</li></ul><p>然而，工厂方法设计模式也存在一些缺点：</p><ul><li>需要定义抽象工厂和抽象产品接口，增加了代码的复杂度。</li><li>每新增一个具体产品，都需要新增相应的具体产品类和具体工厂类，导致类的数量增加。</li></ul><p>总的来说，工厂方法设计模式是一种非常常用和灵活的设计模式，可以帮助我们实现对象的创建和使用的解耦，提高代码的可扩展性和维护性。</p><p><strong>总结就是：一个工厂生产一个产品</strong></p><h3 id="_3、抽象工厂" tabindex="-1"><a class="header-anchor" href="#_3、抽象工厂" aria-hidden="true">#</a> 3、抽象工厂</h3><h4 id="_3-1-介绍" tabindex="-1"><a class="header-anchor" href="#_3-1-介绍" aria-hidden="true">#</a> 3.1 介绍</h4><p>抽象工厂设计模式（Abstract Factory Pattern）是一种创建型设计模式，旨在提供一个接口来创建一系列相关或依赖对象的家族，而无需指定具体实现类。它将对象的创建与使用相分离，使得客户端代码与具体产品的实现解耦，提供了一种灵活的方式来创建对象。</p><h4 id="_3-2-核心思想" tabindex="-1"><a class="header-anchor" href="#_3-2-核心思想" aria-hidden="true">#</a> 3.2 核心思想</h4><p>抽象工厂设计模式的核心思想是通过提供一个抽象工厂接口，定义一系列创建产品的方法，每个具体的工厂实现该接口，并负责创建特定的产品家族。客户端只与抽象工厂和抽象产品进行交互，而不直接依赖具体产品的实现。</p><h4 id="_3-3-组成和基本流程" tabindex="-1"><a class="header-anchor" href="#_3-3-组成和基本流程" aria-hidden="true">#</a> 3.3 组成和基本流程</h4><blockquote><p>抽象工厂设计模式包含以下组成：</p></blockquote><ul><li><strong>抽象工厂（Abstract Factory）</strong>：定义用于创建产品家族的接口，声明了一系列创建产品的方法。</li><li><strong>具体工厂（Concrete Factory）</strong>：实现抽象工厂接口，具体实现了创建产品的方法，每个具体工厂对应一个具体产品家族。</li><li><strong>抽象产品（Abstract Product）</strong>：定义产品的接口，声明产品的共性方法。</li><li><strong>具体产品（Concrete Product）</strong>：实现抽象产品接口，具体定义产品的具体实现。</li></ul><blockquote><p>抽象工厂设计模式的基本流程：</p></blockquote><ol><li>定义抽象工厂接口，声明一系列创建产品的方法。</li><li>创建具体产品类，实现抽象产品接口。</li><li>创建具体工厂类，实现抽象工厂接口，实现产品的创建方法。</li><li>在客户端中使用抽象工厂接口声明工厂对象，通过工厂对象创建具体产品。</li></ol><h4 id="_3-4-使用场景" tabindex="-1"><a class="header-anchor" href="#_3-4-使用场景" aria-hidden="true">#</a> 3.4 使用场景</h4><p>抽象工厂设计模式适用于以下情景：</p><ul><li>系统需要创建一系列相关或依赖的产品家族。</li><li>客户端不关心或不知道如何创建产品的具体实现。</li><li>需要解耦客户端和具体产品的实现。</li></ul><h4 id="_3-5-具体案例" tabindex="-1"><a class="header-anchor" href="#_3-5-具体案例" aria-hidden="true">#</a> 3.5 具体案例</h4><details class="hint-container details"><summary>代码详细解析：</summary><p>下列代码实现了抽象工厂设计模式。抽象工厂设计模式旨在提供一个接口（抽象工厂），用于创建一系列相关或依赖的产品（抽象产品）的家族，而无需指定具体实现类。它将产品的创建与使用相分离，使得客户端代码与具体产品的实现解耦，提供了一种灵活的方式来创建对象。</p><p>在这段代码中：</p><ul><li>抽象产品由接口 <code>IResource</code> 和具体实现类 <code>AbstractVideoResource</code>、<code>AbstractTextResource</code>、<code>AbstractPictureResource</code> 组成。每个具体产品都实现了 <code>IResource</code> 接口，并包含一些特定的方法。</li><li>抽象工厂由接口 <code>IResourceFactory</code> 和具体工厂类 <code>AbstractResourceFactory</code>、<code>FileResourceFactory</code>、<code>HttpResourceFactory</code> 组成。抽象工厂接口定义了创建产品的抽象方法和加载具体产品的工厂方法。具体工厂类实现了抽象工厂接口，并负责实现具体产品的创建和加载。</li><li>在 <code>ResourceLoaderMethod</code> 类中，通过静态缓存 <code>resourceFactoryCache</code> 存储不同前缀对应的具体工厂对象。在类加载时，通过读取配置文件，动态创建具体工厂对象，并将其放入缓存中。<code>load()</code> 方法根据传入的 URL 获取前缀，然后通过具体工厂对象调用 <code>create()</code> 方法创建抽象产品对象。这样，客户端代码只需要与抽象工厂进行交互，而无需关心具体产品的创建和加载过程。</li></ul></details><p>以下是整合后的代码，展示了抽象工厂设计模式的实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IResource</span> <span class="token punctuation">{</span><span class="token comment">//抽象产品</span>
    <span class="token class-name">InputStream</span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//抽象产品</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractVideoResource</span> <span class="token keyword">implements</span> <span class="token class-name">IResource</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">AbstractVideoResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">AbstractVideoResource</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transformMp4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;视频资源组共有方法-transformMp4()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//抽象产品</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractTextResource</span> <span class="token keyword">implements</span> <span class="token class-name">IResource</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">AbstractTextResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">AbstractTextResource</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transformUtf8</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文本资源组共有方法-transformUtf8()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//抽象产品</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractPictureResource</span> <span class="token keyword">implements</span> <span class="token class-name">IResource</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">AbstractPictureResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">AbstractPictureResource</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transformJpg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;图片资源组共有方法-transformJpg()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//具体产品</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileTextResource</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTextResource</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">InputStream</span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//具体产品</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileVideoResource</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractVideoResource</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">InputStream</span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//具体产品</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilePictureResource</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractPictureResource</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">FilePictureResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">FilePictureResource</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">InputStream</span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//具体产品</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpPictureResource</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractPictureResource</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">HttpPictureResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">HttpPictureResource</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">InputStream</span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//具体产品</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpTextResource</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractPictureResource</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">HttpTextResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">HttpTextResource</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">InputStream</span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//具体产品</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpVideoResource</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractPictureResource</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">HttpVideoResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">HttpVideoResource</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">InputStream</span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//抽象工厂</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IResourceFactory</span> <span class="token punctuation">{</span>
    <span class="token class-name">AbstractPictureResource</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">AbstractPictureResource</span> <span class="token function">loadPicture</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">AbstractVideoResource</span> <span class="token function">loadVideo</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">AbstractTextResource</span> <span class="token function">loadText</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//抽象工厂</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractResourceFactory</span> <span class="token keyword">implements</span> <span class="token class-name">IResourceFactory</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token comment">//具体工厂</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileResourceFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractResourceFactory</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">AbstractPictureResource</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FilePictureResource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">AbstractPictureResource</span> <span class="token function">loadPicture</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">AbstractVideoResource</span> <span class="token function">loadVideo</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">AbstractTextResource</span> <span class="token function">loadText</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//抽象工厂</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpResourceFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractResourceFactory</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">AbstractPictureResource</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HttpPictureResource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">AbstractPictureResource</span> <span class="token function">loadPicture</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">AbstractVideoResource</span> <span class="token function">loadVideo</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">AbstractTextResource</span> <span class="token function">loadText</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//客户端测试</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceLoaderMethod</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">IResourceFactory</span> resourceFactory<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">IResourceFactory</span><span class="token punctuation">&gt;</span></span> resourceFactoryCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;resourceFactory.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entries <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> entries<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> prefixKey <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> className <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">IResourceFactory</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IResourceFactory</span><span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                resourceFactoryCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>prefixKey<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> <span class="token operator">|</span> <span class="token class-name">NoSuchMethodException</span> <span class="token operator">|</span> <span class="token class-name">InstantiationException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span>
                    <span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">AbstractPictureResource</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> prefix <span class="token operator">=</span> <span class="token function">getPrefix</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> resourceFactoryCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

   

 <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getPrefix</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">||</span> url<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ResourceLoaderMethod</span> rlm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceLoaderMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AbstractPictureResource</span> load <span class="token operator">=</span> rlm<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;file:user/inter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;load.getUrl() = &quot;</span> <span class="token operator">+</span> load<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-6-总结" tabindex="-1"><a class="header-anchor" href="#_3-6-总结" aria-hidden="true">#</a> 3.6 总结</h4><blockquote><p>优点：</p></blockquote><ul><li>提供了一种灵活的方式来创建一系列相关或依赖的产品家族。</li><li>客户端与具体产品的实现解耦，可以方便地替换具体工厂和产品。</li><li>符合开闭原则，容易扩展新的产品家族。</li></ul><blockquote><p>缺点：</p></blockquote><ul><li>添加新的产品家族可能需要修改抽象工厂的接口和所有的具体工厂。</li></ul><p>抽象工厂设计模式通过将产品的创建与使用相分离，提供了一种创建对象的灵活方式，同时也增加了系统的复杂度。在设计时需要权衡灵活性和复杂性之间的平衡。</p><p><strong>总结就是：一个工厂生产一组产品线</strong></p><h2 id="三、建造者设计模式" tabindex="-1"><a class="header-anchor" href="#三、建造者设计模式" aria-hidden="true">#</a> 三、建造者设计模式</h2><h3 id="_1、简介" tabindex="-1"><a class="header-anchor" href="#_1、简介" aria-hidden="true">#</a> 1、简介</h3><p>建造者设计模式（Builder Pattern）是一种创建型设计模式，它<strong>专注于逐步构建复杂对象</strong>。它<strong>将对象的构建过程与其表示分离，允许相同的构建过程创建不同的表示形式</strong>。该模式的目标是简化对象的构建过程，并提供灵活性和可扩展性。</p><h3 id="_2、核心思想-1" tabindex="-1"><a class="header-anchor" href="#_2、核心思想-1" aria-hidden="true">#</a> 2、核心思想</h3><p>Builder设计模式的核心思想是将对象的构建过程从其实际表示中解耦。通常情况下，一个对象的构建过程是复杂且多步骤的，使用Builder模式可以将这些步骤分解为独立的方法，从而使得构建过程更加灵活和可控。</p><h3 id="_3、组成和基本流程-1" tabindex="-1"><a class="header-anchor" href="#_3、组成和基本流程-1" aria-hidden="true">#</a> 3、组成和基本流程</h3><blockquote><p>Builder设计模式包含以下几个主要组成部分：</p></blockquote><ol><li>Director（指导者）：负责控制对象的构建过程，按照一定的顺序调用Builder的方法来构建对象。</li><li>Builder（构建者）：定义构建对象的接口，包含各个构建步骤的方法。</li><li>ConcreteBuilder（具体构建者）：实现Builder接口，负责具体的构建逻辑，并返回构建完成的对象。</li><li>Product（产品）：表示最终构建完成的对象，通常具有复杂的内部结构。</li></ol><details class="hint-container details"><summary>详情</summary><blockquote><p>Builder设计模式的基本流程和简单示例如下：</p></blockquote><ol><li>定义一个Builder接口，其中包含各个构建步骤的方法。</li><li>创建具体的Builder类，实现Builder接口，并实现各个构建步骤的具体逻辑。</li><li>创建一个Director类，它包含一个Builder对象作为成员变量。通过调用Builder的方法，按照特定的顺序构建对象。</li><li>最终调用Builder的一个方法返回构建完成的对象。</li></ol><p>下列是一个简单的建造者设计模式的例子，这段代码演示了如何使用建造者设计模式创建一个电脑对象。</p><ul><li><p>首先，我们定义了一个Computer类，它具有一些属性（processor、memory、hardDisk、monitor）以及对应的设置方法。</p></li><li><p>然后，我们定义了一个ComputerBuilder接口，其中包含了构建电脑对象所需的方法（buildProcessor、buildMemory、buildHardDisk、buildMonitor）以及获取构建完成的电脑对象的方法getComputer()。</p></li><li><p>接着，我们实现了一个BasicComputerBuilder类，它是ComputerBuilder接口的具体实现。在BasicComputerBuilder类中，我们实例化了一个Computer对象，并实现了构建电脑各个部件的方法。</p></li><li><p>之后，我们创建了一个ComputerDirector类，它负责指导建造过程。通过调用ComputerBuilder的方法，按照一定的顺序构建电脑对象，并返回构建完成的对象。</p></li><li><p>最后，在Main类中，我们创建了一个BasicComputerBuilder对象作为建造者，创建了一个ComputerDirector对象作为指导者，然后通过指导者来构建电脑对象。最后，我们输出了构建完成的电脑对象的各个属性。</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> processor<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> memory<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> hardDisk<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> monitor<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProcessor</span><span class="token punctuation">(</span><span class="token class-name">String</span> processor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>processor <span class="token operator">=</span> processor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMemory</span><span class="token punctuation">(</span><span class="token class-name">String</span> memory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>memory <span class="token operator">=</span> memory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHardDisk</span><span class="token punctuation">(</span><span class="token class-name">String</span> hardDisk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>hardDisk <span class="token operator">=</span> hardDisk<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMonitor</span><span class="token punctuation">(</span><span class="token class-name">String</span> monitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>monitor <span class="token operator">=</span> monitor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 省略其他方法和属性的访问器</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">ComputerBuilder</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">buildProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">buildMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">buildHardDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">buildMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Computer</span> <span class="token function">getComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">BasicComputerBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">ComputerBuilder</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Computer</span> computer<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">BasicComputerBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        computer<span class="token punctuation">.</span><span class="token function">setProcessor</span><span class="token punctuation">(</span><span class="token string">&quot;Basic Processor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        computer<span class="token punctuation">.</span><span class="token function">setMemory</span><span class="token punctuation">(</span><span class="token string">&quot;4GB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildHardDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        computer<span class="token punctuation">.</span><span class="token function">setHardDisk</span><span class="token punctuation">(</span><span class="token string">&quot;500GB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        computer<span class="token punctuation">.</span><span class="token function">setMonitor</span><span class="token punctuation">(</span><span class="token string">&quot;15-inch&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Computer</span> <span class="token function">getComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> computer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ComputerDirector</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Computer</span> <span class="token function">buildComputer</span><span class="token punctuation">(</span><span class="token class-name">ComputerBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        builder<span class="token punctuation">.</span><span class="token function">buildProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">buildMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">buildHardDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">buildMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">getComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ComputerBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicComputerBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ComputerDirector</span> director <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComputerDirector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Computer</span> computer <span class="token operator">=</span> director<span class="token punctuation">.</span><span class="token function">buildComputer</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Processor: &quot;</span> <span class="token operator">+</span> computer<span class="token punctuation">.</span><span class="token function">getProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Memory: &quot;</span> <span class="token operator">+</span> computer<span class="token punctuation">.</span><span class="token function">getMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hard Disk: &quot;</span> <span class="token operator">+</span> computer<span class="token punctuation">.</span><span class="token function">getHardDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Monitor: &quot;</span> <span class="token operator">+</span> computer<span class="token punctuation">.</span><span class="token function">getMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们通过建造者模式逐步构建了一个电脑对象。指导者类控制了建造过程，而具体的建造者类负责实际构建对象。最终，我们可以获取到一个完整的电脑对象，并对其进行进一步操作。</p></details><h3 id="_4、使用场景-1" tabindex="-1"><a class="header-anchor" href="#_4、使用场景-1" aria-hidden="true">#</a> 4、使用场景</h3><p>Builder设计模式适用于以下情况：</p><ul><li>当需要创建具有复杂内部结构的对象时，可以使用Builder模式将构建过程分解为多个简单步骤。</li><li>当需要构建的对象存在不同的表示形式时，可以使用Builder模式来创建不同的表示。</li><li>当需要在构建过程中灵活地添加或修改构建步骤时，可以使用Builder模式。</li><li>实现不可变对象，可以使用Builder模式创建不可变对象。通过将建造者的构建方法设置为私有，并将需要的属性通过构造函数进行初始化，可以确保对象在构建后不可再修改。这样的对象可以提供更好的线程安全性和代码健壮性。</li></ul><h3 id="_5、具体案例-1" tabindex="-1"><a class="header-anchor" href="#_5、具体案例-1" aria-hidden="true">#</a> 5、具体案例</h3><p>在这个示例中，我们使用建造者设计模式创建了一个名为 <code>ImmutablePerson</code> 的不可变对象类。</p><ul><li><p>在 <code>ImmutablePerson</code> 类中，属性 <code>name</code>、<code>age</code> 和 <code>address</code> 被声明为 <code>final</code>，并且没有提供任何修改它们的方法。这样可以确保这些属性在对象创建后不可变。</p></li><li><p>通过私有的构造方法 <code>ImmutablePerson(Builder builder)</code>，我们将属性的值从 <code>Builder</code> 对象传递给了 <code>ImmutablePerson</code> 对象，并在构造方法内进行了赋值操作。这样，我们可以在构造对象时保证对象的属性值一致和不可变。</p></li><li><p><code>Builder</code> 类是一个嵌套类，它提供了链式调用的方法来设置 <code>ImmutablePerson</code> 的属性值。每个方法都返回 <code>Builder</code> 对象本身，以便可以连续调用多个方法。最后，通过调用 <code>build()</code> 方法，我们可以创建并返回一个不可变的 <code>ImmutablePerson</code> 对象。</p></li></ul><p>使用该示例，我们可以这样创建一个不可变的 <code>ImmutablePerson</code> 对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ImmutablePerson</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">ImmutablePerson</span><span class="token punctuation">(</span><span class="token class-name">Builder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> builder<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> builder<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> builder<span class="token punctuation">.</span>address<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> address<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token class-name">String</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">ImmutablePerson</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutablePerson</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Usage example:</span>
        <span class="token class-name">ImmutablePerson</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImmutablePerson<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">&quot;123 Street&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们通过链式调用 <code>Builder</code> 的方法设置属性的值，并最后调用 <code>build()</code> 方法来创建 <code>ImmutablePerson</code> 对象。一旦对象创建完成，它的属性就是不可变的，无法再修改。</p><p>这种方式提供了不可变对象的安全性和线程安全性，因为对象的状态无法在创建后被修改。不可变对象还可以更容易地进行缓存、共享和使用。</p><hr><blockquote><p><strong>lombok例子：</strong></p></blockquote><p>在lombok中，我们使用<code>@Builder</code>注解会自动生成一个建造者模式的构建者类。下面是一个使用Lombok的<code>@Builder</code>注解的示例代码：</p><p>非常抱歉前面的回答中有些遗漏，确实是多了一些代码。以下是编译前和编译后的代码：</p><p>编译前的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Builder</span>
<span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@ToString</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> bobby<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">User<span class="token punctuation">.</span>UserBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bobby</span><span class="token punctuation">(</span><span class="token string">&quot;rap&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;user = &quot;</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译后的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> bobby<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">UserBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bobby</span><span class="token punctuation">(</span><span class="token string">&quot;rap&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;user = &quot;</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Integer</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> bobby<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>bobby <span class="token operator">=</span> bobby<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">UserBuilder</span> <span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBobby</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bobby<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;User(name=&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, age=&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, bobby=&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBobby</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UserBuilder</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> bobby<span class="token punctuation">;</span>

        <span class="token class-name">UserBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">UserBuilder</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">UserBuilder</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">UserBuilder</span> <span class="token function">bobby</span><span class="token punctuation">(</span><span class="token class-name">String</span> bobby<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>bobby <span class="token operator">=</span> bobby<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bobby<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;User.UserBuilder(name=&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;, age=&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">&quot;, bobby=&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bobby <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，编译后的代码中添加了一些内容，其中包括：</p><ol><li>在<code>User</code>类中，添加了私有构造函数以及对应的属性赋值操作。</li><li>在<code>User</code>类中，添加了getter方法和<code>toString()</code>方法的具体实现。</li><li>在<code>User</code>类中，添加了静态的<code>builder()</code>方法，用于创建<code>UserBuilder</code>对象。</li><li>在<code>UserBuilder</code>类中，添加了构造函数、链式调用方法以及<code>build()</code>方法的具体实现。</li></ol><p>这些额外的代码是Lombok库根据注解自动生成的，它们帮助简化了建造者模式的使用，减少了手动编写重复代码的工作量。这样，您可以更方便地创建和操作<code>User</code>对象。</p><h3 id="_6、总结-1" tabindex="-1"><a class="header-anchor" href="#_6、总结-1" aria-hidden="true">#</a> 6、总结</h3><p>Builder设计模式的优点包括：</p><ul><li>可以分步骤构建复杂对象，使构建过程更加灵活和可控。</li><li>可以创建不同的表示形式，根据复杂的配置项进行定制化构建，提供了更多对象构建的可能性。</li><li>隔离了构建过程和表示，使得扩展和修改更加方便。</li></ul><p>然而，Builder设计模式也存在一些缺点：</p><ul><li>会增加代码量，因为需要定义和实现多个类。</li><li>对于简单对象的构建，使用Builder模式可能会显得过于复杂。</li></ul><p>总的来说，Builder设计模式在构建复杂对象时非常有用，并提供了灵活性和可扩展性。但在简单情况下，使用该模式可能会带来一定的开销。</p><h3 id="_7、和工厂设计模式的区别" tabindex="-1"><a class="header-anchor" href="#_7、和工厂设计模式的区别" aria-hidden="true">#</a> 7、和工厂设计模式的区别</h3><p>建造者设计模式和工厂设计模式是两种常见的创建型设计模式，它们都用于创建对象，但在目的和使用方式上存在一些区别。</p><ul><li>工厂设计模式旨在通过一个工厂类来创建对象，隐藏了具体对象的创建细节，并将客户端与具体对象的实例化过程解耦。客户端只需要通过工厂类来请求所需的对象，而不需要直接实例化对象。工厂模式通常适用于创建不同类型对象的场景，通过使用不同的工厂方法或参数，可以创建不同类型的对象。</li><li>与之不同，建造者设计模式关注的是逐步构建复杂对象，将对象的构建过程与其表示分离。它允许按照特定的步骤或顺序构建对象，并允许在构建过程中配置对象的各个部分。建造者模式通常适用于创建具有复杂结构或多个可选组件的对象，以及构建过程中涉及多个步骤或变化的对象。</li></ul><p>现在，让我们结合生活中的一个例子来说明这两种设计模式的区别。</p><ol><li>假设你要制作一份披萨。使用工厂模式，你可以有一个披萨工厂，通过向工厂提供披萨的类型（例如，奶酪披萨、素食披萨等），工厂将返回相应类型的披萨对象。这种情况下，你只需要告诉工厂你想要的披萨类型，而不需要知道具体如何制作披萨。</li><li>现在，假设你要定制一份复杂的披萨，它有多个可选组件，如酱料、配料和尺寸等。这时，建造者模式更适合。你可以有一个披萨建造者，它提供了设置酱料、配料和尺寸等属性的方法。你可以逐步调用这些方法来构建披萨对象，并在构建过程中根据你的喜好进行定制。</li></ol><p>总结一下，工厂设计模式适用于创建不同类型的对象，而建造者设计模式适用于逐步构建复杂对象。工厂模式隐藏了对象的创建细节，而建造者模式允许按照特定的步骤或顺序构建对象，并允许在构建过程中进行配置和定制。</p><h2 id="四、原型设计模式" tabindex="-1"><a class="header-anchor" href="#四、原型设计模式" aria-hidden="true">#</a> 四、原型设计模式</h2><p>原型设计模式（Prototype Design Pattern）是一种创建型设计模式，旨在<strong>通过复制现有对象来创建新对象</strong>，而不是通过使用构造函数进行创建。它允许我们<strong>通过克隆（复制）现有对象的实例来创建新的对象</strong>，而无需显式地依赖于特定类的构造函数。</p><p><strong>主要分为：浅拷贝和深拷贝</strong></p><h3 id="_1、浅拷贝" tabindex="-1"><a class="header-anchor" href="#_1、浅拷贝" aria-hidden="true">#</a> 1、浅拷贝</h3><p>浅拷贝是原型设计模式中的一种复制方式，<strong>它复制对象内的所有基本数据类型和引用数据类型的地址</strong>。这意味着在浅拷贝中，原始对象和复制对象将共享相同的引用数据类型的实例。</p><p>当执行浅拷贝时，如果对象内有引用类型的成员变量，那么复制的对象将包含对原始对象引用数据类型成员变量的引用。这意味着两个对象的引用类型成员变量指向相同的对象，任何对引用类型的修改将会影响到两个对象。</p><p>好的！让我们使用Java来举一个例子，使用浅拷贝来创建歌曲和歌单对象。</p><p>首先，我们定义一个歌曲（Song）类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Song</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> artist<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Song</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">String</span> artist<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>artist <span class="token operator">=</span> artist<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> title<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getArtist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> artist<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setArtist</span><span class="token punctuation">(</span><span class="token class-name">String</span> artist<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>artist <span class="token operator">=</span> artist<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Song: &quot;</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">&quot; - &quot;</span> <span class="token operator">+</span> artist<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们定义一个歌单（Playlist）类，它包含了多个歌曲对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlayList</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Song</span><span class="token punctuation">&gt;</span></span> songs<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">PlayList</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>songs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Song</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSongs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> songs<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addSong</span><span class="token punctuation">(</span><span class="token class-name">Song</span> song<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        songs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>song<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeSong</span><span class="token punctuation">(</span><span class="token class-name">Song</span> song<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        songs<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>song<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">PlayList</span> <span class="token function">shallowCopy</span><span class="token punctuation">(</span><span class="token class-name">String</span> newName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">PlayList</span> copy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PlayList</span><span class="token punctuation">(</span>newName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        copy<span class="token punctuation">.</span>songs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>songs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> copy<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;PlayList: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Song</span> song <span class="token operator">:</span> songs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;- &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>song<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">PlayList</span> playList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PlayList</span><span class="token punctuation">(</span><span class="token string">&quot;歌单-全是redvelet的歌&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        playList<span class="token punctuation">.</span><span class="token function">addSong</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Song</span><span class="token punctuation">(</span><span class="token string">&quot;feel my rhythm&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;redvelet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        playList<span class="token punctuation">.</span><span class="token function">addSong</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Song</span><span class="token punctuation">(</span><span class="token string">&quot;psycho&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;redvelet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        playList<span class="token punctuation">.</span><span class="token function">addSong</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Song</span><span class="token punctuation">(</span><span class="token string">&quot;bad boy&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;redvelet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//创建一个新歌单,歌单包含原歌单playList1的所有歌曲,自己在新增歌曲</span>
        <span class="token class-name">PlayList</span> newPlayList <span class="token operator">=</span> playList<span class="token punctuation">.</span><span class="token function">shallowCopy</span><span class="token punctuation">(</span><span class="token string">&quot;歌单-kpop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;playList = &quot;</span> <span class="token operator">+</span> playList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;newPlayList = &quot;</span> <span class="token operator">+</span> newPlayList<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//修改新歌单内的歌曲bad boy为人员为wendy,旧歌单的原信息会改变吗?</span>
        <span class="token class-name">Song</span> song <span class="token operator">=</span> newPlayList<span class="token punctuation">.</span><span class="token function">getSongs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        song<span class="token punctuation">.</span><span class="token function">setArtist</span><span class="token punctuation">(</span><span class="token string">&quot;wendy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;修改新歌单内的歌曲bad boy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;playList = &quot;</span> <span class="token operator">+</span> playList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;newPlayList = &quot;</span> <span class="token operator">+</span> newPlayList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>Playlist</code>类中，我们添加了一个<code>shallowCopy()</code>方法来执行浅拷贝。该方法会创建一个新的<code>Playlist</code>对象，并复制歌单中的歌曲列表。注意，我们使用了<code>new ArrayList&lt;&gt;(songs)</code>来复制歌曲列表的引用。</p><figure><img src="http://sevencowcloud.chiou.icu/img/design-pattern/copydemo.png" alt="浅拷贝输出示例" tabindex="0" loading="lazy"><figcaption>浅拷贝输出示例</figcaption></figure><hr><blockquote><p><strong>通过实现cloneable接口实现浅拷贝：</strong></p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlayListByCloneableInterface</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Song</span><span class="token punctuation">&gt;</span></span> songs<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">PlayListByCloneableInterface</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>songs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Song</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSongs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> songs<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addSong</span><span class="token punctuation">(</span><span class="token class-name">Song</span> song<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        songs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>song<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeSong</span><span class="token punctuation">(</span><span class="token class-name">Song</span> song<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        songs<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>song<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">PlayListByCloneableInterface</span> <span class="token function">shallowCopy</span><span class="token punctuation">(</span><span class="token class-name">String</span> newName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">PlayListByCloneableInterface</span> copy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PlayListByCloneableInterface</span><span class="token punctuation">(</span>newName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        copy<span class="token punctuation">.</span>songs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>songs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> copy<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;PlayList: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Song</span> song <span class="token operator">:</span> songs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;- &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>song<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">PlayListByCloneableInterface</span> playList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PlayListByCloneableInterface</span><span class="token punctuation">(</span><span class="token string">&quot;歌单-全是redvelet的歌&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        playList<span class="token punctuation">.</span><span class="token function">addSong</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Song</span><span class="token punctuation">(</span><span class="token string">&quot;feel my rhythm&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;redvelet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        playList<span class="token punctuation">.</span><span class="token function">addSong</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Song</span><span class="token punctuation">(</span><span class="token string">&quot;psycho&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;redvelet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        playList<span class="token punctuation">.</span><span class="token function">addSong</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Song</span><span class="token punctuation">(</span><span class="token string">&quot;bad boy&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;redvelet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//创建一个新歌单,歌单包含原歌单playList1的所有歌曲,自己在新增歌曲</span>
        <span class="token class-name">PlayListByCloneableInterface</span> newPlayList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PlayListByCloneableInterface</span><span class="token punctuation">)</span> playList<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        newPlayList<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;歌单-全是kpop的歌&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;playList = &quot;</span> <span class="token operator">+</span> playList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;newPlayList = &quot;</span> <span class="token operator">+</span> newPlayList<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//修改新歌单内的歌曲bad boy为人员为wendy,旧歌单的原信息会改变吗?</span>
        <span class="token class-name">Song</span> song <span class="token operator">=</span> newPlayList<span class="token punctuation">.</span><span class="token function">getSongs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        song<span class="token punctuation">.</span><span class="token function">setArtist</span><span class="token punctuation">(</span><span class="token string">&quot;wendy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;修改新歌单内的歌曲bad boy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;playList = &quot;</span> <span class="token operator">+</span> playList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;newPlayList = &quot;</span> <span class="token operator">+</span> newPlayList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、深拷贝" tabindex="-1"><a class="header-anchor" href="#_2、深拷贝" aria-hidden="true">#</a> 2、深拷贝</h3><p>深拷贝是指在<strong>复制对象时，不仅复制对象本身，还复制对象所引用的所有子对象，使得复制后的对象与原始对象完全独立，互不影响</strong>。</p><p>在进行深拷贝时，需要递归地复制对象及其子对象，确保每个子对象都是独立的副本，而不是共享引用。</p><p>深拷贝可以解决对象拷贝过程中可能出现的共享引用和副作用问题。它确保了复制对象与原始对象之间的数据隔离，使得修改复制后的对象不会影响原始对象，从而提高代码的可靠性和安全性。</p><p>在Java中，可以通过几种方式实现深拷贝：</p><ol><li>递归复制：对于复杂对象，通过递归遍历对象的每个属性，并针对引用类型的属性进行深度复制。</li><li>序列化和反序列化：将对象序列化为字节流，然后再反序列化为新的对象。这种方式需要确保对象及其所有子对象都实现了 <code>Serializable</code> 接口。</li></ol><blockquote><p><strong>递归复制：</strong></p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> stock<span class="token punctuation">;</span>
    <span class="token comment">// 省略构造函数、getter和setter方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Product</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 促销规则</span>
<span class="token keyword">class</span> <span class="token class-name">PromotionRule</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> discount<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Product</span> product<span class="token punctuation">;</span>
    <span class="token comment">// 省略构造函数、getter和setter方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">PromotionRule</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">PromotionRule</span> promotionRule <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PromotionRule</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Product</span><span class="token punctuation">)</span>product<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promotionRule<span class="token punctuation">.</span><span class="token function">setProduct</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> promotionRule<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 促销活动</span>
<span class="token keyword">class</span> <span class="token class-name">PromotionEvent</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> startDate<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> endDate<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PromotionRule</span><span class="token punctuation">&gt;</span></span> rules<span class="token punctuation">;</span>
    <span class="token comment">// 省略构造函数、getter和setter方法</span>
    <span class="token comment">// 在促销活动中的clone方法需要克隆里边所有的非基础数据类型</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">PromotionEvent</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">PromotionEvent</span> clonedEvent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PromotionEvent</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            clonedEvent<span class="token punctuation">.</span>startDate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">)</span> startDate<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            clonedEvent<span class="token punctuation">.</span>endDate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">)</span> endDate<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            clonedEvent<span class="token punctuation">.</span>rules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PromotionRule</span> rule <span class="token operator">:</span> rules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                clonedEvent<span class="token punctuation">.</span>rules<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> clonedEvent<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们已经为每个实体类实现了深拷贝方法。假设我们需要为<strong>不同的商品创建相似的促销活动</strong>，我们可以使用深拷贝来实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建原始促销活动</span>
        <span class="token class-name">PromotionEvent</span> originalEvent <span class="token operator">=</span> <span class="token function">createSamplePromotionEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建新的促销活动</span>
        <span class="token class-name">PromotionEvent</span> newEvent <span class="token operator">=</span> originalEvent<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        newEvent<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;新的促销活动&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 现在newEvent是originalEvent的一个深拷贝副本，我们可以对它进行修改而不会影响originalEvent</span>
        <span class="token comment">// 修改新促销活动的日期</span>
        newEvent<span class="token punctuation">.</span><span class="token function">setStartDate</span><span class="token punctuation">(</span><span class="token function">addDays</span><span class="token punctuation">(</span>newEvent<span class="token punctuation">.</span><span class="token function">getStartDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        newEvent<span class="token punctuation">.</span><span class="token function">setEndDate</span><span class="token punctuation">(</span><span class="token function">addDays</span><span class="token punctuation">(</span>newEvent<span class="token punctuation">.</span><span class="token function">getEndDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 修改新促销活动的部分规则</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PromotionRule</span><span class="token punctuation">&gt;</span></span> newRules <span class="token operator">=</span> newEvent<span class="token punctuation">.</span><span class="token function">getRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        newRules<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDiscount</span><span class="token punctuation">(</span>newRules<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDiscount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 现在，我们已经成功地复制了一个与原始活动相似但具有不同日期和部分规则的新促销活动。</span>
        <span class="token comment">// 可以将新活动应用于其他商品，而原始活动保持不变。</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">PromotionEvent</span> <span class="token function">createSamplePromotionEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建示例促销活动</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PromotionRule</span><span class="token punctuation">&gt;</span></span> rules <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">PromotionRule</span><span class="token punctuation">(</span><span class="token string">&quot;折扣&quot;</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">PromotionRule</span><span class="token punctuation">(</span><span class="token string">&quot;满减&quot;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PromotionEvent</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PromotionEvent</span><span class="token punctuation">(</span>
            <span class="token string">&quot;原始促销活动&quot;</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">addDays</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            rules
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> event<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">addDays</span><span class="token punctuation">(</span><span class="token class-name">Date</span> date<span class="token punctuation">,</span> <span class="token keyword">int</span> days<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        calendar<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DATE</span><span class="token punctuation">,</span> days<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>序列化方式：前提需要实现Serializable接口</strong></p></blockquote><p>深拷贝的通用做法就是使用对象想对原型对象进行序列化，再对序列化后的二进制流 执行反序列化操作，就可以得到一个完完全全相同的对象，这种序列化的方式有很多，比如先转为json，在转成内存模型的对象，也是可以的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deepCopyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setDog</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 将对象写到字节数组当中</span>
    <span class="token class-name">ByteArrayOutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取字节数组</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> outputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 用输入流读出来</span>
    <span class="token class-name">ByteArrayInputStream</span> byteArrayInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>byteArrayInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> object <span class="token operator">=</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">User</span> user1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> object<span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">getDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>应用场景：</strong></p></blockquote><ol><li><p>在订单管理系统中，深拷贝可以用于创建新订单并复制现有订单的商品和客户信息。假设我们有一个名为 <code>Order</code> 的类，其中包含订单信息和关联的商品和客户对象。我们可以通过深拷贝来创建新订单，并复制原始订单中的商品和客户信息，但需要重新填写新订单的其他信息。这样，新订单和原始订单是相互独立的对象，对新订单的修改不会影响原始订单。就比如每个月需要进一批货，但是大部分货的信息都一样，只是日期不一样，就可以使用深拷贝。</p></li><li><p>在前端开发中，重置按钮通常用于将表单或页面恢复到初始状态。当加载表单或页面时，可以进行深拷贝，复制一份初始内容作为参考。当用户点击重置按钮时，可以将深拷贝的对象作为引用，重新将其内容设置到表单或页面中，从而实现重置操作。通过深拷贝并使用引用转换，可以避免对原始对象的修改，确保每次重置都回到初始状态。</p></li></ol>`,156);function V(J,K){const c=l("Tabs");return i(),u("div",null,[v,k(" more "),m,r(c,{id:"112",data:[{id:"饿汉式"},{id:"懒汉式"},{id:"双重检查锁"},{id:"静态内部类"},{id:"枚举类"},{id:"反射和序列化"}]},{title0:a(({value:t,isActive:p})=>[s("饿汉式")]),title1:a(({value:t,isActive:p})=>[s("懒汉式")]),title2:a(({value:t,isActive:p})=>[s("双重检查锁")]),title3:a(({value:t,isActive:p})=>[s("静态内部类")]),title4:a(({value:t,isActive:p})=>[s("枚举类")]),title5:a(({value:t,isActive:p})=>[s("反射和序列化")]),tab0:a(({value:t,isActive:p})=>[b,y,w,g]),tab1:a(({value:t,isActive:p})=>[f,h,S,q]),tab2:a(({value:t,isActive:p})=>[R,x,_,P]),tab3:a(({value:t,isActive:p})=>[I,A,C,L]),tab4:a(({value:t,isActive:p})=>[B,j,E,F,N,D,T,O]),tab5:a(({value:t,isActive:p})=>[U,M,z]),_:1}),H])}const W=o(d,[["render",V],["__file","creative.html.vue"]]);export{W as default};
